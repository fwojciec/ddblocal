// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/fwojciec/ddblocal"
	"sync"
)

var (
	lockExecutorTerminatorMockExecute   sync.RWMutex
	lockExecutorTerminatorMockTerminate sync.RWMutex
)

// Ensure, that ExecutorTerminatorMock does implement ddblocal.ExecutorTerminator.
// If this is not the case, regenerate this file with moq.
var _ ddblocal.ExecutorTerminator = &ExecutorTerminatorMock{}

// ExecutorTerminatorMock is a mock implementation of ddblocal.ExecutorTerminator.
//
//     func TestSomethingThatUsesExecutorTerminator(t *testing.T) {
//
//         // make and configure a mocked ddblocal.ExecutorTerminator
//         mockedExecutorTerminator := &ExecutorTerminatorMock{
//             ExecuteFunc: func(name string, arg ...string) error {
// 	               panic("mock out the Execute method")
//             },
//             TerminateFunc: func() error {
// 	               panic("mock out the Terminate method")
//             },
//         }
//
//         // use mockedExecutorTerminator in code that requires ddblocal.ExecutorTerminator
//         // and then make assertions.
//
//     }
type ExecutorTerminatorMock struct {
	// ExecuteFunc mocks the Execute method.
	ExecuteFunc func(name string, arg ...string) error

	// TerminateFunc mocks the Terminate method.
	TerminateFunc func() error

	// calls tracks calls to the methods.
	calls struct {
		// Execute holds details about calls to the Execute method.
		Execute []struct {
			// Name is the name argument value.
			Name string
			// Arg is the arg argument value.
			Arg []string
		}
		// Terminate holds details about calls to the Terminate method.
		Terminate []struct {
		}
	}
}

// Execute calls ExecuteFunc.
func (mock *ExecutorTerminatorMock) Execute(name string, arg ...string) error {
	if mock.ExecuteFunc == nil {
		panic("ExecutorTerminatorMock.ExecuteFunc: method is nil but ExecutorTerminator.Execute was just called")
	}
	callInfo := struct {
		Name string
		Arg  []string
	}{
		Name: name,
		Arg:  arg,
	}
	lockExecutorTerminatorMockExecute.Lock()
	mock.calls.Execute = append(mock.calls.Execute, callInfo)
	lockExecutorTerminatorMockExecute.Unlock()
	return mock.ExecuteFunc(name, arg...)
}

// ExecuteCalls gets all the calls that were made to Execute.
// Check the length with:
//     len(mockedExecutorTerminator.ExecuteCalls())
func (mock *ExecutorTerminatorMock) ExecuteCalls() []struct {
	Name string
	Arg  []string
} {
	var calls []struct {
		Name string
		Arg  []string
	}
	lockExecutorTerminatorMockExecute.RLock()
	calls = mock.calls.Execute
	lockExecutorTerminatorMockExecute.RUnlock()
	return calls
}

// Terminate calls TerminateFunc.
func (mock *ExecutorTerminatorMock) Terminate() error {
	if mock.TerminateFunc == nil {
		panic("ExecutorTerminatorMock.TerminateFunc: method is nil but ExecutorTerminator.Terminate was just called")
	}
	callInfo := struct {
	}{}
	lockExecutorTerminatorMockTerminate.Lock()
	mock.calls.Terminate = append(mock.calls.Terminate, callInfo)
	lockExecutorTerminatorMockTerminate.Unlock()
	return mock.TerminateFunc()
}

// TerminateCalls gets all the calls that were made to Terminate.
// Check the length with:
//     len(mockedExecutorTerminator.TerminateCalls())
func (mock *ExecutorTerminatorMock) TerminateCalls() []struct {
} {
	var calls []struct {
	}
	lockExecutorTerminatorMockTerminate.RLock()
	calls = mock.calls.Terminate
	lockExecutorTerminatorMockTerminate.RUnlock()
	return calls
}
