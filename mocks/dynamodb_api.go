// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/dynamodb"
	"github.com/aws/aws-sdk-go/service/dynamodb/dynamodbiface"
	"sync"
)

var (
	lockDynamoDBAPIMockBatchExecuteStatement                          sync.RWMutex
	lockDynamoDBAPIMockBatchExecuteStatementRequest                   sync.RWMutex
	lockDynamoDBAPIMockBatchExecuteStatementWithContext               sync.RWMutex
	lockDynamoDBAPIMockBatchGetItem                                   sync.RWMutex
	lockDynamoDBAPIMockBatchGetItemPages                              sync.RWMutex
	lockDynamoDBAPIMockBatchGetItemPagesWithContext                   sync.RWMutex
	lockDynamoDBAPIMockBatchGetItemRequest                            sync.RWMutex
	lockDynamoDBAPIMockBatchGetItemWithContext                        sync.RWMutex
	lockDynamoDBAPIMockBatchWriteItem                                 sync.RWMutex
	lockDynamoDBAPIMockBatchWriteItemRequest                          sync.RWMutex
	lockDynamoDBAPIMockBatchWriteItemWithContext                      sync.RWMutex
	lockDynamoDBAPIMockCreateBackup                                   sync.RWMutex
	lockDynamoDBAPIMockCreateBackupRequest                            sync.RWMutex
	lockDynamoDBAPIMockCreateBackupWithContext                        sync.RWMutex
	lockDynamoDBAPIMockCreateGlobalTable                              sync.RWMutex
	lockDynamoDBAPIMockCreateGlobalTableRequest                       sync.RWMutex
	lockDynamoDBAPIMockCreateGlobalTableWithContext                   sync.RWMutex
	lockDynamoDBAPIMockCreateTable                                    sync.RWMutex
	lockDynamoDBAPIMockCreateTableRequest                             sync.RWMutex
	lockDynamoDBAPIMockCreateTableWithContext                         sync.RWMutex
	lockDynamoDBAPIMockDeleteBackup                                   sync.RWMutex
	lockDynamoDBAPIMockDeleteBackupRequest                            sync.RWMutex
	lockDynamoDBAPIMockDeleteBackupWithContext                        sync.RWMutex
	lockDynamoDBAPIMockDeleteItem                                     sync.RWMutex
	lockDynamoDBAPIMockDeleteItemRequest                              sync.RWMutex
	lockDynamoDBAPIMockDeleteItemWithContext                          sync.RWMutex
	lockDynamoDBAPIMockDeleteTable                                    sync.RWMutex
	lockDynamoDBAPIMockDeleteTableRequest                             sync.RWMutex
	lockDynamoDBAPIMockDeleteTableWithContext                         sync.RWMutex
	lockDynamoDBAPIMockDescribeBackup                                 sync.RWMutex
	lockDynamoDBAPIMockDescribeBackupRequest                          sync.RWMutex
	lockDynamoDBAPIMockDescribeBackupWithContext                      sync.RWMutex
	lockDynamoDBAPIMockDescribeContinuousBackups                      sync.RWMutex
	lockDynamoDBAPIMockDescribeContinuousBackupsRequest               sync.RWMutex
	lockDynamoDBAPIMockDescribeContinuousBackupsWithContext           sync.RWMutex
	lockDynamoDBAPIMockDescribeContributorInsights                    sync.RWMutex
	lockDynamoDBAPIMockDescribeContributorInsightsRequest             sync.RWMutex
	lockDynamoDBAPIMockDescribeContributorInsightsWithContext         sync.RWMutex
	lockDynamoDBAPIMockDescribeEndpoints                              sync.RWMutex
	lockDynamoDBAPIMockDescribeEndpointsRequest                       sync.RWMutex
	lockDynamoDBAPIMockDescribeEndpointsWithContext                   sync.RWMutex
	lockDynamoDBAPIMockDescribeExport                                 sync.RWMutex
	lockDynamoDBAPIMockDescribeExportRequest                          sync.RWMutex
	lockDynamoDBAPIMockDescribeExportWithContext                      sync.RWMutex
	lockDynamoDBAPIMockDescribeGlobalTable                            sync.RWMutex
	lockDynamoDBAPIMockDescribeGlobalTableRequest                     sync.RWMutex
	lockDynamoDBAPIMockDescribeGlobalTableSettings                    sync.RWMutex
	lockDynamoDBAPIMockDescribeGlobalTableSettingsRequest             sync.RWMutex
	lockDynamoDBAPIMockDescribeGlobalTableSettingsWithContext         sync.RWMutex
	lockDynamoDBAPIMockDescribeGlobalTableWithContext                 sync.RWMutex
	lockDynamoDBAPIMockDescribeKinesisStreamingDestination            sync.RWMutex
	lockDynamoDBAPIMockDescribeKinesisStreamingDestinationRequest     sync.RWMutex
	lockDynamoDBAPIMockDescribeKinesisStreamingDestinationWithContext sync.RWMutex
	lockDynamoDBAPIMockDescribeLimits                                 sync.RWMutex
	lockDynamoDBAPIMockDescribeLimitsRequest                          sync.RWMutex
	lockDynamoDBAPIMockDescribeLimitsWithContext                      sync.RWMutex
	lockDynamoDBAPIMockDescribeTable                                  sync.RWMutex
	lockDynamoDBAPIMockDescribeTableReplicaAutoScaling                sync.RWMutex
	lockDynamoDBAPIMockDescribeTableReplicaAutoScalingRequest         sync.RWMutex
	lockDynamoDBAPIMockDescribeTableReplicaAutoScalingWithContext     sync.RWMutex
	lockDynamoDBAPIMockDescribeTableRequest                           sync.RWMutex
	lockDynamoDBAPIMockDescribeTableWithContext                       sync.RWMutex
	lockDynamoDBAPIMockDescribeTimeToLive                             sync.RWMutex
	lockDynamoDBAPIMockDescribeTimeToLiveRequest                      sync.RWMutex
	lockDynamoDBAPIMockDescribeTimeToLiveWithContext                  sync.RWMutex
	lockDynamoDBAPIMockDisableKinesisStreamingDestination             sync.RWMutex
	lockDynamoDBAPIMockDisableKinesisStreamingDestinationRequest      sync.RWMutex
	lockDynamoDBAPIMockDisableKinesisStreamingDestinationWithContext  sync.RWMutex
	lockDynamoDBAPIMockEnableKinesisStreamingDestination              sync.RWMutex
	lockDynamoDBAPIMockEnableKinesisStreamingDestinationRequest       sync.RWMutex
	lockDynamoDBAPIMockEnableKinesisStreamingDestinationWithContext   sync.RWMutex
	lockDynamoDBAPIMockExecuteStatement                               sync.RWMutex
	lockDynamoDBAPIMockExecuteStatementRequest                        sync.RWMutex
	lockDynamoDBAPIMockExecuteStatementWithContext                    sync.RWMutex
	lockDynamoDBAPIMockExecuteTransaction                             sync.RWMutex
	lockDynamoDBAPIMockExecuteTransactionRequest                      sync.RWMutex
	lockDynamoDBAPIMockExecuteTransactionWithContext                  sync.RWMutex
	lockDynamoDBAPIMockExportTableToPointInTime                       sync.RWMutex
	lockDynamoDBAPIMockExportTableToPointInTimeRequest                sync.RWMutex
	lockDynamoDBAPIMockExportTableToPointInTimeWithContext            sync.RWMutex
	lockDynamoDBAPIMockGetItem                                        sync.RWMutex
	lockDynamoDBAPIMockGetItemRequest                                 sync.RWMutex
	lockDynamoDBAPIMockGetItemWithContext                             sync.RWMutex
	lockDynamoDBAPIMockListBackups                                    sync.RWMutex
	lockDynamoDBAPIMockListBackupsRequest                             sync.RWMutex
	lockDynamoDBAPIMockListBackupsWithContext                         sync.RWMutex
	lockDynamoDBAPIMockListContributorInsights                        sync.RWMutex
	lockDynamoDBAPIMockListContributorInsightsPages                   sync.RWMutex
	lockDynamoDBAPIMockListContributorInsightsPagesWithContext        sync.RWMutex
	lockDynamoDBAPIMockListContributorInsightsRequest                 sync.RWMutex
	lockDynamoDBAPIMockListContributorInsightsWithContext             sync.RWMutex
	lockDynamoDBAPIMockListExports                                    sync.RWMutex
	lockDynamoDBAPIMockListExportsPages                               sync.RWMutex
	lockDynamoDBAPIMockListExportsPagesWithContext                    sync.RWMutex
	lockDynamoDBAPIMockListExportsRequest                             sync.RWMutex
	lockDynamoDBAPIMockListExportsWithContext                         sync.RWMutex
	lockDynamoDBAPIMockListGlobalTables                               sync.RWMutex
	lockDynamoDBAPIMockListGlobalTablesRequest                        sync.RWMutex
	lockDynamoDBAPIMockListGlobalTablesWithContext                    sync.RWMutex
	lockDynamoDBAPIMockListTables                                     sync.RWMutex
	lockDynamoDBAPIMockListTablesPages                                sync.RWMutex
	lockDynamoDBAPIMockListTablesPagesWithContext                     sync.RWMutex
	lockDynamoDBAPIMockListTablesRequest                              sync.RWMutex
	lockDynamoDBAPIMockListTablesWithContext                          sync.RWMutex
	lockDynamoDBAPIMockListTagsOfResource                             sync.RWMutex
	lockDynamoDBAPIMockListTagsOfResourceRequest                      sync.RWMutex
	lockDynamoDBAPIMockListTagsOfResourceWithContext                  sync.RWMutex
	lockDynamoDBAPIMockPutItem                                        sync.RWMutex
	lockDynamoDBAPIMockPutItemRequest                                 sync.RWMutex
	lockDynamoDBAPIMockPutItemWithContext                             sync.RWMutex
	lockDynamoDBAPIMockQuery                                          sync.RWMutex
	lockDynamoDBAPIMockQueryPages                                     sync.RWMutex
	lockDynamoDBAPIMockQueryPagesWithContext                          sync.RWMutex
	lockDynamoDBAPIMockQueryRequest                                   sync.RWMutex
	lockDynamoDBAPIMockQueryWithContext                               sync.RWMutex
	lockDynamoDBAPIMockRestoreTableFromBackup                         sync.RWMutex
	lockDynamoDBAPIMockRestoreTableFromBackupRequest                  sync.RWMutex
	lockDynamoDBAPIMockRestoreTableFromBackupWithContext              sync.RWMutex
	lockDynamoDBAPIMockRestoreTableToPointInTime                      sync.RWMutex
	lockDynamoDBAPIMockRestoreTableToPointInTimeRequest               sync.RWMutex
	lockDynamoDBAPIMockRestoreTableToPointInTimeWithContext           sync.RWMutex
	lockDynamoDBAPIMockScan                                           sync.RWMutex
	lockDynamoDBAPIMockScanPages                                      sync.RWMutex
	lockDynamoDBAPIMockScanPagesWithContext                           sync.RWMutex
	lockDynamoDBAPIMockScanRequest                                    sync.RWMutex
	lockDynamoDBAPIMockScanWithContext                                sync.RWMutex
	lockDynamoDBAPIMockTagResource                                    sync.RWMutex
	lockDynamoDBAPIMockTagResourceRequest                             sync.RWMutex
	lockDynamoDBAPIMockTagResourceWithContext                         sync.RWMutex
	lockDynamoDBAPIMockTransactGetItems                               sync.RWMutex
	lockDynamoDBAPIMockTransactGetItemsRequest                        sync.RWMutex
	lockDynamoDBAPIMockTransactGetItemsWithContext                    sync.RWMutex
	lockDynamoDBAPIMockTransactWriteItems                             sync.RWMutex
	lockDynamoDBAPIMockTransactWriteItemsRequest                      sync.RWMutex
	lockDynamoDBAPIMockTransactWriteItemsWithContext                  sync.RWMutex
	lockDynamoDBAPIMockUntagResource                                  sync.RWMutex
	lockDynamoDBAPIMockUntagResourceRequest                           sync.RWMutex
	lockDynamoDBAPIMockUntagResourceWithContext                       sync.RWMutex
	lockDynamoDBAPIMockUpdateContinuousBackups                        sync.RWMutex
	lockDynamoDBAPIMockUpdateContinuousBackupsRequest                 sync.RWMutex
	lockDynamoDBAPIMockUpdateContinuousBackupsWithContext             sync.RWMutex
	lockDynamoDBAPIMockUpdateContributorInsights                      sync.RWMutex
	lockDynamoDBAPIMockUpdateContributorInsightsRequest               sync.RWMutex
	lockDynamoDBAPIMockUpdateContributorInsightsWithContext           sync.RWMutex
	lockDynamoDBAPIMockUpdateGlobalTable                              sync.RWMutex
	lockDynamoDBAPIMockUpdateGlobalTableRequest                       sync.RWMutex
	lockDynamoDBAPIMockUpdateGlobalTableSettings                      sync.RWMutex
	lockDynamoDBAPIMockUpdateGlobalTableSettingsRequest               sync.RWMutex
	lockDynamoDBAPIMockUpdateGlobalTableSettingsWithContext           sync.RWMutex
	lockDynamoDBAPIMockUpdateGlobalTableWithContext                   sync.RWMutex
	lockDynamoDBAPIMockUpdateItem                                     sync.RWMutex
	lockDynamoDBAPIMockUpdateItemRequest                              sync.RWMutex
	lockDynamoDBAPIMockUpdateItemWithContext                          sync.RWMutex
	lockDynamoDBAPIMockUpdateTable                                    sync.RWMutex
	lockDynamoDBAPIMockUpdateTableReplicaAutoScaling                  sync.RWMutex
	lockDynamoDBAPIMockUpdateTableReplicaAutoScalingRequest           sync.RWMutex
	lockDynamoDBAPIMockUpdateTableReplicaAutoScalingWithContext       sync.RWMutex
	lockDynamoDBAPIMockUpdateTableRequest                             sync.RWMutex
	lockDynamoDBAPIMockUpdateTableWithContext                         sync.RWMutex
	lockDynamoDBAPIMockUpdateTimeToLive                               sync.RWMutex
	lockDynamoDBAPIMockUpdateTimeToLiveRequest                        sync.RWMutex
	lockDynamoDBAPIMockUpdateTimeToLiveWithContext                    sync.RWMutex
	lockDynamoDBAPIMockWaitUntilTableExists                           sync.RWMutex
	lockDynamoDBAPIMockWaitUntilTableExistsWithContext                sync.RWMutex
	lockDynamoDBAPIMockWaitUntilTableNotExists                        sync.RWMutex
	lockDynamoDBAPIMockWaitUntilTableNotExistsWithContext             sync.RWMutex
)

// Ensure, that DynamoDBAPIMock does implement dynamodbiface.DynamoDBAPI.
// If this is not the case, regenerate this file with moq.
var _ dynamodbiface.DynamoDBAPI = &DynamoDBAPIMock{}

// DynamoDBAPIMock is a mock implementation of dynamodbiface.DynamoDBAPI.
//
//     func TestSomethingThatUsesDynamoDBAPI(t *testing.T) {
//
//         // make and configure a mocked dynamodbiface.DynamoDBAPI
//         mockedDynamoDBAPI := &DynamoDBAPIMock{
//             BatchExecuteStatementFunc: func(in1 *dynamodb.BatchExecuteStatementInput) (*dynamodb.BatchExecuteStatementOutput, error) {
// 	               panic("mock out the BatchExecuteStatement method")
//             },
//             BatchExecuteStatementRequestFunc: func(in1 *dynamodb.BatchExecuteStatementInput) (*request.Request, *dynamodb.BatchExecuteStatementOutput) {
// 	               panic("mock out the BatchExecuteStatementRequest method")
//             },
//             BatchExecuteStatementWithContextFunc: func(in1 context.Context, in2 *dynamodb.BatchExecuteStatementInput, in3 ...request.Option) (*dynamodb.BatchExecuteStatementOutput, error) {
// 	               panic("mock out the BatchExecuteStatementWithContext method")
//             },
//             BatchGetItemFunc: func(in1 *dynamodb.BatchGetItemInput) (*dynamodb.BatchGetItemOutput, error) {
// 	               panic("mock out the BatchGetItem method")
//             },
//             BatchGetItemPagesFunc: func(in1 *dynamodb.BatchGetItemInput, in2 func(*dynamodb.BatchGetItemOutput, bool) bool) error {
// 	               panic("mock out the BatchGetItemPages method")
//             },
//             BatchGetItemPagesWithContextFunc: func(in1 context.Context, in2 *dynamodb.BatchGetItemInput, in3 func(*dynamodb.BatchGetItemOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the BatchGetItemPagesWithContext method")
//             },
//             BatchGetItemRequestFunc: func(in1 *dynamodb.BatchGetItemInput) (*request.Request, *dynamodb.BatchGetItemOutput) {
// 	               panic("mock out the BatchGetItemRequest method")
//             },
//             BatchGetItemWithContextFunc: func(in1 context.Context, in2 *dynamodb.BatchGetItemInput, in3 ...request.Option) (*dynamodb.BatchGetItemOutput, error) {
// 	               panic("mock out the BatchGetItemWithContext method")
//             },
//             BatchWriteItemFunc: func(in1 *dynamodb.BatchWriteItemInput) (*dynamodb.BatchWriteItemOutput, error) {
// 	               panic("mock out the BatchWriteItem method")
//             },
//             BatchWriteItemRequestFunc: func(in1 *dynamodb.BatchWriteItemInput) (*request.Request, *dynamodb.BatchWriteItemOutput) {
// 	               panic("mock out the BatchWriteItemRequest method")
//             },
//             BatchWriteItemWithContextFunc: func(in1 context.Context, in2 *dynamodb.BatchWriteItemInput, in3 ...request.Option) (*dynamodb.BatchWriteItemOutput, error) {
// 	               panic("mock out the BatchWriteItemWithContext method")
//             },
//             CreateBackupFunc: func(in1 *dynamodb.CreateBackupInput) (*dynamodb.CreateBackupOutput, error) {
// 	               panic("mock out the CreateBackup method")
//             },
//             CreateBackupRequestFunc: func(in1 *dynamodb.CreateBackupInput) (*request.Request, *dynamodb.CreateBackupOutput) {
// 	               panic("mock out the CreateBackupRequest method")
//             },
//             CreateBackupWithContextFunc: func(in1 context.Context, in2 *dynamodb.CreateBackupInput, in3 ...request.Option) (*dynamodb.CreateBackupOutput, error) {
// 	               panic("mock out the CreateBackupWithContext method")
//             },
//             CreateGlobalTableFunc: func(in1 *dynamodb.CreateGlobalTableInput) (*dynamodb.CreateGlobalTableOutput, error) {
// 	               panic("mock out the CreateGlobalTable method")
//             },
//             CreateGlobalTableRequestFunc: func(in1 *dynamodb.CreateGlobalTableInput) (*request.Request, *dynamodb.CreateGlobalTableOutput) {
// 	               panic("mock out the CreateGlobalTableRequest method")
//             },
//             CreateGlobalTableWithContextFunc: func(in1 context.Context, in2 *dynamodb.CreateGlobalTableInput, in3 ...request.Option) (*dynamodb.CreateGlobalTableOutput, error) {
// 	               panic("mock out the CreateGlobalTableWithContext method")
//             },
//             CreateTableFunc: func(in1 *dynamodb.CreateTableInput) (*dynamodb.CreateTableOutput, error) {
// 	               panic("mock out the CreateTable method")
//             },
//             CreateTableRequestFunc: func(in1 *dynamodb.CreateTableInput) (*request.Request, *dynamodb.CreateTableOutput) {
// 	               panic("mock out the CreateTableRequest method")
//             },
//             CreateTableWithContextFunc: func(in1 context.Context, in2 *dynamodb.CreateTableInput, in3 ...request.Option) (*dynamodb.CreateTableOutput, error) {
// 	               panic("mock out the CreateTableWithContext method")
//             },
//             DeleteBackupFunc: func(in1 *dynamodb.DeleteBackupInput) (*dynamodb.DeleteBackupOutput, error) {
// 	               panic("mock out the DeleteBackup method")
//             },
//             DeleteBackupRequestFunc: func(in1 *dynamodb.DeleteBackupInput) (*request.Request, *dynamodb.DeleteBackupOutput) {
// 	               panic("mock out the DeleteBackupRequest method")
//             },
//             DeleteBackupWithContextFunc: func(in1 context.Context, in2 *dynamodb.DeleteBackupInput, in3 ...request.Option) (*dynamodb.DeleteBackupOutput, error) {
// 	               panic("mock out the DeleteBackupWithContext method")
//             },
//             DeleteItemFunc: func(in1 *dynamodb.DeleteItemInput) (*dynamodb.DeleteItemOutput, error) {
// 	               panic("mock out the DeleteItem method")
//             },
//             DeleteItemRequestFunc: func(in1 *dynamodb.DeleteItemInput) (*request.Request, *dynamodb.DeleteItemOutput) {
// 	               panic("mock out the DeleteItemRequest method")
//             },
//             DeleteItemWithContextFunc: func(in1 context.Context, in2 *dynamodb.DeleteItemInput, in3 ...request.Option) (*dynamodb.DeleteItemOutput, error) {
// 	               panic("mock out the DeleteItemWithContext method")
//             },
//             DeleteTableFunc: func(in1 *dynamodb.DeleteTableInput) (*dynamodb.DeleteTableOutput, error) {
// 	               panic("mock out the DeleteTable method")
//             },
//             DeleteTableRequestFunc: func(in1 *dynamodb.DeleteTableInput) (*request.Request, *dynamodb.DeleteTableOutput) {
// 	               panic("mock out the DeleteTableRequest method")
//             },
//             DeleteTableWithContextFunc: func(in1 context.Context, in2 *dynamodb.DeleteTableInput, in3 ...request.Option) (*dynamodb.DeleteTableOutput, error) {
// 	               panic("mock out the DeleteTableWithContext method")
//             },
//             DescribeBackupFunc: func(in1 *dynamodb.DescribeBackupInput) (*dynamodb.DescribeBackupOutput, error) {
// 	               panic("mock out the DescribeBackup method")
//             },
//             DescribeBackupRequestFunc: func(in1 *dynamodb.DescribeBackupInput) (*request.Request, *dynamodb.DescribeBackupOutput) {
// 	               panic("mock out the DescribeBackupRequest method")
//             },
//             DescribeBackupWithContextFunc: func(in1 context.Context, in2 *dynamodb.DescribeBackupInput, in3 ...request.Option) (*dynamodb.DescribeBackupOutput, error) {
// 	               panic("mock out the DescribeBackupWithContext method")
//             },
//             DescribeContinuousBackupsFunc: func(in1 *dynamodb.DescribeContinuousBackupsInput) (*dynamodb.DescribeContinuousBackupsOutput, error) {
// 	               panic("mock out the DescribeContinuousBackups method")
//             },
//             DescribeContinuousBackupsRequestFunc: func(in1 *dynamodb.DescribeContinuousBackupsInput) (*request.Request, *dynamodb.DescribeContinuousBackupsOutput) {
// 	               panic("mock out the DescribeContinuousBackupsRequest method")
//             },
//             DescribeContinuousBackupsWithContextFunc: func(in1 context.Context, in2 *dynamodb.DescribeContinuousBackupsInput, in3 ...request.Option) (*dynamodb.DescribeContinuousBackupsOutput, error) {
// 	               panic("mock out the DescribeContinuousBackupsWithContext method")
//             },
//             DescribeContributorInsightsFunc: func(in1 *dynamodb.DescribeContributorInsightsInput) (*dynamodb.DescribeContributorInsightsOutput, error) {
// 	               panic("mock out the DescribeContributorInsights method")
//             },
//             DescribeContributorInsightsRequestFunc: func(in1 *dynamodb.DescribeContributorInsightsInput) (*request.Request, *dynamodb.DescribeContributorInsightsOutput) {
// 	               panic("mock out the DescribeContributorInsightsRequest method")
//             },
//             DescribeContributorInsightsWithContextFunc: func(in1 context.Context, in2 *dynamodb.DescribeContributorInsightsInput, in3 ...request.Option) (*dynamodb.DescribeContributorInsightsOutput, error) {
// 	               panic("mock out the DescribeContributorInsightsWithContext method")
//             },
//             DescribeEndpointsFunc: func(in1 *dynamodb.DescribeEndpointsInput) (*dynamodb.DescribeEndpointsOutput, error) {
// 	               panic("mock out the DescribeEndpoints method")
//             },
//             DescribeEndpointsRequestFunc: func(in1 *dynamodb.DescribeEndpointsInput) (*request.Request, *dynamodb.DescribeEndpointsOutput) {
// 	               panic("mock out the DescribeEndpointsRequest method")
//             },
//             DescribeEndpointsWithContextFunc: func(in1 context.Context, in2 *dynamodb.DescribeEndpointsInput, in3 ...request.Option) (*dynamodb.DescribeEndpointsOutput, error) {
// 	               panic("mock out the DescribeEndpointsWithContext method")
//             },
//             DescribeExportFunc: func(in1 *dynamodb.DescribeExportInput) (*dynamodb.DescribeExportOutput, error) {
// 	               panic("mock out the DescribeExport method")
//             },
//             DescribeExportRequestFunc: func(in1 *dynamodb.DescribeExportInput) (*request.Request, *dynamodb.DescribeExportOutput) {
// 	               panic("mock out the DescribeExportRequest method")
//             },
//             DescribeExportWithContextFunc: func(in1 context.Context, in2 *dynamodb.DescribeExportInput, in3 ...request.Option) (*dynamodb.DescribeExportOutput, error) {
// 	               panic("mock out the DescribeExportWithContext method")
//             },
//             DescribeGlobalTableFunc: func(in1 *dynamodb.DescribeGlobalTableInput) (*dynamodb.DescribeGlobalTableOutput, error) {
// 	               panic("mock out the DescribeGlobalTable method")
//             },
//             DescribeGlobalTableRequestFunc: func(in1 *dynamodb.DescribeGlobalTableInput) (*request.Request, *dynamodb.DescribeGlobalTableOutput) {
// 	               panic("mock out the DescribeGlobalTableRequest method")
//             },
//             DescribeGlobalTableSettingsFunc: func(in1 *dynamodb.DescribeGlobalTableSettingsInput) (*dynamodb.DescribeGlobalTableSettingsOutput, error) {
// 	               panic("mock out the DescribeGlobalTableSettings method")
//             },
//             DescribeGlobalTableSettingsRequestFunc: func(in1 *dynamodb.DescribeGlobalTableSettingsInput) (*request.Request, *dynamodb.DescribeGlobalTableSettingsOutput) {
// 	               panic("mock out the DescribeGlobalTableSettingsRequest method")
//             },
//             DescribeGlobalTableSettingsWithContextFunc: func(in1 context.Context, in2 *dynamodb.DescribeGlobalTableSettingsInput, in3 ...request.Option) (*dynamodb.DescribeGlobalTableSettingsOutput, error) {
// 	               panic("mock out the DescribeGlobalTableSettingsWithContext method")
//             },
//             DescribeGlobalTableWithContextFunc: func(in1 context.Context, in2 *dynamodb.DescribeGlobalTableInput, in3 ...request.Option) (*dynamodb.DescribeGlobalTableOutput, error) {
// 	               panic("mock out the DescribeGlobalTableWithContext method")
//             },
//             DescribeKinesisStreamingDestinationFunc: func(in1 *dynamodb.DescribeKinesisStreamingDestinationInput) (*dynamodb.DescribeKinesisStreamingDestinationOutput, error) {
// 	               panic("mock out the DescribeKinesisStreamingDestination method")
//             },
//             DescribeKinesisStreamingDestinationRequestFunc: func(in1 *dynamodb.DescribeKinesisStreamingDestinationInput) (*request.Request, *dynamodb.DescribeKinesisStreamingDestinationOutput) {
// 	               panic("mock out the DescribeKinesisStreamingDestinationRequest method")
//             },
//             DescribeKinesisStreamingDestinationWithContextFunc: func(in1 context.Context, in2 *dynamodb.DescribeKinesisStreamingDestinationInput, in3 ...request.Option) (*dynamodb.DescribeKinesisStreamingDestinationOutput, error) {
// 	               panic("mock out the DescribeKinesisStreamingDestinationWithContext method")
//             },
//             DescribeLimitsFunc: func(in1 *dynamodb.DescribeLimitsInput) (*dynamodb.DescribeLimitsOutput, error) {
// 	               panic("mock out the DescribeLimits method")
//             },
//             DescribeLimitsRequestFunc: func(in1 *dynamodb.DescribeLimitsInput) (*request.Request, *dynamodb.DescribeLimitsOutput) {
// 	               panic("mock out the DescribeLimitsRequest method")
//             },
//             DescribeLimitsWithContextFunc: func(in1 context.Context, in2 *dynamodb.DescribeLimitsInput, in3 ...request.Option) (*dynamodb.DescribeLimitsOutput, error) {
// 	               panic("mock out the DescribeLimitsWithContext method")
//             },
//             DescribeTableFunc: func(in1 *dynamodb.DescribeTableInput) (*dynamodb.DescribeTableOutput, error) {
// 	               panic("mock out the DescribeTable method")
//             },
//             DescribeTableReplicaAutoScalingFunc: func(in1 *dynamodb.DescribeTableReplicaAutoScalingInput) (*dynamodb.DescribeTableReplicaAutoScalingOutput, error) {
// 	               panic("mock out the DescribeTableReplicaAutoScaling method")
//             },
//             DescribeTableReplicaAutoScalingRequestFunc: func(in1 *dynamodb.DescribeTableReplicaAutoScalingInput) (*request.Request, *dynamodb.DescribeTableReplicaAutoScalingOutput) {
// 	               panic("mock out the DescribeTableReplicaAutoScalingRequest method")
//             },
//             DescribeTableReplicaAutoScalingWithContextFunc: func(in1 context.Context, in2 *dynamodb.DescribeTableReplicaAutoScalingInput, in3 ...request.Option) (*dynamodb.DescribeTableReplicaAutoScalingOutput, error) {
// 	               panic("mock out the DescribeTableReplicaAutoScalingWithContext method")
//             },
//             DescribeTableRequestFunc: func(in1 *dynamodb.DescribeTableInput) (*request.Request, *dynamodb.DescribeTableOutput) {
// 	               panic("mock out the DescribeTableRequest method")
//             },
//             DescribeTableWithContextFunc: func(in1 context.Context, in2 *dynamodb.DescribeTableInput, in3 ...request.Option) (*dynamodb.DescribeTableOutput, error) {
// 	               panic("mock out the DescribeTableWithContext method")
//             },
//             DescribeTimeToLiveFunc: func(in1 *dynamodb.DescribeTimeToLiveInput) (*dynamodb.DescribeTimeToLiveOutput, error) {
// 	               panic("mock out the DescribeTimeToLive method")
//             },
//             DescribeTimeToLiveRequestFunc: func(in1 *dynamodb.DescribeTimeToLiveInput) (*request.Request, *dynamodb.DescribeTimeToLiveOutput) {
// 	               panic("mock out the DescribeTimeToLiveRequest method")
//             },
//             DescribeTimeToLiveWithContextFunc: func(in1 context.Context, in2 *dynamodb.DescribeTimeToLiveInput, in3 ...request.Option) (*dynamodb.DescribeTimeToLiveOutput, error) {
// 	               panic("mock out the DescribeTimeToLiveWithContext method")
//             },
//             DisableKinesisStreamingDestinationFunc: func(in1 *dynamodb.DisableKinesisStreamingDestinationInput) (*dynamodb.DisableKinesisStreamingDestinationOutput, error) {
// 	               panic("mock out the DisableKinesisStreamingDestination method")
//             },
//             DisableKinesisStreamingDestinationRequestFunc: func(in1 *dynamodb.DisableKinesisStreamingDestinationInput) (*request.Request, *dynamodb.DisableKinesisStreamingDestinationOutput) {
// 	               panic("mock out the DisableKinesisStreamingDestinationRequest method")
//             },
//             DisableKinesisStreamingDestinationWithContextFunc: func(in1 context.Context, in2 *dynamodb.DisableKinesisStreamingDestinationInput, in3 ...request.Option) (*dynamodb.DisableKinesisStreamingDestinationOutput, error) {
// 	               panic("mock out the DisableKinesisStreamingDestinationWithContext method")
//             },
//             EnableKinesisStreamingDestinationFunc: func(in1 *dynamodb.EnableKinesisStreamingDestinationInput) (*dynamodb.EnableKinesisStreamingDestinationOutput, error) {
// 	               panic("mock out the EnableKinesisStreamingDestination method")
//             },
//             EnableKinesisStreamingDestinationRequestFunc: func(in1 *dynamodb.EnableKinesisStreamingDestinationInput) (*request.Request, *dynamodb.EnableKinesisStreamingDestinationOutput) {
// 	               panic("mock out the EnableKinesisStreamingDestinationRequest method")
//             },
//             EnableKinesisStreamingDestinationWithContextFunc: func(in1 context.Context, in2 *dynamodb.EnableKinesisStreamingDestinationInput, in3 ...request.Option) (*dynamodb.EnableKinesisStreamingDestinationOutput, error) {
// 	               panic("mock out the EnableKinesisStreamingDestinationWithContext method")
//             },
//             ExecuteStatementFunc: func(in1 *dynamodb.ExecuteStatementInput) (*dynamodb.ExecuteStatementOutput, error) {
// 	               panic("mock out the ExecuteStatement method")
//             },
//             ExecuteStatementRequestFunc: func(in1 *dynamodb.ExecuteStatementInput) (*request.Request, *dynamodb.ExecuteStatementOutput) {
// 	               panic("mock out the ExecuteStatementRequest method")
//             },
//             ExecuteStatementWithContextFunc: func(in1 context.Context, in2 *dynamodb.ExecuteStatementInput, in3 ...request.Option) (*dynamodb.ExecuteStatementOutput, error) {
// 	               panic("mock out the ExecuteStatementWithContext method")
//             },
//             ExecuteTransactionFunc: func(in1 *dynamodb.ExecuteTransactionInput) (*dynamodb.ExecuteTransactionOutput, error) {
// 	               panic("mock out the ExecuteTransaction method")
//             },
//             ExecuteTransactionRequestFunc: func(in1 *dynamodb.ExecuteTransactionInput) (*request.Request, *dynamodb.ExecuteTransactionOutput) {
// 	               panic("mock out the ExecuteTransactionRequest method")
//             },
//             ExecuteTransactionWithContextFunc: func(in1 context.Context, in2 *dynamodb.ExecuteTransactionInput, in3 ...request.Option) (*dynamodb.ExecuteTransactionOutput, error) {
// 	               panic("mock out the ExecuteTransactionWithContext method")
//             },
//             ExportTableToPointInTimeFunc: func(in1 *dynamodb.ExportTableToPointInTimeInput) (*dynamodb.ExportTableToPointInTimeOutput, error) {
// 	               panic("mock out the ExportTableToPointInTime method")
//             },
//             ExportTableToPointInTimeRequestFunc: func(in1 *dynamodb.ExportTableToPointInTimeInput) (*request.Request, *dynamodb.ExportTableToPointInTimeOutput) {
// 	               panic("mock out the ExportTableToPointInTimeRequest method")
//             },
//             ExportTableToPointInTimeWithContextFunc: func(in1 context.Context, in2 *dynamodb.ExportTableToPointInTimeInput, in3 ...request.Option) (*dynamodb.ExportTableToPointInTimeOutput, error) {
// 	               panic("mock out the ExportTableToPointInTimeWithContext method")
//             },
//             GetItemFunc: func(in1 *dynamodb.GetItemInput) (*dynamodb.GetItemOutput, error) {
// 	               panic("mock out the GetItem method")
//             },
//             GetItemRequestFunc: func(in1 *dynamodb.GetItemInput) (*request.Request, *dynamodb.GetItemOutput) {
// 	               panic("mock out the GetItemRequest method")
//             },
//             GetItemWithContextFunc: func(in1 context.Context, in2 *dynamodb.GetItemInput, in3 ...request.Option) (*dynamodb.GetItemOutput, error) {
// 	               panic("mock out the GetItemWithContext method")
//             },
//             ListBackupsFunc: func(in1 *dynamodb.ListBackupsInput) (*dynamodb.ListBackupsOutput, error) {
// 	               panic("mock out the ListBackups method")
//             },
//             ListBackupsRequestFunc: func(in1 *dynamodb.ListBackupsInput) (*request.Request, *dynamodb.ListBackupsOutput) {
// 	               panic("mock out the ListBackupsRequest method")
//             },
//             ListBackupsWithContextFunc: func(in1 context.Context, in2 *dynamodb.ListBackupsInput, in3 ...request.Option) (*dynamodb.ListBackupsOutput, error) {
// 	               panic("mock out the ListBackupsWithContext method")
//             },
//             ListContributorInsightsFunc: func(in1 *dynamodb.ListContributorInsightsInput) (*dynamodb.ListContributorInsightsOutput, error) {
// 	               panic("mock out the ListContributorInsights method")
//             },
//             ListContributorInsightsPagesFunc: func(in1 *dynamodb.ListContributorInsightsInput, in2 func(*dynamodb.ListContributorInsightsOutput, bool) bool) error {
// 	               panic("mock out the ListContributorInsightsPages method")
//             },
//             ListContributorInsightsPagesWithContextFunc: func(in1 context.Context, in2 *dynamodb.ListContributorInsightsInput, in3 func(*dynamodb.ListContributorInsightsOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the ListContributorInsightsPagesWithContext method")
//             },
//             ListContributorInsightsRequestFunc: func(in1 *dynamodb.ListContributorInsightsInput) (*request.Request, *dynamodb.ListContributorInsightsOutput) {
// 	               panic("mock out the ListContributorInsightsRequest method")
//             },
//             ListContributorInsightsWithContextFunc: func(in1 context.Context, in2 *dynamodb.ListContributorInsightsInput, in3 ...request.Option) (*dynamodb.ListContributorInsightsOutput, error) {
// 	               panic("mock out the ListContributorInsightsWithContext method")
//             },
//             ListExportsFunc: func(in1 *dynamodb.ListExportsInput) (*dynamodb.ListExportsOutput, error) {
// 	               panic("mock out the ListExports method")
//             },
//             ListExportsPagesFunc: func(in1 *dynamodb.ListExportsInput, in2 func(*dynamodb.ListExportsOutput, bool) bool) error {
// 	               panic("mock out the ListExportsPages method")
//             },
//             ListExportsPagesWithContextFunc: func(in1 context.Context, in2 *dynamodb.ListExportsInput, in3 func(*dynamodb.ListExportsOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the ListExportsPagesWithContext method")
//             },
//             ListExportsRequestFunc: func(in1 *dynamodb.ListExportsInput) (*request.Request, *dynamodb.ListExportsOutput) {
// 	               panic("mock out the ListExportsRequest method")
//             },
//             ListExportsWithContextFunc: func(in1 context.Context, in2 *dynamodb.ListExportsInput, in3 ...request.Option) (*dynamodb.ListExportsOutput, error) {
// 	               panic("mock out the ListExportsWithContext method")
//             },
//             ListGlobalTablesFunc: func(in1 *dynamodb.ListGlobalTablesInput) (*dynamodb.ListGlobalTablesOutput, error) {
// 	               panic("mock out the ListGlobalTables method")
//             },
//             ListGlobalTablesRequestFunc: func(in1 *dynamodb.ListGlobalTablesInput) (*request.Request, *dynamodb.ListGlobalTablesOutput) {
// 	               panic("mock out the ListGlobalTablesRequest method")
//             },
//             ListGlobalTablesWithContextFunc: func(in1 context.Context, in2 *dynamodb.ListGlobalTablesInput, in3 ...request.Option) (*dynamodb.ListGlobalTablesOutput, error) {
// 	               panic("mock out the ListGlobalTablesWithContext method")
//             },
//             ListTablesFunc: func(in1 *dynamodb.ListTablesInput) (*dynamodb.ListTablesOutput, error) {
// 	               panic("mock out the ListTables method")
//             },
//             ListTablesPagesFunc: func(in1 *dynamodb.ListTablesInput, in2 func(*dynamodb.ListTablesOutput, bool) bool) error {
// 	               panic("mock out the ListTablesPages method")
//             },
//             ListTablesPagesWithContextFunc: func(in1 context.Context, in2 *dynamodb.ListTablesInput, in3 func(*dynamodb.ListTablesOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the ListTablesPagesWithContext method")
//             },
//             ListTablesRequestFunc: func(in1 *dynamodb.ListTablesInput) (*request.Request, *dynamodb.ListTablesOutput) {
// 	               panic("mock out the ListTablesRequest method")
//             },
//             ListTablesWithContextFunc: func(in1 context.Context, in2 *dynamodb.ListTablesInput, in3 ...request.Option) (*dynamodb.ListTablesOutput, error) {
// 	               panic("mock out the ListTablesWithContext method")
//             },
//             ListTagsOfResourceFunc: func(in1 *dynamodb.ListTagsOfResourceInput) (*dynamodb.ListTagsOfResourceOutput, error) {
// 	               panic("mock out the ListTagsOfResource method")
//             },
//             ListTagsOfResourceRequestFunc: func(in1 *dynamodb.ListTagsOfResourceInput) (*request.Request, *dynamodb.ListTagsOfResourceOutput) {
// 	               panic("mock out the ListTagsOfResourceRequest method")
//             },
//             ListTagsOfResourceWithContextFunc: func(in1 context.Context, in2 *dynamodb.ListTagsOfResourceInput, in3 ...request.Option) (*dynamodb.ListTagsOfResourceOutput, error) {
// 	               panic("mock out the ListTagsOfResourceWithContext method")
//             },
//             PutItemFunc: func(in1 *dynamodb.PutItemInput) (*dynamodb.PutItemOutput, error) {
// 	               panic("mock out the PutItem method")
//             },
//             PutItemRequestFunc: func(in1 *dynamodb.PutItemInput) (*request.Request, *dynamodb.PutItemOutput) {
// 	               panic("mock out the PutItemRequest method")
//             },
//             PutItemWithContextFunc: func(in1 context.Context, in2 *dynamodb.PutItemInput, in3 ...request.Option) (*dynamodb.PutItemOutput, error) {
// 	               panic("mock out the PutItemWithContext method")
//             },
//             QueryFunc: func(in1 *dynamodb.QueryInput) (*dynamodb.QueryOutput, error) {
// 	               panic("mock out the Query method")
//             },
//             QueryPagesFunc: func(in1 *dynamodb.QueryInput, in2 func(*dynamodb.QueryOutput, bool) bool) error {
// 	               panic("mock out the QueryPages method")
//             },
//             QueryPagesWithContextFunc: func(in1 context.Context, in2 *dynamodb.QueryInput, in3 func(*dynamodb.QueryOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the QueryPagesWithContext method")
//             },
//             QueryRequestFunc: func(in1 *dynamodb.QueryInput) (*request.Request, *dynamodb.QueryOutput) {
// 	               panic("mock out the QueryRequest method")
//             },
//             QueryWithContextFunc: func(in1 context.Context, in2 *dynamodb.QueryInput, in3 ...request.Option) (*dynamodb.QueryOutput, error) {
// 	               panic("mock out the QueryWithContext method")
//             },
//             RestoreTableFromBackupFunc: func(in1 *dynamodb.RestoreTableFromBackupInput) (*dynamodb.RestoreTableFromBackupOutput, error) {
// 	               panic("mock out the RestoreTableFromBackup method")
//             },
//             RestoreTableFromBackupRequestFunc: func(in1 *dynamodb.RestoreTableFromBackupInput) (*request.Request, *dynamodb.RestoreTableFromBackupOutput) {
// 	               panic("mock out the RestoreTableFromBackupRequest method")
//             },
//             RestoreTableFromBackupWithContextFunc: func(in1 context.Context, in2 *dynamodb.RestoreTableFromBackupInput, in3 ...request.Option) (*dynamodb.RestoreTableFromBackupOutput, error) {
// 	               panic("mock out the RestoreTableFromBackupWithContext method")
//             },
//             RestoreTableToPointInTimeFunc: func(in1 *dynamodb.RestoreTableToPointInTimeInput) (*dynamodb.RestoreTableToPointInTimeOutput, error) {
// 	               panic("mock out the RestoreTableToPointInTime method")
//             },
//             RestoreTableToPointInTimeRequestFunc: func(in1 *dynamodb.RestoreTableToPointInTimeInput) (*request.Request, *dynamodb.RestoreTableToPointInTimeOutput) {
// 	               panic("mock out the RestoreTableToPointInTimeRequest method")
//             },
//             RestoreTableToPointInTimeWithContextFunc: func(in1 context.Context, in2 *dynamodb.RestoreTableToPointInTimeInput, in3 ...request.Option) (*dynamodb.RestoreTableToPointInTimeOutput, error) {
// 	               panic("mock out the RestoreTableToPointInTimeWithContext method")
//             },
//             ScanFunc: func(in1 *dynamodb.ScanInput) (*dynamodb.ScanOutput, error) {
// 	               panic("mock out the Scan method")
//             },
//             ScanPagesFunc: func(in1 *dynamodb.ScanInput, in2 func(*dynamodb.ScanOutput, bool) bool) error {
// 	               panic("mock out the ScanPages method")
//             },
//             ScanPagesWithContextFunc: func(in1 context.Context, in2 *dynamodb.ScanInput, in3 func(*dynamodb.ScanOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the ScanPagesWithContext method")
//             },
//             ScanRequestFunc: func(in1 *dynamodb.ScanInput) (*request.Request, *dynamodb.ScanOutput) {
// 	               panic("mock out the ScanRequest method")
//             },
//             ScanWithContextFunc: func(in1 context.Context, in2 *dynamodb.ScanInput, in3 ...request.Option) (*dynamodb.ScanOutput, error) {
// 	               panic("mock out the ScanWithContext method")
//             },
//             TagResourceFunc: func(in1 *dynamodb.TagResourceInput) (*dynamodb.TagResourceOutput, error) {
// 	               panic("mock out the TagResource method")
//             },
//             TagResourceRequestFunc: func(in1 *dynamodb.TagResourceInput) (*request.Request, *dynamodb.TagResourceOutput) {
// 	               panic("mock out the TagResourceRequest method")
//             },
//             TagResourceWithContextFunc: func(in1 context.Context, in2 *dynamodb.TagResourceInput, in3 ...request.Option) (*dynamodb.TagResourceOutput, error) {
// 	               panic("mock out the TagResourceWithContext method")
//             },
//             TransactGetItemsFunc: func(in1 *dynamodb.TransactGetItemsInput) (*dynamodb.TransactGetItemsOutput, error) {
// 	               panic("mock out the TransactGetItems method")
//             },
//             TransactGetItemsRequestFunc: func(in1 *dynamodb.TransactGetItemsInput) (*request.Request, *dynamodb.TransactGetItemsOutput) {
// 	               panic("mock out the TransactGetItemsRequest method")
//             },
//             TransactGetItemsWithContextFunc: func(in1 context.Context, in2 *dynamodb.TransactGetItemsInput, in3 ...request.Option) (*dynamodb.TransactGetItemsOutput, error) {
// 	               panic("mock out the TransactGetItemsWithContext method")
//             },
//             TransactWriteItemsFunc: func(in1 *dynamodb.TransactWriteItemsInput) (*dynamodb.TransactWriteItemsOutput, error) {
// 	               panic("mock out the TransactWriteItems method")
//             },
//             TransactWriteItemsRequestFunc: func(in1 *dynamodb.TransactWriteItemsInput) (*request.Request, *dynamodb.TransactWriteItemsOutput) {
// 	               panic("mock out the TransactWriteItemsRequest method")
//             },
//             TransactWriteItemsWithContextFunc: func(in1 context.Context, in2 *dynamodb.TransactWriteItemsInput, in3 ...request.Option) (*dynamodb.TransactWriteItemsOutput, error) {
// 	               panic("mock out the TransactWriteItemsWithContext method")
//             },
//             UntagResourceFunc: func(in1 *dynamodb.UntagResourceInput) (*dynamodb.UntagResourceOutput, error) {
// 	               panic("mock out the UntagResource method")
//             },
//             UntagResourceRequestFunc: func(in1 *dynamodb.UntagResourceInput) (*request.Request, *dynamodb.UntagResourceOutput) {
// 	               panic("mock out the UntagResourceRequest method")
//             },
//             UntagResourceWithContextFunc: func(in1 context.Context, in2 *dynamodb.UntagResourceInput, in3 ...request.Option) (*dynamodb.UntagResourceOutput, error) {
// 	               panic("mock out the UntagResourceWithContext method")
//             },
//             UpdateContinuousBackupsFunc: func(in1 *dynamodb.UpdateContinuousBackupsInput) (*dynamodb.UpdateContinuousBackupsOutput, error) {
// 	               panic("mock out the UpdateContinuousBackups method")
//             },
//             UpdateContinuousBackupsRequestFunc: func(in1 *dynamodb.UpdateContinuousBackupsInput) (*request.Request, *dynamodb.UpdateContinuousBackupsOutput) {
// 	               panic("mock out the UpdateContinuousBackupsRequest method")
//             },
//             UpdateContinuousBackupsWithContextFunc: func(in1 context.Context, in2 *dynamodb.UpdateContinuousBackupsInput, in3 ...request.Option) (*dynamodb.UpdateContinuousBackupsOutput, error) {
// 	               panic("mock out the UpdateContinuousBackupsWithContext method")
//             },
//             UpdateContributorInsightsFunc: func(in1 *dynamodb.UpdateContributorInsightsInput) (*dynamodb.UpdateContributorInsightsOutput, error) {
// 	               panic("mock out the UpdateContributorInsights method")
//             },
//             UpdateContributorInsightsRequestFunc: func(in1 *dynamodb.UpdateContributorInsightsInput) (*request.Request, *dynamodb.UpdateContributorInsightsOutput) {
// 	               panic("mock out the UpdateContributorInsightsRequest method")
//             },
//             UpdateContributorInsightsWithContextFunc: func(in1 context.Context, in2 *dynamodb.UpdateContributorInsightsInput, in3 ...request.Option) (*dynamodb.UpdateContributorInsightsOutput, error) {
// 	               panic("mock out the UpdateContributorInsightsWithContext method")
//             },
//             UpdateGlobalTableFunc: func(in1 *dynamodb.UpdateGlobalTableInput) (*dynamodb.UpdateGlobalTableOutput, error) {
// 	               panic("mock out the UpdateGlobalTable method")
//             },
//             UpdateGlobalTableRequestFunc: func(in1 *dynamodb.UpdateGlobalTableInput) (*request.Request, *dynamodb.UpdateGlobalTableOutput) {
// 	               panic("mock out the UpdateGlobalTableRequest method")
//             },
//             UpdateGlobalTableSettingsFunc: func(in1 *dynamodb.UpdateGlobalTableSettingsInput) (*dynamodb.UpdateGlobalTableSettingsOutput, error) {
// 	               panic("mock out the UpdateGlobalTableSettings method")
//             },
//             UpdateGlobalTableSettingsRequestFunc: func(in1 *dynamodb.UpdateGlobalTableSettingsInput) (*request.Request, *dynamodb.UpdateGlobalTableSettingsOutput) {
// 	               panic("mock out the UpdateGlobalTableSettingsRequest method")
//             },
//             UpdateGlobalTableSettingsWithContextFunc: func(in1 context.Context, in2 *dynamodb.UpdateGlobalTableSettingsInput, in3 ...request.Option) (*dynamodb.UpdateGlobalTableSettingsOutput, error) {
// 	               panic("mock out the UpdateGlobalTableSettingsWithContext method")
//             },
//             UpdateGlobalTableWithContextFunc: func(in1 context.Context, in2 *dynamodb.UpdateGlobalTableInput, in3 ...request.Option) (*dynamodb.UpdateGlobalTableOutput, error) {
// 	               panic("mock out the UpdateGlobalTableWithContext method")
//             },
//             UpdateItemFunc: func(in1 *dynamodb.UpdateItemInput) (*dynamodb.UpdateItemOutput, error) {
// 	               panic("mock out the UpdateItem method")
//             },
//             UpdateItemRequestFunc: func(in1 *dynamodb.UpdateItemInput) (*request.Request, *dynamodb.UpdateItemOutput) {
// 	               panic("mock out the UpdateItemRequest method")
//             },
//             UpdateItemWithContextFunc: func(in1 context.Context, in2 *dynamodb.UpdateItemInput, in3 ...request.Option) (*dynamodb.UpdateItemOutput, error) {
// 	               panic("mock out the UpdateItemWithContext method")
//             },
//             UpdateTableFunc: func(in1 *dynamodb.UpdateTableInput) (*dynamodb.UpdateTableOutput, error) {
// 	               panic("mock out the UpdateTable method")
//             },
//             UpdateTableReplicaAutoScalingFunc: func(in1 *dynamodb.UpdateTableReplicaAutoScalingInput) (*dynamodb.UpdateTableReplicaAutoScalingOutput, error) {
// 	               panic("mock out the UpdateTableReplicaAutoScaling method")
//             },
//             UpdateTableReplicaAutoScalingRequestFunc: func(in1 *dynamodb.UpdateTableReplicaAutoScalingInput) (*request.Request, *dynamodb.UpdateTableReplicaAutoScalingOutput) {
// 	               panic("mock out the UpdateTableReplicaAutoScalingRequest method")
//             },
//             UpdateTableReplicaAutoScalingWithContextFunc: func(in1 context.Context, in2 *dynamodb.UpdateTableReplicaAutoScalingInput, in3 ...request.Option) (*dynamodb.UpdateTableReplicaAutoScalingOutput, error) {
// 	               panic("mock out the UpdateTableReplicaAutoScalingWithContext method")
//             },
//             UpdateTableRequestFunc: func(in1 *dynamodb.UpdateTableInput) (*request.Request, *dynamodb.UpdateTableOutput) {
// 	               panic("mock out the UpdateTableRequest method")
//             },
//             UpdateTableWithContextFunc: func(in1 context.Context, in2 *dynamodb.UpdateTableInput, in3 ...request.Option) (*dynamodb.UpdateTableOutput, error) {
// 	               panic("mock out the UpdateTableWithContext method")
//             },
//             UpdateTimeToLiveFunc: func(in1 *dynamodb.UpdateTimeToLiveInput) (*dynamodb.UpdateTimeToLiveOutput, error) {
// 	               panic("mock out the UpdateTimeToLive method")
//             },
//             UpdateTimeToLiveRequestFunc: func(in1 *dynamodb.UpdateTimeToLiveInput) (*request.Request, *dynamodb.UpdateTimeToLiveOutput) {
// 	               panic("mock out the UpdateTimeToLiveRequest method")
//             },
//             UpdateTimeToLiveWithContextFunc: func(in1 context.Context, in2 *dynamodb.UpdateTimeToLiveInput, in3 ...request.Option) (*dynamodb.UpdateTimeToLiveOutput, error) {
// 	               panic("mock out the UpdateTimeToLiveWithContext method")
//             },
//             WaitUntilTableExistsFunc: func(in1 *dynamodb.DescribeTableInput) error {
// 	               panic("mock out the WaitUntilTableExists method")
//             },
//             WaitUntilTableExistsWithContextFunc: func(in1 context.Context, in2 *dynamodb.DescribeTableInput, in3 ...request.WaiterOption) error {
// 	               panic("mock out the WaitUntilTableExistsWithContext method")
//             },
//             WaitUntilTableNotExistsFunc: func(in1 *dynamodb.DescribeTableInput) error {
// 	               panic("mock out the WaitUntilTableNotExists method")
//             },
//             WaitUntilTableNotExistsWithContextFunc: func(in1 context.Context, in2 *dynamodb.DescribeTableInput, in3 ...request.WaiterOption) error {
// 	               panic("mock out the WaitUntilTableNotExistsWithContext method")
//             },
//         }
//
//         // use mockedDynamoDBAPI in code that requires dynamodbiface.DynamoDBAPI
//         // and then make assertions.
//
//     }
type DynamoDBAPIMock struct {
	// BatchExecuteStatementFunc mocks the BatchExecuteStatement method.
	BatchExecuteStatementFunc func(in1 *dynamodb.BatchExecuteStatementInput) (*dynamodb.BatchExecuteStatementOutput, error)

	// BatchExecuteStatementRequestFunc mocks the BatchExecuteStatementRequest method.
	BatchExecuteStatementRequestFunc func(in1 *dynamodb.BatchExecuteStatementInput) (*request.Request, *dynamodb.BatchExecuteStatementOutput)

	// BatchExecuteStatementWithContextFunc mocks the BatchExecuteStatementWithContext method.
	BatchExecuteStatementWithContextFunc func(in1 context.Context, in2 *dynamodb.BatchExecuteStatementInput, in3 ...request.Option) (*dynamodb.BatchExecuteStatementOutput, error)

	// BatchGetItemFunc mocks the BatchGetItem method.
	BatchGetItemFunc func(in1 *dynamodb.BatchGetItemInput) (*dynamodb.BatchGetItemOutput, error)

	// BatchGetItemPagesFunc mocks the BatchGetItemPages method.
	BatchGetItemPagesFunc func(in1 *dynamodb.BatchGetItemInput, in2 func(*dynamodb.BatchGetItemOutput, bool) bool) error

	// BatchGetItemPagesWithContextFunc mocks the BatchGetItemPagesWithContext method.
	BatchGetItemPagesWithContextFunc func(in1 context.Context, in2 *dynamodb.BatchGetItemInput, in3 func(*dynamodb.BatchGetItemOutput, bool) bool, in4 ...request.Option) error

	// BatchGetItemRequestFunc mocks the BatchGetItemRequest method.
	BatchGetItemRequestFunc func(in1 *dynamodb.BatchGetItemInput) (*request.Request, *dynamodb.BatchGetItemOutput)

	// BatchGetItemWithContextFunc mocks the BatchGetItemWithContext method.
	BatchGetItemWithContextFunc func(in1 context.Context, in2 *dynamodb.BatchGetItemInput, in3 ...request.Option) (*dynamodb.BatchGetItemOutput, error)

	// BatchWriteItemFunc mocks the BatchWriteItem method.
	BatchWriteItemFunc func(in1 *dynamodb.BatchWriteItemInput) (*dynamodb.BatchWriteItemOutput, error)

	// BatchWriteItemRequestFunc mocks the BatchWriteItemRequest method.
	BatchWriteItemRequestFunc func(in1 *dynamodb.BatchWriteItemInput) (*request.Request, *dynamodb.BatchWriteItemOutput)

	// BatchWriteItemWithContextFunc mocks the BatchWriteItemWithContext method.
	BatchWriteItemWithContextFunc func(in1 context.Context, in2 *dynamodb.BatchWriteItemInput, in3 ...request.Option) (*dynamodb.BatchWriteItemOutput, error)

	// CreateBackupFunc mocks the CreateBackup method.
	CreateBackupFunc func(in1 *dynamodb.CreateBackupInput) (*dynamodb.CreateBackupOutput, error)

	// CreateBackupRequestFunc mocks the CreateBackupRequest method.
	CreateBackupRequestFunc func(in1 *dynamodb.CreateBackupInput) (*request.Request, *dynamodb.CreateBackupOutput)

	// CreateBackupWithContextFunc mocks the CreateBackupWithContext method.
	CreateBackupWithContextFunc func(in1 context.Context, in2 *dynamodb.CreateBackupInput, in3 ...request.Option) (*dynamodb.CreateBackupOutput, error)

	// CreateGlobalTableFunc mocks the CreateGlobalTable method.
	CreateGlobalTableFunc func(in1 *dynamodb.CreateGlobalTableInput) (*dynamodb.CreateGlobalTableOutput, error)

	// CreateGlobalTableRequestFunc mocks the CreateGlobalTableRequest method.
	CreateGlobalTableRequestFunc func(in1 *dynamodb.CreateGlobalTableInput) (*request.Request, *dynamodb.CreateGlobalTableOutput)

	// CreateGlobalTableWithContextFunc mocks the CreateGlobalTableWithContext method.
	CreateGlobalTableWithContextFunc func(in1 context.Context, in2 *dynamodb.CreateGlobalTableInput, in3 ...request.Option) (*dynamodb.CreateGlobalTableOutput, error)

	// CreateTableFunc mocks the CreateTable method.
	CreateTableFunc func(in1 *dynamodb.CreateTableInput) (*dynamodb.CreateTableOutput, error)

	// CreateTableRequestFunc mocks the CreateTableRequest method.
	CreateTableRequestFunc func(in1 *dynamodb.CreateTableInput) (*request.Request, *dynamodb.CreateTableOutput)

	// CreateTableWithContextFunc mocks the CreateTableWithContext method.
	CreateTableWithContextFunc func(in1 context.Context, in2 *dynamodb.CreateTableInput, in3 ...request.Option) (*dynamodb.CreateTableOutput, error)

	// DeleteBackupFunc mocks the DeleteBackup method.
	DeleteBackupFunc func(in1 *dynamodb.DeleteBackupInput) (*dynamodb.DeleteBackupOutput, error)

	// DeleteBackupRequestFunc mocks the DeleteBackupRequest method.
	DeleteBackupRequestFunc func(in1 *dynamodb.DeleteBackupInput) (*request.Request, *dynamodb.DeleteBackupOutput)

	// DeleteBackupWithContextFunc mocks the DeleteBackupWithContext method.
	DeleteBackupWithContextFunc func(in1 context.Context, in2 *dynamodb.DeleteBackupInput, in3 ...request.Option) (*dynamodb.DeleteBackupOutput, error)

	// DeleteItemFunc mocks the DeleteItem method.
	DeleteItemFunc func(in1 *dynamodb.DeleteItemInput) (*dynamodb.DeleteItemOutput, error)

	// DeleteItemRequestFunc mocks the DeleteItemRequest method.
	DeleteItemRequestFunc func(in1 *dynamodb.DeleteItemInput) (*request.Request, *dynamodb.DeleteItemOutput)

	// DeleteItemWithContextFunc mocks the DeleteItemWithContext method.
	DeleteItemWithContextFunc func(in1 context.Context, in2 *dynamodb.DeleteItemInput, in3 ...request.Option) (*dynamodb.DeleteItemOutput, error)

	// DeleteTableFunc mocks the DeleteTable method.
	DeleteTableFunc func(in1 *dynamodb.DeleteTableInput) (*dynamodb.DeleteTableOutput, error)

	// DeleteTableRequestFunc mocks the DeleteTableRequest method.
	DeleteTableRequestFunc func(in1 *dynamodb.DeleteTableInput) (*request.Request, *dynamodb.DeleteTableOutput)

	// DeleteTableWithContextFunc mocks the DeleteTableWithContext method.
	DeleteTableWithContextFunc func(in1 context.Context, in2 *dynamodb.DeleteTableInput, in3 ...request.Option) (*dynamodb.DeleteTableOutput, error)

	// DescribeBackupFunc mocks the DescribeBackup method.
	DescribeBackupFunc func(in1 *dynamodb.DescribeBackupInput) (*dynamodb.DescribeBackupOutput, error)

	// DescribeBackupRequestFunc mocks the DescribeBackupRequest method.
	DescribeBackupRequestFunc func(in1 *dynamodb.DescribeBackupInput) (*request.Request, *dynamodb.DescribeBackupOutput)

	// DescribeBackupWithContextFunc mocks the DescribeBackupWithContext method.
	DescribeBackupWithContextFunc func(in1 context.Context, in2 *dynamodb.DescribeBackupInput, in3 ...request.Option) (*dynamodb.DescribeBackupOutput, error)

	// DescribeContinuousBackupsFunc mocks the DescribeContinuousBackups method.
	DescribeContinuousBackupsFunc func(in1 *dynamodb.DescribeContinuousBackupsInput) (*dynamodb.DescribeContinuousBackupsOutput, error)

	// DescribeContinuousBackupsRequestFunc mocks the DescribeContinuousBackupsRequest method.
	DescribeContinuousBackupsRequestFunc func(in1 *dynamodb.DescribeContinuousBackupsInput) (*request.Request, *dynamodb.DescribeContinuousBackupsOutput)

	// DescribeContinuousBackupsWithContextFunc mocks the DescribeContinuousBackupsWithContext method.
	DescribeContinuousBackupsWithContextFunc func(in1 context.Context, in2 *dynamodb.DescribeContinuousBackupsInput, in3 ...request.Option) (*dynamodb.DescribeContinuousBackupsOutput, error)

	// DescribeContributorInsightsFunc mocks the DescribeContributorInsights method.
	DescribeContributorInsightsFunc func(in1 *dynamodb.DescribeContributorInsightsInput) (*dynamodb.DescribeContributorInsightsOutput, error)

	// DescribeContributorInsightsRequestFunc mocks the DescribeContributorInsightsRequest method.
	DescribeContributorInsightsRequestFunc func(in1 *dynamodb.DescribeContributorInsightsInput) (*request.Request, *dynamodb.DescribeContributorInsightsOutput)

	// DescribeContributorInsightsWithContextFunc mocks the DescribeContributorInsightsWithContext method.
	DescribeContributorInsightsWithContextFunc func(in1 context.Context, in2 *dynamodb.DescribeContributorInsightsInput, in3 ...request.Option) (*dynamodb.DescribeContributorInsightsOutput, error)

	// DescribeEndpointsFunc mocks the DescribeEndpoints method.
	DescribeEndpointsFunc func(in1 *dynamodb.DescribeEndpointsInput) (*dynamodb.DescribeEndpointsOutput, error)

	// DescribeEndpointsRequestFunc mocks the DescribeEndpointsRequest method.
	DescribeEndpointsRequestFunc func(in1 *dynamodb.DescribeEndpointsInput) (*request.Request, *dynamodb.DescribeEndpointsOutput)

	// DescribeEndpointsWithContextFunc mocks the DescribeEndpointsWithContext method.
	DescribeEndpointsWithContextFunc func(in1 context.Context, in2 *dynamodb.DescribeEndpointsInput, in3 ...request.Option) (*dynamodb.DescribeEndpointsOutput, error)

	// DescribeExportFunc mocks the DescribeExport method.
	DescribeExportFunc func(in1 *dynamodb.DescribeExportInput) (*dynamodb.DescribeExportOutput, error)

	// DescribeExportRequestFunc mocks the DescribeExportRequest method.
	DescribeExportRequestFunc func(in1 *dynamodb.DescribeExportInput) (*request.Request, *dynamodb.DescribeExportOutput)

	// DescribeExportWithContextFunc mocks the DescribeExportWithContext method.
	DescribeExportWithContextFunc func(in1 context.Context, in2 *dynamodb.DescribeExportInput, in3 ...request.Option) (*dynamodb.DescribeExportOutput, error)

	// DescribeGlobalTableFunc mocks the DescribeGlobalTable method.
	DescribeGlobalTableFunc func(in1 *dynamodb.DescribeGlobalTableInput) (*dynamodb.DescribeGlobalTableOutput, error)

	// DescribeGlobalTableRequestFunc mocks the DescribeGlobalTableRequest method.
	DescribeGlobalTableRequestFunc func(in1 *dynamodb.DescribeGlobalTableInput) (*request.Request, *dynamodb.DescribeGlobalTableOutput)

	// DescribeGlobalTableSettingsFunc mocks the DescribeGlobalTableSettings method.
	DescribeGlobalTableSettingsFunc func(in1 *dynamodb.DescribeGlobalTableSettingsInput) (*dynamodb.DescribeGlobalTableSettingsOutput, error)

	// DescribeGlobalTableSettingsRequestFunc mocks the DescribeGlobalTableSettingsRequest method.
	DescribeGlobalTableSettingsRequestFunc func(in1 *dynamodb.DescribeGlobalTableSettingsInput) (*request.Request, *dynamodb.DescribeGlobalTableSettingsOutput)

	// DescribeGlobalTableSettingsWithContextFunc mocks the DescribeGlobalTableSettingsWithContext method.
	DescribeGlobalTableSettingsWithContextFunc func(in1 context.Context, in2 *dynamodb.DescribeGlobalTableSettingsInput, in3 ...request.Option) (*dynamodb.DescribeGlobalTableSettingsOutput, error)

	// DescribeGlobalTableWithContextFunc mocks the DescribeGlobalTableWithContext method.
	DescribeGlobalTableWithContextFunc func(in1 context.Context, in2 *dynamodb.DescribeGlobalTableInput, in3 ...request.Option) (*dynamodb.DescribeGlobalTableOutput, error)

	// DescribeKinesisStreamingDestinationFunc mocks the DescribeKinesisStreamingDestination method.
	DescribeKinesisStreamingDestinationFunc func(in1 *dynamodb.DescribeKinesisStreamingDestinationInput) (*dynamodb.DescribeKinesisStreamingDestinationOutput, error)

	// DescribeKinesisStreamingDestinationRequestFunc mocks the DescribeKinesisStreamingDestinationRequest method.
	DescribeKinesisStreamingDestinationRequestFunc func(in1 *dynamodb.DescribeKinesisStreamingDestinationInput) (*request.Request, *dynamodb.DescribeKinesisStreamingDestinationOutput)

	// DescribeKinesisStreamingDestinationWithContextFunc mocks the DescribeKinesisStreamingDestinationWithContext method.
	DescribeKinesisStreamingDestinationWithContextFunc func(in1 context.Context, in2 *dynamodb.DescribeKinesisStreamingDestinationInput, in3 ...request.Option) (*dynamodb.DescribeKinesisStreamingDestinationOutput, error)

	// DescribeLimitsFunc mocks the DescribeLimits method.
	DescribeLimitsFunc func(in1 *dynamodb.DescribeLimitsInput) (*dynamodb.DescribeLimitsOutput, error)

	// DescribeLimitsRequestFunc mocks the DescribeLimitsRequest method.
	DescribeLimitsRequestFunc func(in1 *dynamodb.DescribeLimitsInput) (*request.Request, *dynamodb.DescribeLimitsOutput)

	// DescribeLimitsWithContextFunc mocks the DescribeLimitsWithContext method.
	DescribeLimitsWithContextFunc func(in1 context.Context, in2 *dynamodb.DescribeLimitsInput, in3 ...request.Option) (*dynamodb.DescribeLimitsOutput, error)

	// DescribeTableFunc mocks the DescribeTable method.
	DescribeTableFunc func(in1 *dynamodb.DescribeTableInput) (*dynamodb.DescribeTableOutput, error)

	// DescribeTableReplicaAutoScalingFunc mocks the DescribeTableReplicaAutoScaling method.
	DescribeTableReplicaAutoScalingFunc func(in1 *dynamodb.DescribeTableReplicaAutoScalingInput) (*dynamodb.DescribeTableReplicaAutoScalingOutput, error)

	// DescribeTableReplicaAutoScalingRequestFunc mocks the DescribeTableReplicaAutoScalingRequest method.
	DescribeTableReplicaAutoScalingRequestFunc func(in1 *dynamodb.DescribeTableReplicaAutoScalingInput) (*request.Request, *dynamodb.DescribeTableReplicaAutoScalingOutput)

	// DescribeTableReplicaAutoScalingWithContextFunc mocks the DescribeTableReplicaAutoScalingWithContext method.
	DescribeTableReplicaAutoScalingWithContextFunc func(in1 context.Context, in2 *dynamodb.DescribeTableReplicaAutoScalingInput, in3 ...request.Option) (*dynamodb.DescribeTableReplicaAutoScalingOutput, error)

	// DescribeTableRequestFunc mocks the DescribeTableRequest method.
	DescribeTableRequestFunc func(in1 *dynamodb.DescribeTableInput) (*request.Request, *dynamodb.DescribeTableOutput)

	// DescribeTableWithContextFunc mocks the DescribeTableWithContext method.
	DescribeTableWithContextFunc func(in1 context.Context, in2 *dynamodb.DescribeTableInput, in3 ...request.Option) (*dynamodb.DescribeTableOutput, error)

	// DescribeTimeToLiveFunc mocks the DescribeTimeToLive method.
	DescribeTimeToLiveFunc func(in1 *dynamodb.DescribeTimeToLiveInput) (*dynamodb.DescribeTimeToLiveOutput, error)

	// DescribeTimeToLiveRequestFunc mocks the DescribeTimeToLiveRequest method.
	DescribeTimeToLiveRequestFunc func(in1 *dynamodb.DescribeTimeToLiveInput) (*request.Request, *dynamodb.DescribeTimeToLiveOutput)

	// DescribeTimeToLiveWithContextFunc mocks the DescribeTimeToLiveWithContext method.
	DescribeTimeToLiveWithContextFunc func(in1 context.Context, in2 *dynamodb.DescribeTimeToLiveInput, in3 ...request.Option) (*dynamodb.DescribeTimeToLiveOutput, error)

	// DisableKinesisStreamingDestinationFunc mocks the DisableKinesisStreamingDestination method.
	DisableKinesisStreamingDestinationFunc func(in1 *dynamodb.DisableKinesisStreamingDestinationInput) (*dynamodb.DisableKinesisStreamingDestinationOutput, error)

	// DisableKinesisStreamingDestinationRequestFunc mocks the DisableKinesisStreamingDestinationRequest method.
	DisableKinesisStreamingDestinationRequestFunc func(in1 *dynamodb.DisableKinesisStreamingDestinationInput) (*request.Request, *dynamodb.DisableKinesisStreamingDestinationOutput)

	// DisableKinesisStreamingDestinationWithContextFunc mocks the DisableKinesisStreamingDestinationWithContext method.
	DisableKinesisStreamingDestinationWithContextFunc func(in1 context.Context, in2 *dynamodb.DisableKinesisStreamingDestinationInput, in3 ...request.Option) (*dynamodb.DisableKinesisStreamingDestinationOutput, error)

	// EnableKinesisStreamingDestinationFunc mocks the EnableKinesisStreamingDestination method.
	EnableKinesisStreamingDestinationFunc func(in1 *dynamodb.EnableKinesisStreamingDestinationInput) (*dynamodb.EnableKinesisStreamingDestinationOutput, error)

	// EnableKinesisStreamingDestinationRequestFunc mocks the EnableKinesisStreamingDestinationRequest method.
	EnableKinesisStreamingDestinationRequestFunc func(in1 *dynamodb.EnableKinesisStreamingDestinationInput) (*request.Request, *dynamodb.EnableKinesisStreamingDestinationOutput)

	// EnableKinesisStreamingDestinationWithContextFunc mocks the EnableKinesisStreamingDestinationWithContext method.
	EnableKinesisStreamingDestinationWithContextFunc func(in1 context.Context, in2 *dynamodb.EnableKinesisStreamingDestinationInput, in3 ...request.Option) (*dynamodb.EnableKinesisStreamingDestinationOutput, error)

	// ExecuteStatementFunc mocks the ExecuteStatement method.
	ExecuteStatementFunc func(in1 *dynamodb.ExecuteStatementInput) (*dynamodb.ExecuteStatementOutput, error)

	// ExecuteStatementRequestFunc mocks the ExecuteStatementRequest method.
	ExecuteStatementRequestFunc func(in1 *dynamodb.ExecuteStatementInput) (*request.Request, *dynamodb.ExecuteStatementOutput)

	// ExecuteStatementWithContextFunc mocks the ExecuteStatementWithContext method.
	ExecuteStatementWithContextFunc func(in1 context.Context, in2 *dynamodb.ExecuteStatementInput, in3 ...request.Option) (*dynamodb.ExecuteStatementOutput, error)

	// ExecuteTransactionFunc mocks the ExecuteTransaction method.
	ExecuteTransactionFunc func(in1 *dynamodb.ExecuteTransactionInput) (*dynamodb.ExecuteTransactionOutput, error)

	// ExecuteTransactionRequestFunc mocks the ExecuteTransactionRequest method.
	ExecuteTransactionRequestFunc func(in1 *dynamodb.ExecuteTransactionInput) (*request.Request, *dynamodb.ExecuteTransactionOutput)

	// ExecuteTransactionWithContextFunc mocks the ExecuteTransactionWithContext method.
	ExecuteTransactionWithContextFunc func(in1 context.Context, in2 *dynamodb.ExecuteTransactionInput, in3 ...request.Option) (*dynamodb.ExecuteTransactionOutput, error)

	// ExportTableToPointInTimeFunc mocks the ExportTableToPointInTime method.
	ExportTableToPointInTimeFunc func(in1 *dynamodb.ExportTableToPointInTimeInput) (*dynamodb.ExportTableToPointInTimeOutput, error)

	// ExportTableToPointInTimeRequestFunc mocks the ExportTableToPointInTimeRequest method.
	ExportTableToPointInTimeRequestFunc func(in1 *dynamodb.ExportTableToPointInTimeInput) (*request.Request, *dynamodb.ExportTableToPointInTimeOutput)

	// ExportTableToPointInTimeWithContextFunc mocks the ExportTableToPointInTimeWithContext method.
	ExportTableToPointInTimeWithContextFunc func(in1 context.Context, in2 *dynamodb.ExportTableToPointInTimeInput, in3 ...request.Option) (*dynamodb.ExportTableToPointInTimeOutput, error)

	// GetItemFunc mocks the GetItem method.
	GetItemFunc func(in1 *dynamodb.GetItemInput) (*dynamodb.GetItemOutput, error)

	// GetItemRequestFunc mocks the GetItemRequest method.
	GetItemRequestFunc func(in1 *dynamodb.GetItemInput) (*request.Request, *dynamodb.GetItemOutput)

	// GetItemWithContextFunc mocks the GetItemWithContext method.
	GetItemWithContextFunc func(in1 context.Context, in2 *dynamodb.GetItemInput, in3 ...request.Option) (*dynamodb.GetItemOutput, error)

	// ListBackupsFunc mocks the ListBackups method.
	ListBackupsFunc func(in1 *dynamodb.ListBackupsInput) (*dynamodb.ListBackupsOutput, error)

	// ListBackupsRequestFunc mocks the ListBackupsRequest method.
	ListBackupsRequestFunc func(in1 *dynamodb.ListBackupsInput) (*request.Request, *dynamodb.ListBackupsOutput)

	// ListBackupsWithContextFunc mocks the ListBackupsWithContext method.
	ListBackupsWithContextFunc func(in1 context.Context, in2 *dynamodb.ListBackupsInput, in3 ...request.Option) (*dynamodb.ListBackupsOutput, error)

	// ListContributorInsightsFunc mocks the ListContributorInsights method.
	ListContributorInsightsFunc func(in1 *dynamodb.ListContributorInsightsInput) (*dynamodb.ListContributorInsightsOutput, error)

	// ListContributorInsightsPagesFunc mocks the ListContributorInsightsPages method.
	ListContributorInsightsPagesFunc func(in1 *dynamodb.ListContributorInsightsInput, in2 func(*dynamodb.ListContributorInsightsOutput, bool) bool) error

	// ListContributorInsightsPagesWithContextFunc mocks the ListContributorInsightsPagesWithContext method.
	ListContributorInsightsPagesWithContextFunc func(in1 context.Context, in2 *dynamodb.ListContributorInsightsInput, in3 func(*dynamodb.ListContributorInsightsOutput, bool) bool, in4 ...request.Option) error

	// ListContributorInsightsRequestFunc mocks the ListContributorInsightsRequest method.
	ListContributorInsightsRequestFunc func(in1 *dynamodb.ListContributorInsightsInput) (*request.Request, *dynamodb.ListContributorInsightsOutput)

	// ListContributorInsightsWithContextFunc mocks the ListContributorInsightsWithContext method.
	ListContributorInsightsWithContextFunc func(in1 context.Context, in2 *dynamodb.ListContributorInsightsInput, in3 ...request.Option) (*dynamodb.ListContributorInsightsOutput, error)

	// ListExportsFunc mocks the ListExports method.
	ListExportsFunc func(in1 *dynamodb.ListExportsInput) (*dynamodb.ListExportsOutput, error)

	// ListExportsPagesFunc mocks the ListExportsPages method.
	ListExportsPagesFunc func(in1 *dynamodb.ListExportsInput, in2 func(*dynamodb.ListExportsOutput, bool) bool) error

	// ListExportsPagesWithContextFunc mocks the ListExportsPagesWithContext method.
	ListExportsPagesWithContextFunc func(in1 context.Context, in2 *dynamodb.ListExportsInput, in3 func(*dynamodb.ListExportsOutput, bool) bool, in4 ...request.Option) error

	// ListExportsRequestFunc mocks the ListExportsRequest method.
	ListExportsRequestFunc func(in1 *dynamodb.ListExportsInput) (*request.Request, *dynamodb.ListExportsOutput)

	// ListExportsWithContextFunc mocks the ListExportsWithContext method.
	ListExportsWithContextFunc func(in1 context.Context, in2 *dynamodb.ListExportsInput, in3 ...request.Option) (*dynamodb.ListExportsOutput, error)

	// ListGlobalTablesFunc mocks the ListGlobalTables method.
	ListGlobalTablesFunc func(in1 *dynamodb.ListGlobalTablesInput) (*dynamodb.ListGlobalTablesOutput, error)

	// ListGlobalTablesRequestFunc mocks the ListGlobalTablesRequest method.
	ListGlobalTablesRequestFunc func(in1 *dynamodb.ListGlobalTablesInput) (*request.Request, *dynamodb.ListGlobalTablesOutput)

	// ListGlobalTablesWithContextFunc mocks the ListGlobalTablesWithContext method.
	ListGlobalTablesWithContextFunc func(in1 context.Context, in2 *dynamodb.ListGlobalTablesInput, in3 ...request.Option) (*dynamodb.ListGlobalTablesOutput, error)

	// ListTablesFunc mocks the ListTables method.
	ListTablesFunc func(in1 *dynamodb.ListTablesInput) (*dynamodb.ListTablesOutput, error)

	// ListTablesPagesFunc mocks the ListTablesPages method.
	ListTablesPagesFunc func(in1 *dynamodb.ListTablesInput, in2 func(*dynamodb.ListTablesOutput, bool) bool) error

	// ListTablesPagesWithContextFunc mocks the ListTablesPagesWithContext method.
	ListTablesPagesWithContextFunc func(in1 context.Context, in2 *dynamodb.ListTablesInput, in3 func(*dynamodb.ListTablesOutput, bool) bool, in4 ...request.Option) error

	// ListTablesRequestFunc mocks the ListTablesRequest method.
	ListTablesRequestFunc func(in1 *dynamodb.ListTablesInput) (*request.Request, *dynamodb.ListTablesOutput)

	// ListTablesWithContextFunc mocks the ListTablesWithContext method.
	ListTablesWithContextFunc func(in1 context.Context, in2 *dynamodb.ListTablesInput, in3 ...request.Option) (*dynamodb.ListTablesOutput, error)

	// ListTagsOfResourceFunc mocks the ListTagsOfResource method.
	ListTagsOfResourceFunc func(in1 *dynamodb.ListTagsOfResourceInput) (*dynamodb.ListTagsOfResourceOutput, error)

	// ListTagsOfResourceRequestFunc mocks the ListTagsOfResourceRequest method.
	ListTagsOfResourceRequestFunc func(in1 *dynamodb.ListTagsOfResourceInput) (*request.Request, *dynamodb.ListTagsOfResourceOutput)

	// ListTagsOfResourceWithContextFunc mocks the ListTagsOfResourceWithContext method.
	ListTagsOfResourceWithContextFunc func(in1 context.Context, in2 *dynamodb.ListTagsOfResourceInput, in3 ...request.Option) (*dynamodb.ListTagsOfResourceOutput, error)

	// PutItemFunc mocks the PutItem method.
	PutItemFunc func(in1 *dynamodb.PutItemInput) (*dynamodb.PutItemOutput, error)

	// PutItemRequestFunc mocks the PutItemRequest method.
	PutItemRequestFunc func(in1 *dynamodb.PutItemInput) (*request.Request, *dynamodb.PutItemOutput)

	// PutItemWithContextFunc mocks the PutItemWithContext method.
	PutItemWithContextFunc func(in1 context.Context, in2 *dynamodb.PutItemInput, in3 ...request.Option) (*dynamodb.PutItemOutput, error)

	// QueryFunc mocks the Query method.
	QueryFunc func(in1 *dynamodb.QueryInput) (*dynamodb.QueryOutput, error)

	// QueryPagesFunc mocks the QueryPages method.
	QueryPagesFunc func(in1 *dynamodb.QueryInput, in2 func(*dynamodb.QueryOutput, bool) bool) error

	// QueryPagesWithContextFunc mocks the QueryPagesWithContext method.
	QueryPagesWithContextFunc func(in1 context.Context, in2 *dynamodb.QueryInput, in3 func(*dynamodb.QueryOutput, bool) bool, in4 ...request.Option) error

	// QueryRequestFunc mocks the QueryRequest method.
	QueryRequestFunc func(in1 *dynamodb.QueryInput) (*request.Request, *dynamodb.QueryOutput)

	// QueryWithContextFunc mocks the QueryWithContext method.
	QueryWithContextFunc func(in1 context.Context, in2 *dynamodb.QueryInput, in3 ...request.Option) (*dynamodb.QueryOutput, error)

	// RestoreTableFromBackupFunc mocks the RestoreTableFromBackup method.
	RestoreTableFromBackupFunc func(in1 *dynamodb.RestoreTableFromBackupInput) (*dynamodb.RestoreTableFromBackupOutput, error)

	// RestoreTableFromBackupRequestFunc mocks the RestoreTableFromBackupRequest method.
	RestoreTableFromBackupRequestFunc func(in1 *dynamodb.RestoreTableFromBackupInput) (*request.Request, *dynamodb.RestoreTableFromBackupOutput)

	// RestoreTableFromBackupWithContextFunc mocks the RestoreTableFromBackupWithContext method.
	RestoreTableFromBackupWithContextFunc func(in1 context.Context, in2 *dynamodb.RestoreTableFromBackupInput, in3 ...request.Option) (*dynamodb.RestoreTableFromBackupOutput, error)

	// RestoreTableToPointInTimeFunc mocks the RestoreTableToPointInTime method.
	RestoreTableToPointInTimeFunc func(in1 *dynamodb.RestoreTableToPointInTimeInput) (*dynamodb.RestoreTableToPointInTimeOutput, error)

	// RestoreTableToPointInTimeRequestFunc mocks the RestoreTableToPointInTimeRequest method.
	RestoreTableToPointInTimeRequestFunc func(in1 *dynamodb.RestoreTableToPointInTimeInput) (*request.Request, *dynamodb.RestoreTableToPointInTimeOutput)

	// RestoreTableToPointInTimeWithContextFunc mocks the RestoreTableToPointInTimeWithContext method.
	RestoreTableToPointInTimeWithContextFunc func(in1 context.Context, in2 *dynamodb.RestoreTableToPointInTimeInput, in3 ...request.Option) (*dynamodb.RestoreTableToPointInTimeOutput, error)

	// ScanFunc mocks the Scan method.
	ScanFunc func(in1 *dynamodb.ScanInput) (*dynamodb.ScanOutput, error)

	// ScanPagesFunc mocks the ScanPages method.
	ScanPagesFunc func(in1 *dynamodb.ScanInput, in2 func(*dynamodb.ScanOutput, bool) bool) error

	// ScanPagesWithContextFunc mocks the ScanPagesWithContext method.
	ScanPagesWithContextFunc func(in1 context.Context, in2 *dynamodb.ScanInput, in3 func(*dynamodb.ScanOutput, bool) bool, in4 ...request.Option) error

	// ScanRequestFunc mocks the ScanRequest method.
	ScanRequestFunc func(in1 *dynamodb.ScanInput) (*request.Request, *dynamodb.ScanOutput)

	// ScanWithContextFunc mocks the ScanWithContext method.
	ScanWithContextFunc func(in1 context.Context, in2 *dynamodb.ScanInput, in3 ...request.Option) (*dynamodb.ScanOutput, error)

	// TagResourceFunc mocks the TagResource method.
	TagResourceFunc func(in1 *dynamodb.TagResourceInput) (*dynamodb.TagResourceOutput, error)

	// TagResourceRequestFunc mocks the TagResourceRequest method.
	TagResourceRequestFunc func(in1 *dynamodb.TagResourceInput) (*request.Request, *dynamodb.TagResourceOutput)

	// TagResourceWithContextFunc mocks the TagResourceWithContext method.
	TagResourceWithContextFunc func(in1 context.Context, in2 *dynamodb.TagResourceInput, in3 ...request.Option) (*dynamodb.TagResourceOutput, error)

	// TransactGetItemsFunc mocks the TransactGetItems method.
	TransactGetItemsFunc func(in1 *dynamodb.TransactGetItemsInput) (*dynamodb.TransactGetItemsOutput, error)

	// TransactGetItemsRequestFunc mocks the TransactGetItemsRequest method.
	TransactGetItemsRequestFunc func(in1 *dynamodb.TransactGetItemsInput) (*request.Request, *dynamodb.TransactGetItemsOutput)

	// TransactGetItemsWithContextFunc mocks the TransactGetItemsWithContext method.
	TransactGetItemsWithContextFunc func(in1 context.Context, in2 *dynamodb.TransactGetItemsInput, in3 ...request.Option) (*dynamodb.TransactGetItemsOutput, error)

	// TransactWriteItemsFunc mocks the TransactWriteItems method.
	TransactWriteItemsFunc func(in1 *dynamodb.TransactWriteItemsInput) (*dynamodb.TransactWriteItemsOutput, error)

	// TransactWriteItemsRequestFunc mocks the TransactWriteItemsRequest method.
	TransactWriteItemsRequestFunc func(in1 *dynamodb.TransactWriteItemsInput) (*request.Request, *dynamodb.TransactWriteItemsOutput)

	// TransactWriteItemsWithContextFunc mocks the TransactWriteItemsWithContext method.
	TransactWriteItemsWithContextFunc func(in1 context.Context, in2 *dynamodb.TransactWriteItemsInput, in3 ...request.Option) (*dynamodb.TransactWriteItemsOutput, error)

	// UntagResourceFunc mocks the UntagResource method.
	UntagResourceFunc func(in1 *dynamodb.UntagResourceInput) (*dynamodb.UntagResourceOutput, error)

	// UntagResourceRequestFunc mocks the UntagResourceRequest method.
	UntagResourceRequestFunc func(in1 *dynamodb.UntagResourceInput) (*request.Request, *dynamodb.UntagResourceOutput)

	// UntagResourceWithContextFunc mocks the UntagResourceWithContext method.
	UntagResourceWithContextFunc func(in1 context.Context, in2 *dynamodb.UntagResourceInput, in3 ...request.Option) (*dynamodb.UntagResourceOutput, error)

	// UpdateContinuousBackupsFunc mocks the UpdateContinuousBackups method.
	UpdateContinuousBackupsFunc func(in1 *dynamodb.UpdateContinuousBackupsInput) (*dynamodb.UpdateContinuousBackupsOutput, error)

	// UpdateContinuousBackupsRequestFunc mocks the UpdateContinuousBackupsRequest method.
	UpdateContinuousBackupsRequestFunc func(in1 *dynamodb.UpdateContinuousBackupsInput) (*request.Request, *dynamodb.UpdateContinuousBackupsOutput)

	// UpdateContinuousBackupsWithContextFunc mocks the UpdateContinuousBackupsWithContext method.
	UpdateContinuousBackupsWithContextFunc func(in1 context.Context, in2 *dynamodb.UpdateContinuousBackupsInput, in3 ...request.Option) (*dynamodb.UpdateContinuousBackupsOutput, error)

	// UpdateContributorInsightsFunc mocks the UpdateContributorInsights method.
	UpdateContributorInsightsFunc func(in1 *dynamodb.UpdateContributorInsightsInput) (*dynamodb.UpdateContributorInsightsOutput, error)

	// UpdateContributorInsightsRequestFunc mocks the UpdateContributorInsightsRequest method.
	UpdateContributorInsightsRequestFunc func(in1 *dynamodb.UpdateContributorInsightsInput) (*request.Request, *dynamodb.UpdateContributorInsightsOutput)

	// UpdateContributorInsightsWithContextFunc mocks the UpdateContributorInsightsWithContext method.
	UpdateContributorInsightsWithContextFunc func(in1 context.Context, in2 *dynamodb.UpdateContributorInsightsInput, in3 ...request.Option) (*dynamodb.UpdateContributorInsightsOutput, error)

	// UpdateGlobalTableFunc mocks the UpdateGlobalTable method.
	UpdateGlobalTableFunc func(in1 *dynamodb.UpdateGlobalTableInput) (*dynamodb.UpdateGlobalTableOutput, error)

	// UpdateGlobalTableRequestFunc mocks the UpdateGlobalTableRequest method.
	UpdateGlobalTableRequestFunc func(in1 *dynamodb.UpdateGlobalTableInput) (*request.Request, *dynamodb.UpdateGlobalTableOutput)

	// UpdateGlobalTableSettingsFunc mocks the UpdateGlobalTableSettings method.
	UpdateGlobalTableSettingsFunc func(in1 *dynamodb.UpdateGlobalTableSettingsInput) (*dynamodb.UpdateGlobalTableSettingsOutput, error)

	// UpdateGlobalTableSettingsRequestFunc mocks the UpdateGlobalTableSettingsRequest method.
	UpdateGlobalTableSettingsRequestFunc func(in1 *dynamodb.UpdateGlobalTableSettingsInput) (*request.Request, *dynamodb.UpdateGlobalTableSettingsOutput)

	// UpdateGlobalTableSettingsWithContextFunc mocks the UpdateGlobalTableSettingsWithContext method.
	UpdateGlobalTableSettingsWithContextFunc func(in1 context.Context, in2 *dynamodb.UpdateGlobalTableSettingsInput, in3 ...request.Option) (*dynamodb.UpdateGlobalTableSettingsOutput, error)

	// UpdateGlobalTableWithContextFunc mocks the UpdateGlobalTableWithContext method.
	UpdateGlobalTableWithContextFunc func(in1 context.Context, in2 *dynamodb.UpdateGlobalTableInput, in3 ...request.Option) (*dynamodb.UpdateGlobalTableOutput, error)

	// UpdateItemFunc mocks the UpdateItem method.
	UpdateItemFunc func(in1 *dynamodb.UpdateItemInput) (*dynamodb.UpdateItemOutput, error)

	// UpdateItemRequestFunc mocks the UpdateItemRequest method.
	UpdateItemRequestFunc func(in1 *dynamodb.UpdateItemInput) (*request.Request, *dynamodb.UpdateItemOutput)

	// UpdateItemWithContextFunc mocks the UpdateItemWithContext method.
	UpdateItemWithContextFunc func(in1 context.Context, in2 *dynamodb.UpdateItemInput, in3 ...request.Option) (*dynamodb.UpdateItemOutput, error)

	// UpdateTableFunc mocks the UpdateTable method.
	UpdateTableFunc func(in1 *dynamodb.UpdateTableInput) (*dynamodb.UpdateTableOutput, error)

	// UpdateTableReplicaAutoScalingFunc mocks the UpdateTableReplicaAutoScaling method.
	UpdateTableReplicaAutoScalingFunc func(in1 *dynamodb.UpdateTableReplicaAutoScalingInput) (*dynamodb.UpdateTableReplicaAutoScalingOutput, error)

	// UpdateTableReplicaAutoScalingRequestFunc mocks the UpdateTableReplicaAutoScalingRequest method.
	UpdateTableReplicaAutoScalingRequestFunc func(in1 *dynamodb.UpdateTableReplicaAutoScalingInput) (*request.Request, *dynamodb.UpdateTableReplicaAutoScalingOutput)

	// UpdateTableReplicaAutoScalingWithContextFunc mocks the UpdateTableReplicaAutoScalingWithContext method.
	UpdateTableReplicaAutoScalingWithContextFunc func(in1 context.Context, in2 *dynamodb.UpdateTableReplicaAutoScalingInput, in3 ...request.Option) (*dynamodb.UpdateTableReplicaAutoScalingOutput, error)

	// UpdateTableRequestFunc mocks the UpdateTableRequest method.
	UpdateTableRequestFunc func(in1 *dynamodb.UpdateTableInput) (*request.Request, *dynamodb.UpdateTableOutput)

	// UpdateTableWithContextFunc mocks the UpdateTableWithContext method.
	UpdateTableWithContextFunc func(in1 context.Context, in2 *dynamodb.UpdateTableInput, in3 ...request.Option) (*dynamodb.UpdateTableOutput, error)

	// UpdateTimeToLiveFunc mocks the UpdateTimeToLive method.
	UpdateTimeToLiveFunc func(in1 *dynamodb.UpdateTimeToLiveInput) (*dynamodb.UpdateTimeToLiveOutput, error)

	// UpdateTimeToLiveRequestFunc mocks the UpdateTimeToLiveRequest method.
	UpdateTimeToLiveRequestFunc func(in1 *dynamodb.UpdateTimeToLiveInput) (*request.Request, *dynamodb.UpdateTimeToLiveOutput)

	// UpdateTimeToLiveWithContextFunc mocks the UpdateTimeToLiveWithContext method.
	UpdateTimeToLiveWithContextFunc func(in1 context.Context, in2 *dynamodb.UpdateTimeToLiveInput, in3 ...request.Option) (*dynamodb.UpdateTimeToLiveOutput, error)

	// WaitUntilTableExistsFunc mocks the WaitUntilTableExists method.
	WaitUntilTableExistsFunc func(in1 *dynamodb.DescribeTableInput) error

	// WaitUntilTableExistsWithContextFunc mocks the WaitUntilTableExistsWithContext method.
	WaitUntilTableExistsWithContextFunc func(in1 context.Context, in2 *dynamodb.DescribeTableInput, in3 ...request.WaiterOption) error

	// WaitUntilTableNotExistsFunc mocks the WaitUntilTableNotExists method.
	WaitUntilTableNotExistsFunc func(in1 *dynamodb.DescribeTableInput) error

	// WaitUntilTableNotExistsWithContextFunc mocks the WaitUntilTableNotExistsWithContext method.
	WaitUntilTableNotExistsWithContextFunc func(in1 context.Context, in2 *dynamodb.DescribeTableInput, in3 ...request.WaiterOption) error

	// calls tracks calls to the methods.
	calls struct {
		// BatchExecuteStatement holds details about calls to the BatchExecuteStatement method.
		BatchExecuteStatement []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.BatchExecuteStatementInput
		}
		// BatchExecuteStatementRequest holds details about calls to the BatchExecuteStatementRequest method.
		BatchExecuteStatementRequest []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.BatchExecuteStatementInput
		}
		// BatchExecuteStatementWithContext holds details about calls to the BatchExecuteStatementWithContext method.
		BatchExecuteStatementWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *dynamodb.BatchExecuteStatementInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// BatchGetItem holds details about calls to the BatchGetItem method.
		BatchGetItem []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.BatchGetItemInput
		}
		// BatchGetItemPages holds details about calls to the BatchGetItemPages method.
		BatchGetItemPages []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.BatchGetItemInput
			// In2 is the in2 argument value.
			In2 func(*dynamodb.BatchGetItemOutput, bool) bool
		}
		// BatchGetItemPagesWithContext holds details about calls to the BatchGetItemPagesWithContext method.
		BatchGetItemPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *dynamodb.BatchGetItemInput
			// In3 is the in3 argument value.
			In3 func(*dynamodb.BatchGetItemOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// BatchGetItemRequest holds details about calls to the BatchGetItemRequest method.
		BatchGetItemRequest []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.BatchGetItemInput
		}
		// BatchGetItemWithContext holds details about calls to the BatchGetItemWithContext method.
		BatchGetItemWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *dynamodb.BatchGetItemInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// BatchWriteItem holds details about calls to the BatchWriteItem method.
		BatchWriteItem []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.BatchWriteItemInput
		}
		// BatchWriteItemRequest holds details about calls to the BatchWriteItemRequest method.
		BatchWriteItemRequest []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.BatchWriteItemInput
		}
		// BatchWriteItemWithContext holds details about calls to the BatchWriteItemWithContext method.
		BatchWriteItemWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *dynamodb.BatchWriteItemInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateBackup holds details about calls to the CreateBackup method.
		CreateBackup []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.CreateBackupInput
		}
		// CreateBackupRequest holds details about calls to the CreateBackupRequest method.
		CreateBackupRequest []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.CreateBackupInput
		}
		// CreateBackupWithContext holds details about calls to the CreateBackupWithContext method.
		CreateBackupWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *dynamodb.CreateBackupInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateGlobalTable holds details about calls to the CreateGlobalTable method.
		CreateGlobalTable []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.CreateGlobalTableInput
		}
		// CreateGlobalTableRequest holds details about calls to the CreateGlobalTableRequest method.
		CreateGlobalTableRequest []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.CreateGlobalTableInput
		}
		// CreateGlobalTableWithContext holds details about calls to the CreateGlobalTableWithContext method.
		CreateGlobalTableWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *dynamodb.CreateGlobalTableInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateTable holds details about calls to the CreateTable method.
		CreateTable []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.CreateTableInput
		}
		// CreateTableRequest holds details about calls to the CreateTableRequest method.
		CreateTableRequest []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.CreateTableInput
		}
		// CreateTableWithContext holds details about calls to the CreateTableWithContext method.
		CreateTableWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *dynamodb.CreateTableInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteBackup holds details about calls to the DeleteBackup method.
		DeleteBackup []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.DeleteBackupInput
		}
		// DeleteBackupRequest holds details about calls to the DeleteBackupRequest method.
		DeleteBackupRequest []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.DeleteBackupInput
		}
		// DeleteBackupWithContext holds details about calls to the DeleteBackupWithContext method.
		DeleteBackupWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *dynamodb.DeleteBackupInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteItem holds details about calls to the DeleteItem method.
		DeleteItem []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.DeleteItemInput
		}
		// DeleteItemRequest holds details about calls to the DeleteItemRequest method.
		DeleteItemRequest []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.DeleteItemInput
		}
		// DeleteItemWithContext holds details about calls to the DeleteItemWithContext method.
		DeleteItemWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *dynamodb.DeleteItemInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteTable holds details about calls to the DeleteTable method.
		DeleteTable []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.DeleteTableInput
		}
		// DeleteTableRequest holds details about calls to the DeleteTableRequest method.
		DeleteTableRequest []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.DeleteTableInput
		}
		// DeleteTableWithContext holds details about calls to the DeleteTableWithContext method.
		DeleteTableWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *dynamodb.DeleteTableInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeBackup holds details about calls to the DescribeBackup method.
		DescribeBackup []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.DescribeBackupInput
		}
		// DescribeBackupRequest holds details about calls to the DescribeBackupRequest method.
		DescribeBackupRequest []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.DescribeBackupInput
		}
		// DescribeBackupWithContext holds details about calls to the DescribeBackupWithContext method.
		DescribeBackupWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *dynamodb.DescribeBackupInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeContinuousBackups holds details about calls to the DescribeContinuousBackups method.
		DescribeContinuousBackups []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.DescribeContinuousBackupsInput
		}
		// DescribeContinuousBackupsRequest holds details about calls to the DescribeContinuousBackupsRequest method.
		DescribeContinuousBackupsRequest []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.DescribeContinuousBackupsInput
		}
		// DescribeContinuousBackupsWithContext holds details about calls to the DescribeContinuousBackupsWithContext method.
		DescribeContinuousBackupsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *dynamodb.DescribeContinuousBackupsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeContributorInsights holds details about calls to the DescribeContributorInsights method.
		DescribeContributorInsights []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.DescribeContributorInsightsInput
		}
		// DescribeContributorInsightsRequest holds details about calls to the DescribeContributorInsightsRequest method.
		DescribeContributorInsightsRequest []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.DescribeContributorInsightsInput
		}
		// DescribeContributorInsightsWithContext holds details about calls to the DescribeContributorInsightsWithContext method.
		DescribeContributorInsightsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *dynamodb.DescribeContributorInsightsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeEndpoints holds details about calls to the DescribeEndpoints method.
		DescribeEndpoints []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.DescribeEndpointsInput
		}
		// DescribeEndpointsRequest holds details about calls to the DescribeEndpointsRequest method.
		DescribeEndpointsRequest []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.DescribeEndpointsInput
		}
		// DescribeEndpointsWithContext holds details about calls to the DescribeEndpointsWithContext method.
		DescribeEndpointsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *dynamodb.DescribeEndpointsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeExport holds details about calls to the DescribeExport method.
		DescribeExport []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.DescribeExportInput
		}
		// DescribeExportRequest holds details about calls to the DescribeExportRequest method.
		DescribeExportRequest []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.DescribeExportInput
		}
		// DescribeExportWithContext holds details about calls to the DescribeExportWithContext method.
		DescribeExportWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *dynamodb.DescribeExportInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeGlobalTable holds details about calls to the DescribeGlobalTable method.
		DescribeGlobalTable []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.DescribeGlobalTableInput
		}
		// DescribeGlobalTableRequest holds details about calls to the DescribeGlobalTableRequest method.
		DescribeGlobalTableRequest []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.DescribeGlobalTableInput
		}
		// DescribeGlobalTableSettings holds details about calls to the DescribeGlobalTableSettings method.
		DescribeGlobalTableSettings []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.DescribeGlobalTableSettingsInput
		}
		// DescribeGlobalTableSettingsRequest holds details about calls to the DescribeGlobalTableSettingsRequest method.
		DescribeGlobalTableSettingsRequest []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.DescribeGlobalTableSettingsInput
		}
		// DescribeGlobalTableSettingsWithContext holds details about calls to the DescribeGlobalTableSettingsWithContext method.
		DescribeGlobalTableSettingsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *dynamodb.DescribeGlobalTableSettingsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeGlobalTableWithContext holds details about calls to the DescribeGlobalTableWithContext method.
		DescribeGlobalTableWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *dynamodb.DescribeGlobalTableInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeKinesisStreamingDestination holds details about calls to the DescribeKinesisStreamingDestination method.
		DescribeKinesisStreamingDestination []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.DescribeKinesisStreamingDestinationInput
		}
		// DescribeKinesisStreamingDestinationRequest holds details about calls to the DescribeKinesisStreamingDestinationRequest method.
		DescribeKinesisStreamingDestinationRequest []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.DescribeKinesisStreamingDestinationInput
		}
		// DescribeKinesisStreamingDestinationWithContext holds details about calls to the DescribeKinesisStreamingDestinationWithContext method.
		DescribeKinesisStreamingDestinationWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *dynamodb.DescribeKinesisStreamingDestinationInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeLimits holds details about calls to the DescribeLimits method.
		DescribeLimits []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.DescribeLimitsInput
		}
		// DescribeLimitsRequest holds details about calls to the DescribeLimitsRequest method.
		DescribeLimitsRequest []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.DescribeLimitsInput
		}
		// DescribeLimitsWithContext holds details about calls to the DescribeLimitsWithContext method.
		DescribeLimitsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *dynamodb.DescribeLimitsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeTable holds details about calls to the DescribeTable method.
		DescribeTable []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.DescribeTableInput
		}
		// DescribeTableReplicaAutoScaling holds details about calls to the DescribeTableReplicaAutoScaling method.
		DescribeTableReplicaAutoScaling []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.DescribeTableReplicaAutoScalingInput
		}
		// DescribeTableReplicaAutoScalingRequest holds details about calls to the DescribeTableReplicaAutoScalingRequest method.
		DescribeTableReplicaAutoScalingRequest []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.DescribeTableReplicaAutoScalingInput
		}
		// DescribeTableReplicaAutoScalingWithContext holds details about calls to the DescribeTableReplicaAutoScalingWithContext method.
		DescribeTableReplicaAutoScalingWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *dynamodb.DescribeTableReplicaAutoScalingInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeTableRequest holds details about calls to the DescribeTableRequest method.
		DescribeTableRequest []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.DescribeTableInput
		}
		// DescribeTableWithContext holds details about calls to the DescribeTableWithContext method.
		DescribeTableWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *dynamodb.DescribeTableInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeTimeToLive holds details about calls to the DescribeTimeToLive method.
		DescribeTimeToLive []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.DescribeTimeToLiveInput
		}
		// DescribeTimeToLiveRequest holds details about calls to the DescribeTimeToLiveRequest method.
		DescribeTimeToLiveRequest []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.DescribeTimeToLiveInput
		}
		// DescribeTimeToLiveWithContext holds details about calls to the DescribeTimeToLiveWithContext method.
		DescribeTimeToLiveWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *dynamodb.DescribeTimeToLiveInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DisableKinesisStreamingDestination holds details about calls to the DisableKinesisStreamingDestination method.
		DisableKinesisStreamingDestination []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.DisableKinesisStreamingDestinationInput
		}
		// DisableKinesisStreamingDestinationRequest holds details about calls to the DisableKinesisStreamingDestinationRequest method.
		DisableKinesisStreamingDestinationRequest []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.DisableKinesisStreamingDestinationInput
		}
		// DisableKinesisStreamingDestinationWithContext holds details about calls to the DisableKinesisStreamingDestinationWithContext method.
		DisableKinesisStreamingDestinationWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *dynamodb.DisableKinesisStreamingDestinationInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// EnableKinesisStreamingDestination holds details about calls to the EnableKinesisStreamingDestination method.
		EnableKinesisStreamingDestination []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.EnableKinesisStreamingDestinationInput
		}
		// EnableKinesisStreamingDestinationRequest holds details about calls to the EnableKinesisStreamingDestinationRequest method.
		EnableKinesisStreamingDestinationRequest []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.EnableKinesisStreamingDestinationInput
		}
		// EnableKinesisStreamingDestinationWithContext holds details about calls to the EnableKinesisStreamingDestinationWithContext method.
		EnableKinesisStreamingDestinationWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *dynamodb.EnableKinesisStreamingDestinationInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ExecuteStatement holds details about calls to the ExecuteStatement method.
		ExecuteStatement []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.ExecuteStatementInput
		}
		// ExecuteStatementRequest holds details about calls to the ExecuteStatementRequest method.
		ExecuteStatementRequest []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.ExecuteStatementInput
		}
		// ExecuteStatementWithContext holds details about calls to the ExecuteStatementWithContext method.
		ExecuteStatementWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *dynamodb.ExecuteStatementInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ExecuteTransaction holds details about calls to the ExecuteTransaction method.
		ExecuteTransaction []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.ExecuteTransactionInput
		}
		// ExecuteTransactionRequest holds details about calls to the ExecuteTransactionRequest method.
		ExecuteTransactionRequest []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.ExecuteTransactionInput
		}
		// ExecuteTransactionWithContext holds details about calls to the ExecuteTransactionWithContext method.
		ExecuteTransactionWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *dynamodb.ExecuteTransactionInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ExportTableToPointInTime holds details about calls to the ExportTableToPointInTime method.
		ExportTableToPointInTime []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.ExportTableToPointInTimeInput
		}
		// ExportTableToPointInTimeRequest holds details about calls to the ExportTableToPointInTimeRequest method.
		ExportTableToPointInTimeRequest []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.ExportTableToPointInTimeInput
		}
		// ExportTableToPointInTimeWithContext holds details about calls to the ExportTableToPointInTimeWithContext method.
		ExportTableToPointInTimeWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *dynamodb.ExportTableToPointInTimeInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetItem holds details about calls to the GetItem method.
		GetItem []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.GetItemInput
		}
		// GetItemRequest holds details about calls to the GetItemRequest method.
		GetItemRequest []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.GetItemInput
		}
		// GetItemWithContext holds details about calls to the GetItemWithContext method.
		GetItemWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *dynamodb.GetItemInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ListBackups holds details about calls to the ListBackups method.
		ListBackups []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.ListBackupsInput
		}
		// ListBackupsRequest holds details about calls to the ListBackupsRequest method.
		ListBackupsRequest []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.ListBackupsInput
		}
		// ListBackupsWithContext holds details about calls to the ListBackupsWithContext method.
		ListBackupsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *dynamodb.ListBackupsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ListContributorInsights holds details about calls to the ListContributorInsights method.
		ListContributorInsights []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.ListContributorInsightsInput
		}
		// ListContributorInsightsPages holds details about calls to the ListContributorInsightsPages method.
		ListContributorInsightsPages []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.ListContributorInsightsInput
			// In2 is the in2 argument value.
			In2 func(*dynamodb.ListContributorInsightsOutput, bool) bool
		}
		// ListContributorInsightsPagesWithContext holds details about calls to the ListContributorInsightsPagesWithContext method.
		ListContributorInsightsPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *dynamodb.ListContributorInsightsInput
			// In3 is the in3 argument value.
			In3 func(*dynamodb.ListContributorInsightsOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// ListContributorInsightsRequest holds details about calls to the ListContributorInsightsRequest method.
		ListContributorInsightsRequest []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.ListContributorInsightsInput
		}
		// ListContributorInsightsWithContext holds details about calls to the ListContributorInsightsWithContext method.
		ListContributorInsightsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *dynamodb.ListContributorInsightsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ListExports holds details about calls to the ListExports method.
		ListExports []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.ListExportsInput
		}
		// ListExportsPages holds details about calls to the ListExportsPages method.
		ListExportsPages []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.ListExportsInput
			// In2 is the in2 argument value.
			In2 func(*dynamodb.ListExportsOutput, bool) bool
		}
		// ListExportsPagesWithContext holds details about calls to the ListExportsPagesWithContext method.
		ListExportsPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *dynamodb.ListExportsInput
			// In3 is the in3 argument value.
			In3 func(*dynamodb.ListExportsOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// ListExportsRequest holds details about calls to the ListExportsRequest method.
		ListExportsRequest []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.ListExportsInput
		}
		// ListExportsWithContext holds details about calls to the ListExportsWithContext method.
		ListExportsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *dynamodb.ListExportsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ListGlobalTables holds details about calls to the ListGlobalTables method.
		ListGlobalTables []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.ListGlobalTablesInput
		}
		// ListGlobalTablesRequest holds details about calls to the ListGlobalTablesRequest method.
		ListGlobalTablesRequest []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.ListGlobalTablesInput
		}
		// ListGlobalTablesWithContext holds details about calls to the ListGlobalTablesWithContext method.
		ListGlobalTablesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *dynamodb.ListGlobalTablesInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ListTables holds details about calls to the ListTables method.
		ListTables []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.ListTablesInput
		}
		// ListTablesPages holds details about calls to the ListTablesPages method.
		ListTablesPages []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.ListTablesInput
			// In2 is the in2 argument value.
			In2 func(*dynamodb.ListTablesOutput, bool) bool
		}
		// ListTablesPagesWithContext holds details about calls to the ListTablesPagesWithContext method.
		ListTablesPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *dynamodb.ListTablesInput
			// In3 is the in3 argument value.
			In3 func(*dynamodb.ListTablesOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// ListTablesRequest holds details about calls to the ListTablesRequest method.
		ListTablesRequest []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.ListTablesInput
		}
		// ListTablesWithContext holds details about calls to the ListTablesWithContext method.
		ListTablesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *dynamodb.ListTablesInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ListTagsOfResource holds details about calls to the ListTagsOfResource method.
		ListTagsOfResource []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.ListTagsOfResourceInput
		}
		// ListTagsOfResourceRequest holds details about calls to the ListTagsOfResourceRequest method.
		ListTagsOfResourceRequest []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.ListTagsOfResourceInput
		}
		// ListTagsOfResourceWithContext holds details about calls to the ListTagsOfResourceWithContext method.
		ListTagsOfResourceWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *dynamodb.ListTagsOfResourceInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// PutItem holds details about calls to the PutItem method.
		PutItem []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.PutItemInput
		}
		// PutItemRequest holds details about calls to the PutItemRequest method.
		PutItemRequest []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.PutItemInput
		}
		// PutItemWithContext holds details about calls to the PutItemWithContext method.
		PutItemWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *dynamodb.PutItemInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// Query holds details about calls to the Query method.
		Query []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.QueryInput
		}
		// QueryPages holds details about calls to the QueryPages method.
		QueryPages []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.QueryInput
			// In2 is the in2 argument value.
			In2 func(*dynamodb.QueryOutput, bool) bool
		}
		// QueryPagesWithContext holds details about calls to the QueryPagesWithContext method.
		QueryPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *dynamodb.QueryInput
			// In3 is the in3 argument value.
			In3 func(*dynamodb.QueryOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// QueryRequest holds details about calls to the QueryRequest method.
		QueryRequest []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.QueryInput
		}
		// QueryWithContext holds details about calls to the QueryWithContext method.
		QueryWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *dynamodb.QueryInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// RestoreTableFromBackup holds details about calls to the RestoreTableFromBackup method.
		RestoreTableFromBackup []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.RestoreTableFromBackupInput
		}
		// RestoreTableFromBackupRequest holds details about calls to the RestoreTableFromBackupRequest method.
		RestoreTableFromBackupRequest []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.RestoreTableFromBackupInput
		}
		// RestoreTableFromBackupWithContext holds details about calls to the RestoreTableFromBackupWithContext method.
		RestoreTableFromBackupWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *dynamodb.RestoreTableFromBackupInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// RestoreTableToPointInTime holds details about calls to the RestoreTableToPointInTime method.
		RestoreTableToPointInTime []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.RestoreTableToPointInTimeInput
		}
		// RestoreTableToPointInTimeRequest holds details about calls to the RestoreTableToPointInTimeRequest method.
		RestoreTableToPointInTimeRequest []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.RestoreTableToPointInTimeInput
		}
		// RestoreTableToPointInTimeWithContext holds details about calls to the RestoreTableToPointInTimeWithContext method.
		RestoreTableToPointInTimeWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *dynamodb.RestoreTableToPointInTimeInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// Scan holds details about calls to the Scan method.
		Scan []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.ScanInput
		}
		// ScanPages holds details about calls to the ScanPages method.
		ScanPages []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.ScanInput
			// In2 is the in2 argument value.
			In2 func(*dynamodb.ScanOutput, bool) bool
		}
		// ScanPagesWithContext holds details about calls to the ScanPagesWithContext method.
		ScanPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *dynamodb.ScanInput
			// In3 is the in3 argument value.
			In3 func(*dynamodb.ScanOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// ScanRequest holds details about calls to the ScanRequest method.
		ScanRequest []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.ScanInput
		}
		// ScanWithContext holds details about calls to the ScanWithContext method.
		ScanWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *dynamodb.ScanInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// TagResource holds details about calls to the TagResource method.
		TagResource []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.TagResourceInput
		}
		// TagResourceRequest holds details about calls to the TagResourceRequest method.
		TagResourceRequest []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.TagResourceInput
		}
		// TagResourceWithContext holds details about calls to the TagResourceWithContext method.
		TagResourceWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *dynamodb.TagResourceInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// TransactGetItems holds details about calls to the TransactGetItems method.
		TransactGetItems []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.TransactGetItemsInput
		}
		// TransactGetItemsRequest holds details about calls to the TransactGetItemsRequest method.
		TransactGetItemsRequest []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.TransactGetItemsInput
		}
		// TransactGetItemsWithContext holds details about calls to the TransactGetItemsWithContext method.
		TransactGetItemsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *dynamodb.TransactGetItemsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// TransactWriteItems holds details about calls to the TransactWriteItems method.
		TransactWriteItems []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.TransactWriteItemsInput
		}
		// TransactWriteItemsRequest holds details about calls to the TransactWriteItemsRequest method.
		TransactWriteItemsRequest []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.TransactWriteItemsInput
		}
		// TransactWriteItemsWithContext holds details about calls to the TransactWriteItemsWithContext method.
		TransactWriteItemsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *dynamodb.TransactWriteItemsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// UntagResource holds details about calls to the UntagResource method.
		UntagResource []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.UntagResourceInput
		}
		// UntagResourceRequest holds details about calls to the UntagResourceRequest method.
		UntagResourceRequest []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.UntagResourceInput
		}
		// UntagResourceWithContext holds details about calls to the UntagResourceWithContext method.
		UntagResourceWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *dynamodb.UntagResourceInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// UpdateContinuousBackups holds details about calls to the UpdateContinuousBackups method.
		UpdateContinuousBackups []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.UpdateContinuousBackupsInput
		}
		// UpdateContinuousBackupsRequest holds details about calls to the UpdateContinuousBackupsRequest method.
		UpdateContinuousBackupsRequest []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.UpdateContinuousBackupsInput
		}
		// UpdateContinuousBackupsWithContext holds details about calls to the UpdateContinuousBackupsWithContext method.
		UpdateContinuousBackupsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *dynamodb.UpdateContinuousBackupsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// UpdateContributorInsights holds details about calls to the UpdateContributorInsights method.
		UpdateContributorInsights []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.UpdateContributorInsightsInput
		}
		// UpdateContributorInsightsRequest holds details about calls to the UpdateContributorInsightsRequest method.
		UpdateContributorInsightsRequest []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.UpdateContributorInsightsInput
		}
		// UpdateContributorInsightsWithContext holds details about calls to the UpdateContributorInsightsWithContext method.
		UpdateContributorInsightsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *dynamodb.UpdateContributorInsightsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// UpdateGlobalTable holds details about calls to the UpdateGlobalTable method.
		UpdateGlobalTable []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.UpdateGlobalTableInput
		}
		// UpdateGlobalTableRequest holds details about calls to the UpdateGlobalTableRequest method.
		UpdateGlobalTableRequest []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.UpdateGlobalTableInput
		}
		// UpdateGlobalTableSettings holds details about calls to the UpdateGlobalTableSettings method.
		UpdateGlobalTableSettings []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.UpdateGlobalTableSettingsInput
		}
		// UpdateGlobalTableSettingsRequest holds details about calls to the UpdateGlobalTableSettingsRequest method.
		UpdateGlobalTableSettingsRequest []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.UpdateGlobalTableSettingsInput
		}
		// UpdateGlobalTableSettingsWithContext holds details about calls to the UpdateGlobalTableSettingsWithContext method.
		UpdateGlobalTableSettingsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *dynamodb.UpdateGlobalTableSettingsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// UpdateGlobalTableWithContext holds details about calls to the UpdateGlobalTableWithContext method.
		UpdateGlobalTableWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *dynamodb.UpdateGlobalTableInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// UpdateItem holds details about calls to the UpdateItem method.
		UpdateItem []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.UpdateItemInput
		}
		// UpdateItemRequest holds details about calls to the UpdateItemRequest method.
		UpdateItemRequest []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.UpdateItemInput
		}
		// UpdateItemWithContext holds details about calls to the UpdateItemWithContext method.
		UpdateItemWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *dynamodb.UpdateItemInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// UpdateTable holds details about calls to the UpdateTable method.
		UpdateTable []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.UpdateTableInput
		}
		// UpdateTableReplicaAutoScaling holds details about calls to the UpdateTableReplicaAutoScaling method.
		UpdateTableReplicaAutoScaling []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.UpdateTableReplicaAutoScalingInput
		}
		// UpdateTableReplicaAutoScalingRequest holds details about calls to the UpdateTableReplicaAutoScalingRequest method.
		UpdateTableReplicaAutoScalingRequest []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.UpdateTableReplicaAutoScalingInput
		}
		// UpdateTableReplicaAutoScalingWithContext holds details about calls to the UpdateTableReplicaAutoScalingWithContext method.
		UpdateTableReplicaAutoScalingWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *dynamodb.UpdateTableReplicaAutoScalingInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// UpdateTableRequest holds details about calls to the UpdateTableRequest method.
		UpdateTableRequest []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.UpdateTableInput
		}
		// UpdateTableWithContext holds details about calls to the UpdateTableWithContext method.
		UpdateTableWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *dynamodb.UpdateTableInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// UpdateTimeToLive holds details about calls to the UpdateTimeToLive method.
		UpdateTimeToLive []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.UpdateTimeToLiveInput
		}
		// UpdateTimeToLiveRequest holds details about calls to the UpdateTimeToLiveRequest method.
		UpdateTimeToLiveRequest []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.UpdateTimeToLiveInput
		}
		// UpdateTimeToLiveWithContext holds details about calls to the UpdateTimeToLiveWithContext method.
		UpdateTimeToLiveWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *dynamodb.UpdateTimeToLiveInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// WaitUntilTableExists holds details about calls to the WaitUntilTableExists method.
		WaitUntilTableExists []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.DescribeTableInput
		}
		// WaitUntilTableExistsWithContext holds details about calls to the WaitUntilTableExistsWithContext method.
		WaitUntilTableExistsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *dynamodb.DescribeTableInput
			// In3 is the in3 argument value.
			In3 []request.WaiterOption
		}
		// WaitUntilTableNotExists holds details about calls to the WaitUntilTableNotExists method.
		WaitUntilTableNotExists []struct {
			// In1 is the in1 argument value.
			In1 *dynamodb.DescribeTableInput
		}
		// WaitUntilTableNotExistsWithContext holds details about calls to the WaitUntilTableNotExistsWithContext method.
		WaitUntilTableNotExistsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *dynamodb.DescribeTableInput
			// In3 is the in3 argument value.
			In3 []request.WaiterOption
		}
	}
}

// BatchExecuteStatement calls BatchExecuteStatementFunc.
func (mock *DynamoDBAPIMock) BatchExecuteStatement(in1 *dynamodb.BatchExecuteStatementInput) (*dynamodb.BatchExecuteStatementOutput, error) {
	if mock.BatchExecuteStatementFunc == nil {
		panic("DynamoDBAPIMock.BatchExecuteStatementFunc: method is nil but DynamoDBAPI.BatchExecuteStatement was just called")
	}
	callInfo := struct {
		In1 *dynamodb.BatchExecuteStatementInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockBatchExecuteStatement.Lock()
	mock.calls.BatchExecuteStatement = append(mock.calls.BatchExecuteStatement, callInfo)
	lockDynamoDBAPIMockBatchExecuteStatement.Unlock()
	return mock.BatchExecuteStatementFunc(in1)
}

// BatchExecuteStatementCalls gets all the calls that were made to BatchExecuteStatement.
// Check the length with:
//     len(mockedDynamoDBAPI.BatchExecuteStatementCalls())
func (mock *DynamoDBAPIMock) BatchExecuteStatementCalls() []struct {
	In1 *dynamodb.BatchExecuteStatementInput
} {
	var calls []struct {
		In1 *dynamodb.BatchExecuteStatementInput
	}
	lockDynamoDBAPIMockBatchExecuteStatement.RLock()
	calls = mock.calls.BatchExecuteStatement
	lockDynamoDBAPIMockBatchExecuteStatement.RUnlock()
	return calls
}

// BatchExecuteStatementRequest calls BatchExecuteStatementRequestFunc.
func (mock *DynamoDBAPIMock) BatchExecuteStatementRequest(in1 *dynamodb.BatchExecuteStatementInput) (*request.Request, *dynamodb.BatchExecuteStatementOutput) {
	if mock.BatchExecuteStatementRequestFunc == nil {
		panic("DynamoDBAPIMock.BatchExecuteStatementRequestFunc: method is nil but DynamoDBAPI.BatchExecuteStatementRequest was just called")
	}
	callInfo := struct {
		In1 *dynamodb.BatchExecuteStatementInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockBatchExecuteStatementRequest.Lock()
	mock.calls.BatchExecuteStatementRequest = append(mock.calls.BatchExecuteStatementRequest, callInfo)
	lockDynamoDBAPIMockBatchExecuteStatementRequest.Unlock()
	return mock.BatchExecuteStatementRequestFunc(in1)
}

// BatchExecuteStatementRequestCalls gets all the calls that were made to BatchExecuteStatementRequest.
// Check the length with:
//     len(mockedDynamoDBAPI.BatchExecuteStatementRequestCalls())
func (mock *DynamoDBAPIMock) BatchExecuteStatementRequestCalls() []struct {
	In1 *dynamodb.BatchExecuteStatementInput
} {
	var calls []struct {
		In1 *dynamodb.BatchExecuteStatementInput
	}
	lockDynamoDBAPIMockBatchExecuteStatementRequest.RLock()
	calls = mock.calls.BatchExecuteStatementRequest
	lockDynamoDBAPIMockBatchExecuteStatementRequest.RUnlock()
	return calls
}

// BatchExecuteStatementWithContext calls BatchExecuteStatementWithContextFunc.
func (mock *DynamoDBAPIMock) BatchExecuteStatementWithContext(in1 context.Context, in2 *dynamodb.BatchExecuteStatementInput, in3 ...request.Option) (*dynamodb.BatchExecuteStatementOutput, error) {
	if mock.BatchExecuteStatementWithContextFunc == nil {
		panic("DynamoDBAPIMock.BatchExecuteStatementWithContextFunc: method is nil but DynamoDBAPI.BatchExecuteStatementWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *dynamodb.BatchExecuteStatementInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockDynamoDBAPIMockBatchExecuteStatementWithContext.Lock()
	mock.calls.BatchExecuteStatementWithContext = append(mock.calls.BatchExecuteStatementWithContext, callInfo)
	lockDynamoDBAPIMockBatchExecuteStatementWithContext.Unlock()
	return mock.BatchExecuteStatementWithContextFunc(in1, in2, in3...)
}

// BatchExecuteStatementWithContextCalls gets all the calls that were made to BatchExecuteStatementWithContext.
// Check the length with:
//     len(mockedDynamoDBAPI.BatchExecuteStatementWithContextCalls())
func (mock *DynamoDBAPIMock) BatchExecuteStatementWithContextCalls() []struct {
	In1 context.Context
	In2 *dynamodb.BatchExecuteStatementInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *dynamodb.BatchExecuteStatementInput
		In3 []request.Option
	}
	lockDynamoDBAPIMockBatchExecuteStatementWithContext.RLock()
	calls = mock.calls.BatchExecuteStatementWithContext
	lockDynamoDBAPIMockBatchExecuteStatementWithContext.RUnlock()
	return calls
}

// BatchGetItem calls BatchGetItemFunc.
func (mock *DynamoDBAPIMock) BatchGetItem(in1 *dynamodb.BatchGetItemInput) (*dynamodb.BatchGetItemOutput, error) {
	if mock.BatchGetItemFunc == nil {
		panic("DynamoDBAPIMock.BatchGetItemFunc: method is nil but DynamoDBAPI.BatchGetItem was just called")
	}
	callInfo := struct {
		In1 *dynamodb.BatchGetItemInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockBatchGetItem.Lock()
	mock.calls.BatchGetItem = append(mock.calls.BatchGetItem, callInfo)
	lockDynamoDBAPIMockBatchGetItem.Unlock()
	return mock.BatchGetItemFunc(in1)
}

// BatchGetItemCalls gets all the calls that were made to BatchGetItem.
// Check the length with:
//     len(mockedDynamoDBAPI.BatchGetItemCalls())
func (mock *DynamoDBAPIMock) BatchGetItemCalls() []struct {
	In1 *dynamodb.BatchGetItemInput
} {
	var calls []struct {
		In1 *dynamodb.BatchGetItemInput
	}
	lockDynamoDBAPIMockBatchGetItem.RLock()
	calls = mock.calls.BatchGetItem
	lockDynamoDBAPIMockBatchGetItem.RUnlock()
	return calls
}

// BatchGetItemPages calls BatchGetItemPagesFunc.
func (mock *DynamoDBAPIMock) BatchGetItemPages(in1 *dynamodb.BatchGetItemInput, in2 func(*dynamodb.BatchGetItemOutput, bool) bool) error {
	if mock.BatchGetItemPagesFunc == nil {
		panic("DynamoDBAPIMock.BatchGetItemPagesFunc: method is nil but DynamoDBAPI.BatchGetItemPages was just called")
	}
	callInfo := struct {
		In1 *dynamodb.BatchGetItemInput
		In2 func(*dynamodb.BatchGetItemOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockDynamoDBAPIMockBatchGetItemPages.Lock()
	mock.calls.BatchGetItemPages = append(mock.calls.BatchGetItemPages, callInfo)
	lockDynamoDBAPIMockBatchGetItemPages.Unlock()
	return mock.BatchGetItemPagesFunc(in1, in2)
}

// BatchGetItemPagesCalls gets all the calls that were made to BatchGetItemPages.
// Check the length with:
//     len(mockedDynamoDBAPI.BatchGetItemPagesCalls())
func (mock *DynamoDBAPIMock) BatchGetItemPagesCalls() []struct {
	In1 *dynamodb.BatchGetItemInput
	In2 func(*dynamodb.BatchGetItemOutput, bool) bool
} {
	var calls []struct {
		In1 *dynamodb.BatchGetItemInput
		In2 func(*dynamodb.BatchGetItemOutput, bool) bool
	}
	lockDynamoDBAPIMockBatchGetItemPages.RLock()
	calls = mock.calls.BatchGetItemPages
	lockDynamoDBAPIMockBatchGetItemPages.RUnlock()
	return calls
}

// BatchGetItemPagesWithContext calls BatchGetItemPagesWithContextFunc.
func (mock *DynamoDBAPIMock) BatchGetItemPagesWithContext(in1 context.Context, in2 *dynamodb.BatchGetItemInput, in3 func(*dynamodb.BatchGetItemOutput, bool) bool, in4 ...request.Option) error {
	if mock.BatchGetItemPagesWithContextFunc == nil {
		panic("DynamoDBAPIMock.BatchGetItemPagesWithContextFunc: method is nil but DynamoDBAPI.BatchGetItemPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *dynamodb.BatchGetItemInput
		In3 func(*dynamodb.BatchGetItemOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockDynamoDBAPIMockBatchGetItemPagesWithContext.Lock()
	mock.calls.BatchGetItemPagesWithContext = append(mock.calls.BatchGetItemPagesWithContext, callInfo)
	lockDynamoDBAPIMockBatchGetItemPagesWithContext.Unlock()
	return mock.BatchGetItemPagesWithContextFunc(in1, in2, in3, in4...)
}

// BatchGetItemPagesWithContextCalls gets all the calls that were made to BatchGetItemPagesWithContext.
// Check the length with:
//     len(mockedDynamoDBAPI.BatchGetItemPagesWithContextCalls())
func (mock *DynamoDBAPIMock) BatchGetItemPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *dynamodb.BatchGetItemInput
	In3 func(*dynamodb.BatchGetItemOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *dynamodb.BatchGetItemInput
		In3 func(*dynamodb.BatchGetItemOutput, bool) bool
		In4 []request.Option
	}
	lockDynamoDBAPIMockBatchGetItemPagesWithContext.RLock()
	calls = mock.calls.BatchGetItemPagesWithContext
	lockDynamoDBAPIMockBatchGetItemPagesWithContext.RUnlock()
	return calls
}

// BatchGetItemRequest calls BatchGetItemRequestFunc.
func (mock *DynamoDBAPIMock) BatchGetItemRequest(in1 *dynamodb.BatchGetItemInput) (*request.Request, *dynamodb.BatchGetItemOutput) {
	if mock.BatchGetItemRequestFunc == nil {
		panic("DynamoDBAPIMock.BatchGetItemRequestFunc: method is nil but DynamoDBAPI.BatchGetItemRequest was just called")
	}
	callInfo := struct {
		In1 *dynamodb.BatchGetItemInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockBatchGetItemRequest.Lock()
	mock.calls.BatchGetItemRequest = append(mock.calls.BatchGetItemRequest, callInfo)
	lockDynamoDBAPIMockBatchGetItemRequest.Unlock()
	return mock.BatchGetItemRequestFunc(in1)
}

// BatchGetItemRequestCalls gets all the calls that were made to BatchGetItemRequest.
// Check the length with:
//     len(mockedDynamoDBAPI.BatchGetItemRequestCalls())
func (mock *DynamoDBAPIMock) BatchGetItemRequestCalls() []struct {
	In1 *dynamodb.BatchGetItemInput
} {
	var calls []struct {
		In1 *dynamodb.BatchGetItemInput
	}
	lockDynamoDBAPIMockBatchGetItemRequest.RLock()
	calls = mock.calls.BatchGetItemRequest
	lockDynamoDBAPIMockBatchGetItemRequest.RUnlock()
	return calls
}

// BatchGetItemWithContext calls BatchGetItemWithContextFunc.
func (mock *DynamoDBAPIMock) BatchGetItemWithContext(in1 context.Context, in2 *dynamodb.BatchGetItemInput, in3 ...request.Option) (*dynamodb.BatchGetItemOutput, error) {
	if mock.BatchGetItemWithContextFunc == nil {
		panic("DynamoDBAPIMock.BatchGetItemWithContextFunc: method is nil but DynamoDBAPI.BatchGetItemWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *dynamodb.BatchGetItemInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockDynamoDBAPIMockBatchGetItemWithContext.Lock()
	mock.calls.BatchGetItemWithContext = append(mock.calls.BatchGetItemWithContext, callInfo)
	lockDynamoDBAPIMockBatchGetItemWithContext.Unlock()
	return mock.BatchGetItemWithContextFunc(in1, in2, in3...)
}

// BatchGetItemWithContextCalls gets all the calls that were made to BatchGetItemWithContext.
// Check the length with:
//     len(mockedDynamoDBAPI.BatchGetItemWithContextCalls())
func (mock *DynamoDBAPIMock) BatchGetItemWithContextCalls() []struct {
	In1 context.Context
	In2 *dynamodb.BatchGetItemInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *dynamodb.BatchGetItemInput
		In3 []request.Option
	}
	lockDynamoDBAPIMockBatchGetItemWithContext.RLock()
	calls = mock.calls.BatchGetItemWithContext
	lockDynamoDBAPIMockBatchGetItemWithContext.RUnlock()
	return calls
}

// BatchWriteItem calls BatchWriteItemFunc.
func (mock *DynamoDBAPIMock) BatchWriteItem(in1 *dynamodb.BatchWriteItemInput) (*dynamodb.BatchWriteItemOutput, error) {
	if mock.BatchWriteItemFunc == nil {
		panic("DynamoDBAPIMock.BatchWriteItemFunc: method is nil but DynamoDBAPI.BatchWriteItem was just called")
	}
	callInfo := struct {
		In1 *dynamodb.BatchWriteItemInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockBatchWriteItem.Lock()
	mock.calls.BatchWriteItem = append(mock.calls.BatchWriteItem, callInfo)
	lockDynamoDBAPIMockBatchWriteItem.Unlock()
	return mock.BatchWriteItemFunc(in1)
}

// BatchWriteItemCalls gets all the calls that were made to BatchWriteItem.
// Check the length with:
//     len(mockedDynamoDBAPI.BatchWriteItemCalls())
func (mock *DynamoDBAPIMock) BatchWriteItemCalls() []struct {
	In1 *dynamodb.BatchWriteItemInput
} {
	var calls []struct {
		In1 *dynamodb.BatchWriteItemInput
	}
	lockDynamoDBAPIMockBatchWriteItem.RLock()
	calls = mock.calls.BatchWriteItem
	lockDynamoDBAPIMockBatchWriteItem.RUnlock()
	return calls
}

// BatchWriteItemRequest calls BatchWriteItemRequestFunc.
func (mock *DynamoDBAPIMock) BatchWriteItemRequest(in1 *dynamodb.BatchWriteItemInput) (*request.Request, *dynamodb.BatchWriteItemOutput) {
	if mock.BatchWriteItemRequestFunc == nil {
		panic("DynamoDBAPIMock.BatchWriteItemRequestFunc: method is nil but DynamoDBAPI.BatchWriteItemRequest was just called")
	}
	callInfo := struct {
		In1 *dynamodb.BatchWriteItemInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockBatchWriteItemRequest.Lock()
	mock.calls.BatchWriteItemRequest = append(mock.calls.BatchWriteItemRequest, callInfo)
	lockDynamoDBAPIMockBatchWriteItemRequest.Unlock()
	return mock.BatchWriteItemRequestFunc(in1)
}

// BatchWriteItemRequestCalls gets all the calls that were made to BatchWriteItemRequest.
// Check the length with:
//     len(mockedDynamoDBAPI.BatchWriteItemRequestCalls())
func (mock *DynamoDBAPIMock) BatchWriteItemRequestCalls() []struct {
	In1 *dynamodb.BatchWriteItemInput
} {
	var calls []struct {
		In1 *dynamodb.BatchWriteItemInput
	}
	lockDynamoDBAPIMockBatchWriteItemRequest.RLock()
	calls = mock.calls.BatchWriteItemRequest
	lockDynamoDBAPIMockBatchWriteItemRequest.RUnlock()
	return calls
}

// BatchWriteItemWithContext calls BatchWriteItemWithContextFunc.
func (mock *DynamoDBAPIMock) BatchWriteItemWithContext(in1 context.Context, in2 *dynamodb.BatchWriteItemInput, in3 ...request.Option) (*dynamodb.BatchWriteItemOutput, error) {
	if mock.BatchWriteItemWithContextFunc == nil {
		panic("DynamoDBAPIMock.BatchWriteItemWithContextFunc: method is nil but DynamoDBAPI.BatchWriteItemWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *dynamodb.BatchWriteItemInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockDynamoDBAPIMockBatchWriteItemWithContext.Lock()
	mock.calls.BatchWriteItemWithContext = append(mock.calls.BatchWriteItemWithContext, callInfo)
	lockDynamoDBAPIMockBatchWriteItemWithContext.Unlock()
	return mock.BatchWriteItemWithContextFunc(in1, in2, in3...)
}

// BatchWriteItemWithContextCalls gets all the calls that were made to BatchWriteItemWithContext.
// Check the length with:
//     len(mockedDynamoDBAPI.BatchWriteItemWithContextCalls())
func (mock *DynamoDBAPIMock) BatchWriteItemWithContextCalls() []struct {
	In1 context.Context
	In2 *dynamodb.BatchWriteItemInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *dynamodb.BatchWriteItemInput
		In3 []request.Option
	}
	lockDynamoDBAPIMockBatchWriteItemWithContext.RLock()
	calls = mock.calls.BatchWriteItemWithContext
	lockDynamoDBAPIMockBatchWriteItemWithContext.RUnlock()
	return calls
}

// CreateBackup calls CreateBackupFunc.
func (mock *DynamoDBAPIMock) CreateBackup(in1 *dynamodb.CreateBackupInput) (*dynamodb.CreateBackupOutput, error) {
	if mock.CreateBackupFunc == nil {
		panic("DynamoDBAPIMock.CreateBackupFunc: method is nil but DynamoDBAPI.CreateBackup was just called")
	}
	callInfo := struct {
		In1 *dynamodb.CreateBackupInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockCreateBackup.Lock()
	mock.calls.CreateBackup = append(mock.calls.CreateBackup, callInfo)
	lockDynamoDBAPIMockCreateBackup.Unlock()
	return mock.CreateBackupFunc(in1)
}

// CreateBackupCalls gets all the calls that were made to CreateBackup.
// Check the length with:
//     len(mockedDynamoDBAPI.CreateBackupCalls())
func (mock *DynamoDBAPIMock) CreateBackupCalls() []struct {
	In1 *dynamodb.CreateBackupInput
} {
	var calls []struct {
		In1 *dynamodb.CreateBackupInput
	}
	lockDynamoDBAPIMockCreateBackup.RLock()
	calls = mock.calls.CreateBackup
	lockDynamoDBAPIMockCreateBackup.RUnlock()
	return calls
}

// CreateBackupRequest calls CreateBackupRequestFunc.
func (mock *DynamoDBAPIMock) CreateBackupRequest(in1 *dynamodb.CreateBackupInput) (*request.Request, *dynamodb.CreateBackupOutput) {
	if mock.CreateBackupRequestFunc == nil {
		panic("DynamoDBAPIMock.CreateBackupRequestFunc: method is nil but DynamoDBAPI.CreateBackupRequest was just called")
	}
	callInfo := struct {
		In1 *dynamodb.CreateBackupInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockCreateBackupRequest.Lock()
	mock.calls.CreateBackupRequest = append(mock.calls.CreateBackupRequest, callInfo)
	lockDynamoDBAPIMockCreateBackupRequest.Unlock()
	return mock.CreateBackupRequestFunc(in1)
}

// CreateBackupRequestCalls gets all the calls that were made to CreateBackupRequest.
// Check the length with:
//     len(mockedDynamoDBAPI.CreateBackupRequestCalls())
func (mock *DynamoDBAPIMock) CreateBackupRequestCalls() []struct {
	In1 *dynamodb.CreateBackupInput
} {
	var calls []struct {
		In1 *dynamodb.CreateBackupInput
	}
	lockDynamoDBAPIMockCreateBackupRequest.RLock()
	calls = mock.calls.CreateBackupRequest
	lockDynamoDBAPIMockCreateBackupRequest.RUnlock()
	return calls
}

// CreateBackupWithContext calls CreateBackupWithContextFunc.
func (mock *DynamoDBAPIMock) CreateBackupWithContext(in1 context.Context, in2 *dynamodb.CreateBackupInput, in3 ...request.Option) (*dynamodb.CreateBackupOutput, error) {
	if mock.CreateBackupWithContextFunc == nil {
		panic("DynamoDBAPIMock.CreateBackupWithContextFunc: method is nil but DynamoDBAPI.CreateBackupWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *dynamodb.CreateBackupInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockDynamoDBAPIMockCreateBackupWithContext.Lock()
	mock.calls.CreateBackupWithContext = append(mock.calls.CreateBackupWithContext, callInfo)
	lockDynamoDBAPIMockCreateBackupWithContext.Unlock()
	return mock.CreateBackupWithContextFunc(in1, in2, in3...)
}

// CreateBackupWithContextCalls gets all the calls that were made to CreateBackupWithContext.
// Check the length with:
//     len(mockedDynamoDBAPI.CreateBackupWithContextCalls())
func (mock *DynamoDBAPIMock) CreateBackupWithContextCalls() []struct {
	In1 context.Context
	In2 *dynamodb.CreateBackupInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *dynamodb.CreateBackupInput
		In3 []request.Option
	}
	lockDynamoDBAPIMockCreateBackupWithContext.RLock()
	calls = mock.calls.CreateBackupWithContext
	lockDynamoDBAPIMockCreateBackupWithContext.RUnlock()
	return calls
}

// CreateGlobalTable calls CreateGlobalTableFunc.
func (mock *DynamoDBAPIMock) CreateGlobalTable(in1 *dynamodb.CreateGlobalTableInput) (*dynamodb.CreateGlobalTableOutput, error) {
	if mock.CreateGlobalTableFunc == nil {
		panic("DynamoDBAPIMock.CreateGlobalTableFunc: method is nil but DynamoDBAPI.CreateGlobalTable was just called")
	}
	callInfo := struct {
		In1 *dynamodb.CreateGlobalTableInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockCreateGlobalTable.Lock()
	mock.calls.CreateGlobalTable = append(mock.calls.CreateGlobalTable, callInfo)
	lockDynamoDBAPIMockCreateGlobalTable.Unlock()
	return mock.CreateGlobalTableFunc(in1)
}

// CreateGlobalTableCalls gets all the calls that were made to CreateGlobalTable.
// Check the length with:
//     len(mockedDynamoDBAPI.CreateGlobalTableCalls())
func (mock *DynamoDBAPIMock) CreateGlobalTableCalls() []struct {
	In1 *dynamodb.CreateGlobalTableInput
} {
	var calls []struct {
		In1 *dynamodb.CreateGlobalTableInput
	}
	lockDynamoDBAPIMockCreateGlobalTable.RLock()
	calls = mock.calls.CreateGlobalTable
	lockDynamoDBAPIMockCreateGlobalTable.RUnlock()
	return calls
}

// CreateGlobalTableRequest calls CreateGlobalTableRequestFunc.
func (mock *DynamoDBAPIMock) CreateGlobalTableRequest(in1 *dynamodb.CreateGlobalTableInput) (*request.Request, *dynamodb.CreateGlobalTableOutput) {
	if mock.CreateGlobalTableRequestFunc == nil {
		panic("DynamoDBAPIMock.CreateGlobalTableRequestFunc: method is nil but DynamoDBAPI.CreateGlobalTableRequest was just called")
	}
	callInfo := struct {
		In1 *dynamodb.CreateGlobalTableInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockCreateGlobalTableRequest.Lock()
	mock.calls.CreateGlobalTableRequest = append(mock.calls.CreateGlobalTableRequest, callInfo)
	lockDynamoDBAPIMockCreateGlobalTableRequest.Unlock()
	return mock.CreateGlobalTableRequestFunc(in1)
}

// CreateGlobalTableRequestCalls gets all the calls that were made to CreateGlobalTableRequest.
// Check the length with:
//     len(mockedDynamoDBAPI.CreateGlobalTableRequestCalls())
func (mock *DynamoDBAPIMock) CreateGlobalTableRequestCalls() []struct {
	In1 *dynamodb.CreateGlobalTableInput
} {
	var calls []struct {
		In1 *dynamodb.CreateGlobalTableInput
	}
	lockDynamoDBAPIMockCreateGlobalTableRequest.RLock()
	calls = mock.calls.CreateGlobalTableRequest
	lockDynamoDBAPIMockCreateGlobalTableRequest.RUnlock()
	return calls
}

// CreateGlobalTableWithContext calls CreateGlobalTableWithContextFunc.
func (mock *DynamoDBAPIMock) CreateGlobalTableWithContext(in1 context.Context, in2 *dynamodb.CreateGlobalTableInput, in3 ...request.Option) (*dynamodb.CreateGlobalTableOutput, error) {
	if mock.CreateGlobalTableWithContextFunc == nil {
		panic("DynamoDBAPIMock.CreateGlobalTableWithContextFunc: method is nil but DynamoDBAPI.CreateGlobalTableWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *dynamodb.CreateGlobalTableInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockDynamoDBAPIMockCreateGlobalTableWithContext.Lock()
	mock.calls.CreateGlobalTableWithContext = append(mock.calls.CreateGlobalTableWithContext, callInfo)
	lockDynamoDBAPIMockCreateGlobalTableWithContext.Unlock()
	return mock.CreateGlobalTableWithContextFunc(in1, in2, in3...)
}

// CreateGlobalTableWithContextCalls gets all the calls that were made to CreateGlobalTableWithContext.
// Check the length with:
//     len(mockedDynamoDBAPI.CreateGlobalTableWithContextCalls())
func (mock *DynamoDBAPIMock) CreateGlobalTableWithContextCalls() []struct {
	In1 context.Context
	In2 *dynamodb.CreateGlobalTableInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *dynamodb.CreateGlobalTableInput
		In3 []request.Option
	}
	lockDynamoDBAPIMockCreateGlobalTableWithContext.RLock()
	calls = mock.calls.CreateGlobalTableWithContext
	lockDynamoDBAPIMockCreateGlobalTableWithContext.RUnlock()
	return calls
}

// CreateTable calls CreateTableFunc.
func (mock *DynamoDBAPIMock) CreateTable(in1 *dynamodb.CreateTableInput) (*dynamodb.CreateTableOutput, error) {
	if mock.CreateTableFunc == nil {
		panic("DynamoDBAPIMock.CreateTableFunc: method is nil but DynamoDBAPI.CreateTable was just called")
	}
	callInfo := struct {
		In1 *dynamodb.CreateTableInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockCreateTable.Lock()
	mock.calls.CreateTable = append(mock.calls.CreateTable, callInfo)
	lockDynamoDBAPIMockCreateTable.Unlock()
	return mock.CreateTableFunc(in1)
}

// CreateTableCalls gets all the calls that were made to CreateTable.
// Check the length with:
//     len(mockedDynamoDBAPI.CreateTableCalls())
func (mock *DynamoDBAPIMock) CreateTableCalls() []struct {
	In1 *dynamodb.CreateTableInput
} {
	var calls []struct {
		In1 *dynamodb.CreateTableInput
	}
	lockDynamoDBAPIMockCreateTable.RLock()
	calls = mock.calls.CreateTable
	lockDynamoDBAPIMockCreateTable.RUnlock()
	return calls
}

// CreateTableRequest calls CreateTableRequestFunc.
func (mock *DynamoDBAPIMock) CreateTableRequest(in1 *dynamodb.CreateTableInput) (*request.Request, *dynamodb.CreateTableOutput) {
	if mock.CreateTableRequestFunc == nil {
		panic("DynamoDBAPIMock.CreateTableRequestFunc: method is nil but DynamoDBAPI.CreateTableRequest was just called")
	}
	callInfo := struct {
		In1 *dynamodb.CreateTableInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockCreateTableRequest.Lock()
	mock.calls.CreateTableRequest = append(mock.calls.CreateTableRequest, callInfo)
	lockDynamoDBAPIMockCreateTableRequest.Unlock()
	return mock.CreateTableRequestFunc(in1)
}

// CreateTableRequestCalls gets all the calls that were made to CreateTableRequest.
// Check the length with:
//     len(mockedDynamoDBAPI.CreateTableRequestCalls())
func (mock *DynamoDBAPIMock) CreateTableRequestCalls() []struct {
	In1 *dynamodb.CreateTableInput
} {
	var calls []struct {
		In1 *dynamodb.CreateTableInput
	}
	lockDynamoDBAPIMockCreateTableRequest.RLock()
	calls = mock.calls.CreateTableRequest
	lockDynamoDBAPIMockCreateTableRequest.RUnlock()
	return calls
}

// CreateTableWithContext calls CreateTableWithContextFunc.
func (mock *DynamoDBAPIMock) CreateTableWithContext(in1 context.Context, in2 *dynamodb.CreateTableInput, in3 ...request.Option) (*dynamodb.CreateTableOutput, error) {
	if mock.CreateTableWithContextFunc == nil {
		panic("DynamoDBAPIMock.CreateTableWithContextFunc: method is nil but DynamoDBAPI.CreateTableWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *dynamodb.CreateTableInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockDynamoDBAPIMockCreateTableWithContext.Lock()
	mock.calls.CreateTableWithContext = append(mock.calls.CreateTableWithContext, callInfo)
	lockDynamoDBAPIMockCreateTableWithContext.Unlock()
	return mock.CreateTableWithContextFunc(in1, in2, in3...)
}

// CreateTableWithContextCalls gets all the calls that were made to CreateTableWithContext.
// Check the length with:
//     len(mockedDynamoDBAPI.CreateTableWithContextCalls())
func (mock *DynamoDBAPIMock) CreateTableWithContextCalls() []struct {
	In1 context.Context
	In2 *dynamodb.CreateTableInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *dynamodb.CreateTableInput
		In3 []request.Option
	}
	lockDynamoDBAPIMockCreateTableWithContext.RLock()
	calls = mock.calls.CreateTableWithContext
	lockDynamoDBAPIMockCreateTableWithContext.RUnlock()
	return calls
}

// DeleteBackup calls DeleteBackupFunc.
func (mock *DynamoDBAPIMock) DeleteBackup(in1 *dynamodb.DeleteBackupInput) (*dynamodb.DeleteBackupOutput, error) {
	if mock.DeleteBackupFunc == nil {
		panic("DynamoDBAPIMock.DeleteBackupFunc: method is nil but DynamoDBAPI.DeleteBackup was just called")
	}
	callInfo := struct {
		In1 *dynamodb.DeleteBackupInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockDeleteBackup.Lock()
	mock.calls.DeleteBackup = append(mock.calls.DeleteBackup, callInfo)
	lockDynamoDBAPIMockDeleteBackup.Unlock()
	return mock.DeleteBackupFunc(in1)
}

// DeleteBackupCalls gets all the calls that were made to DeleteBackup.
// Check the length with:
//     len(mockedDynamoDBAPI.DeleteBackupCalls())
func (mock *DynamoDBAPIMock) DeleteBackupCalls() []struct {
	In1 *dynamodb.DeleteBackupInput
} {
	var calls []struct {
		In1 *dynamodb.DeleteBackupInput
	}
	lockDynamoDBAPIMockDeleteBackup.RLock()
	calls = mock.calls.DeleteBackup
	lockDynamoDBAPIMockDeleteBackup.RUnlock()
	return calls
}

// DeleteBackupRequest calls DeleteBackupRequestFunc.
func (mock *DynamoDBAPIMock) DeleteBackupRequest(in1 *dynamodb.DeleteBackupInput) (*request.Request, *dynamodb.DeleteBackupOutput) {
	if mock.DeleteBackupRequestFunc == nil {
		panic("DynamoDBAPIMock.DeleteBackupRequestFunc: method is nil but DynamoDBAPI.DeleteBackupRequest was just called")
	}
	callInfo := struct {
		In1 *dynamodb.DeleteBackupInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockDeleteBackupRequest.Lock()
	mock.calls.DeleteBackupRequest = append(mock.calls.DeleteBackupRequest, callInfo)
	lockDynamoDBAPIMockDeleteBackupRequest.Unlock()
	return mock.DeleteBackupRequestFunc(in1)
}

// DeleteBackupRequestCalls gets all the calls that were made to DeleteBackupRequest.
// Check the length with:
//     len(mockedDynamoDBAPI.DeleteBackupRequestCalls())
func (mock *DynamoDBAPIMock) DeleteBackupRequestCalls() []struct {
	In1 *dynamodb.DeleteBackupInput
} {
	var calls []struct {
		In1 *dynamodb.DeleteBackupInput
	}
	lockDynamoDBAPIMockDeleteBackupRequest.RLock()
	calls = mock.calls.DeleteBackupRequest
	lockDynamoDBAPIMockDeleteBackupRequest.RUnlock()
	return calls
}

// DeleteBackupWithContext calls DeleteBackupWithContextFunc.
func (mock *DynamoDBAPIMock) DeleteBackupWithContext(in1 context.Context, in2 *dynamodb.DeleteBackupInput, in3 ...request.Option) (*dynamodb.DeleteBackupOutput, error) {
	if mock.DeleteBackupWithContextFunc == nil {
		panic("DynamoDBAPIMock.DeleteBackupWithContextFunc: method is nil but DynamoDBAPI.DeleteBackupWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *dynamodb.DeleteBackupInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockDynamoDBAPIMockDeleteBackupWithContext.Lock()
	mock.calls.DeleteBackupWithContext = append(mock.calls.DeleteBackupWithContext, callInfo)
	lockDynamoDBAPIMockDeleteBackupWithContext.Unlock()
	return mock.DeleteBackupWithContextFunc(in1, in2, in3...)
}

// DeleteBackupWithContextCalls gets all the calls that were made to DeleteBackupWithContext.
// Check the length with:
//     len(mockedDynamoDBAPI.DeleteBackupWithContextCalls())
func (mock *DynamoDBAPIMock) DeleteBackupWithContextCalls() []struct {
	In1 context.Context
	In2 *dynamodb.DeleteBackupInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *dynamodb.DeleteBackupInput
		In3 []request.Option
	}
	lockDynamoDBAPIMockDeleteBackupWithContext.RLock()
	calls = mock.calls.DeleteBackupWithContext
	lockDynamoDBAPIMockDeleteBackupWithContext.RUnlock()
	return calls
}

// DeleteItem calls DeleteItemFunc.
func (mock *DynamoDBAPIMock) DeleteItem(in1 *dynamodb.DeleteItemInput) (*dynamodb.DeleteItemOutput, error) {
	if mock.DeleteItemFunc == nil {
		panic("DynamoDBAPIMock.DeleteItemFunc: method is nil but DynamoDBAPI.DeleteItem was just called")
	}
	callInfo := struct {
		In1 *dynamodb.DeleteItemInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockDeleteItem.Lock()
	mock.calls.DeleteItem = append(mock.calls.DeleteItem, callInfo)
	lockDynamoDBAPIMockDeleteItem.Unlock()
	return mock.DeleteItemFunc(in1)
}

// DeleteItemCalls gets all the calls that were made to DeleteItem.
// Check the length with:
//     len(mockedDynamoDBAPI.DeleteItemCalls())
func (mock *DynamoDBAPIMock) DeleteItemCalls() []struct {
	In1 *dynamodb.DeleteItemInput
} {
	var calls []struct {
		In1 *dynamodb.DeleteItemInput
	}
	lockDynamoDBAPIMockDeleteItem.RLock()
	calls = mock.calls.DeleteItem
	lockDynamoDBAPIMockDeleteItem.RUnlock()
	return calls
}

// DeleteItemRequest calls DeleteItemRequestFunc.
func (mock *DynamoDBAPIMock) DeleteItemRequest(in1 *dynamodb.DeleteItemInput) (*request.Request, *dynamodb.DeleteItemOutput) {
	if mock.DeleteItemRequestFunc == nil {
		panic("DynamoDBAPIMock.DeleteItemRequestFunc: method is nil but DynamoDBAPI.DeleteItemRequest was just called")
	}
	callInfo := struct {
		In1 *dynamodb.DeleteItemInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockDeleteItemRequest.Lock()
	mock.calls.DeleteItemRequest = append(mock.calls.DeleteItemRequest, callInfo)
	lockDynamoDBAPIMockDeleteItemRequest.Unlock()
	return mock.DeleteItemRequestFunc(in1)
}

// DeleteItemRequestCalls gets all the calls that were made to DeleteItemRequest.
// Check the length with:
//     len(mockedDynamoDBAPI.DeleteItemRequestCalls())
func (mock *DynamoDBAPIMock) DeleteItemRequestCalls() []struct {
	In1 *dynamodb.DeleteItemInput
} {
	var calls []struct {
		In1 *dynamodb.DeleteItemInput
	}
	lockDynamoDBAPIMockDeleteItemRequest.RLock()
	calls = mock.calls.DeleteItemRequest
	lockDynamoDBAPIMockDeleteItemRequest.RUnlock()
	return calls
}

// DeleteItemWithContext calls DeleteItemWithContextFunc.
func (mock *DynamoDBAPIMock) DeleteItemWithContext(in1 context.Context, in2 *dynamodb.DeleteItemInput, in3 ...request.Option) (*dynamodb.DeleteItemOutput, error) {
	if mock.DeleteItemWithContextFunc == nil {
		panic("DynamoDBAPIMock.DeleteItemWithContextFunc: method is nil but DynamoDBAPI.DeleteItemWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *dynamodb.DeleteItemInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockDynamoDBAPIMockDeleteItemWithContext.Lock()
	mock.calls.DeleteItemWithContext = append(mock.calls.DeleteItemWithContext, callInfo)
	lockDynamoDBAPIMockDeleteItemWithContext.Unlock()
	return mock.DeleteItemWithContextFunc(in1, in2, in3...)
}

// DeleteItemWithContextCalls gets all the calls that were made to DeleteItemWithContext.
// Check the length with:
//     len(mockedDynamoDBAPI.DeleteItemWithContextCalls())
func (mock *DynamoDBAPIMock) DeleteItemWithContextCalls() []struct {
	In1 context.Context
	In2 *dynamodb.DeleteItemInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *dynamodb.DeleteItemInput
		In3 []request.Option
	}
	lockDynamoDBAPIMockDeleteItemWithContext.RLock()
	calls = mock.calls.DeleteItemWithContext
	lockDynamoDBAPIMockDeleteItemWithContext.RUnlock()
	return calls
}

// DeleteTable calls DeleteTableFunc.
func (mock *DynamoDBAPIMock) DeleteTable(in1 *dynamodb.DeleteTableInput) (*dynamodb.DeleteTableOutput, error) {
	if mock.DeleteTableFunc == nil {
		panic("DynamoDBAPIMock.DeleteTableFunc: method is nil but DynamoDBAPI.DeleteTable was just called")
	}
	callInfo := struct {
		In1 *dynamodb.DeleteTableInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockDeleteTable.Lock()
	mock.calls.DeleteTable = append(mock.calls.DeleteTable, callInfo)
	lockDynamoDBAPIMockDeleteTable.Unlock()
	return mock.DeleteTableFunc(in1)
}

// DeleteTableCalls gets all the calls that were made to DeleteTable.
// Check the length with:
//     len(mockedDynamoDBAPI.DeleteTableCalls())
func (mock *DynamoDBAPIMock) DeleteTableCalls() []struct {
	In1 *dynamodb.DeleteTableInput
} {
	var calls []struct {
		In1 *dynamodb.DeleteTableInput
	}
	lockDynamoDBAPIMockDeleteTable.RLock()
	calls = mock.calls.DeleteTable
	lockDynamoDBAPIMockDeleteTable.RUnlock()
	return calls
}

// DeleteTableRequest calls DeleteTableRequestFunc.
func (mock *DynamoDBAPIMock) DeleteTableRequest(in1 *dynamodb.DeleteTableInput) (*request.Request, *dynamodb.DeleteTableOutput) {
	if mock.DeleteTableRequestFunc == nil {
		panic("DynamoDBAPIMock.DeleteTableRequestFunc: method is nil but DynamoDBAPI.DeleteTableRequest was just called")
	}
	callInfo := struct {
		In1 *dynamodb.DeleteTableInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockDeleteTableRequest.Lock()
	mock.calls.DeleteTableRequest = append(mock.calls.DeleteTableRequest, callInfo)
	lockDynamoDBAPIMockDeleteTableRequest.Unlock()
	return mock.DeleteTableRequestFunc(in1)
}

// DeleteTableRequestCalls gets all the calls that were made to DeleteTableRequest.
// Check the length with:
//     len(mockedDynamoDBAPI.DeleteTableRequestCalls())
func (mock *DynamoDBAPIMock) DeleteTableRequestCalls() []struct {
	In1 *dynamodb.DeleteTableInput
} {
	var calls []struct {
		In1 *dynamodb.DeleteTableInput
	}
	lockDynamoDBAPIMockDeleteTableRequest.RLock()
	calls = mock.calls.DeleteTableRequest
	lockDynamoDBAPIMockDeleteTableRequest.RUnlock()
	return calls
}

// DeleteTableWithContext calls DeleteTableWithContextFunc.
func (mock *DynamoDBAPIMock) DeleteTableWithContext(in1 context.Context, in2 *dynamodb.DeleteTableInput, in3 ...request.Option) (*dynamodb.DeleteTableOutput, error) {
	if mock.DeleteTableWithContextFunc == nil {
		panic("DynamoDBAPIMock.DeleteTableWithContextFunc: method is nil but DynamoDBAPI.DeleteTableWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *dynamodb.DeleteTableInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockDynamoDBAPIMockDeleteTableWithContext.Lock()
	mock.calls.DeleteTableWithContext = append(mock.calls.DeleteTableWithContext, callInfo)
	lockDynamoDBAPIMockDeleteTableWithContext.Unlock()
	return mock.DeleteTableWithContextFunc(in1, in2, in3...)
}

// DeleteTableWithContextCalls gets all the calls that were made to DeleteTableWithContext.
// Check the length with:
//     len(mockedDynamoDBAPI.DeleteTableWithContextCalls())
func (mock *DynamoDBAPIMock) DeleteTableWithContextCalls() []struct {
	In1 context.Context
	In2 *dynamodb.DeleteTableInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *dynamodb.DeleteTableInput
		In3 []request.Option
	}
	lockDynamoDBAPIMockDeleteTableWithContext.RLock()
	calls = mock.calls.DeleteTableWithContext
	lockDynamoDBAPIMockDeleteTableWithContext.RUnlock()
	return calls
}

// DescribeBackup calls DescribeBackupFunc.
func (mock *DynamoDBAPIMock) DescribeBackup(in1 *dynamodb.DescribeBackupInput) (*dynamodb.DescribeBackupOutput, error) {
	if mock.DescribeBackupFunc == nil {
		panic("DynamoDBAPIMock.DescribeBackupFunc: method is nil but DynamoDBAPI.DescribeBackup was just called")
	}
	callInfo := struct {
		In1 *dynamodb.DescribeBackupInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockDescribeBackup.Lock()
	mock.calls.DescribeBackup = append(mock.calls.DescribeBackup, callInfo)
	lockDynamoDBAPIMockDescribeBackup.Unlock()
	return mock.DescribeBackupFunc(in1)
}

// DescribeBackupCalls gets all the calls that were made to DescribeBackup.
// Check the length with:
//     len(mockedDynamoDBAPI.DescribeBackupCalls())
func (mock *DynamoDBAPIMock) DescribeBackupCalls() []struct {
	In1 *dynamodb.DescribeBackupInput
} {
	var calls []struct {
		In1 *dynamodb.DescribeBackupInput
	}
	lockDynamoDBAPIMockDescribeBackup.RLock()
	calls = mock.calls.DescribeBackup
	lockDynamoDBAPIMockDescribeBackup.RUnlock()
	return calls
}

// DescribeBackupRequest calls DescribeBackupRequestFunc.
func (mock *DynamoDBAPIMock) DescribeBackupRequest(in1 *dynamodb.DescribeBackupInput) (*request.Request, *dynamodb.DescribeBackupOutput) {
	if mock.DescribeBackupRequestFunc == nil {
		panic("DynamoDBAPIMock.DescribeBackupRequestFunc: method is nil but DynamoDBAPI.DescribeBackupRequest was just called")
	}
	callInfo := struct {
		In1 *dynamodb.DescribeBackupInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockDescribeBackupRequest.Lock()
	mock.calls.DescribeBackupRequest = append(mock.calls.DescribeBackupRequest, callInfo)
	lockDynamoDBAPIMockDescribeBackupRequest.Unlock()
	return mock.DescribeBackupRequestFunc(in1)
}

// DescribeBackupRequestCalls gets all the calls that were made to DescribeBackupRequest.
// Check the length with:
//     len(mockedDynamoDBAPI.DescribeBackupRequestCalls())
func (mock *DynamoDBAPIMock) DescribeBackupRequestCalls() []struct {
	In1 *dynamodb.DescribeBackupInput
} {
	var calls []struct {
		In1 *dynamodb.DescribeBackupInput
	}
	lockDynamoDBAPIMockDescribeBackupRequest.RLock()
	calls = mock.calls.DescribeBackupRequest
	lockDynamoDBAPIMockDescribeBackupRequest.RUnlock()
	return calls
}

// DescribeBackupWithContext calls DescribeBackupWithContextFunc.
func (mock *DynamoDBAPIMock) DescribeBackupWithContext(in1 context.Context, in2 *dynamodb.DescribeBackupInput, in3 ...request.Option) (*dynamodb.DescribeBackupOutput, error) {
	if mock.DescribeBackupWithContextFunc == nil {
		panic("DynamoDBAPIMock.DescribeBackupWithContextFunc: method is nil but DynamoDBAPI.DescribeBackupWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *dynamodb.DescribeBackupInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockDynamoDBAPIMockDescribeBackupWithContext.Lock()
	mock.calls.DescribeBackupWithContext = append(mock.calls.DescribeBackupWithContext, callInfo)
	lockDynamoDBAPIMockDescribeBackupWithContext.Unlock()
	return mock.DescribeBackupWithContextFunc(in1, in2, in3...)
}

// DescribeBackupWithContextCalls gets all the calls that were made to DescribeBackupWithContext.
// Check the length with:
//     len(mockedDynamoDBAPI.DescribeBackupWithContextCalls())
func (mock *DynamoDBAPIMock) DescribeBackupWithContextCalls() []struct {
	In1 context.Context
	In2 *dynamodb.DescribeBackupInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *dynamodb.DescribeBackupInput
		In3 []request.Option
	}
	lockDynamoDBAPIMockDescribeBackupWithContext.RLock()
	calls = mock.calls.DescribeBackupWithContext
	lockDynamoDBAPIMockDescribeBackupWithContext.RUnlock()
	return calls
}

// DescribeContinuousBackups calls DescribeContinuousBackupsFunc.
func (mock *DynamoDBAPIMock) DescribeContinuousBackups(in1 *dynamodb.DescribeContinuousBackupsInput) (*dynamodb.DescribeContinuousBackupsOutput, error) {
	if mock.DescribeContinuousBackupsFunc == nil {
		panic("DynamoDBAPIMock.DescribeContinuousBackupsFunc: method is nil but DynamoDBAPI.DescribeContinuousBackups was just called")
	}
	callInfo := struct {
		In1 *dynamodb.DescribeContinuousBackupsInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockDescribeContinuousBackups.Lock()
	mock.calls.DescribeContinuousBackups = append(mock.calls.DescribeContinuousBackups, callInfo)
	lockDynamoDBAPIMockDescribeContinuousBackups.Unlock()
	return mock.DescribeContinuousBackupsFunc(in1)
}

// DescribeContinuousBackupsCalls gets all the calls that were made to DescribeContinuousBackups.
// Check the length with:
//     len(mockedDynamoDBAPI.DescribeContinuousBackupsCalls())
func (mock *DynamoDBAPIMock) DescribeContinuousBackupsCalls() []struct {
	In1 *dynamodb.DescribeContinuousBackupsInput
} {
	var calls []struct {
		In1 *dynamodb.DescribeContinuousBackupsInput
	}
	lockDynamoDBAPIMockDescribeContinuousBackups.RLock()
	calls = mock.calls.DescribeContinuousBackups
	lockDynamoDBAPIMockDescribeContinuousBackups.RUnlock()
	return calls
}

// DescribeContinuousBackupsRequest calls DescribeContinuousBackupsRequestFunc.
func (mock *DynamoDBAPIMock) DescribeContinuousBackupsRequest(in1 *dynamodb.DescribeContinuousBackupsInput) (*request.Request, *dynamodb.DescribeContinuousBackupsOutput) {
	if mock.DescribeContinuousBackupsRequestFunc == nil {
		panic("DynamoDBAPIMock.DescribeContinuousBackupsRequestFunc: method is nil but DynamoDBAPI.DescribeContinuousBackupsRequest was just called")
	}
	callInfo := struct {
		In1 *dynamodb.DescribeContinuousBackupsInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockDescribeContinuousBackupsRequest.Lock()
	mock.calls.DescribeContinuousBackupsRequest = append(mock.calls.DescribeContinuousBackupsRequest, callInfo)
	lockDynamoDBAPIMockDescribeContinuousBackupsRequest.Unlock()
	return mock.DescribeContinuousBackupsRequestFunc(in1)
}

// DescribeContinuousBackupsRequestCalls gets all the calls that were made to DescribeContinuousBackupsRequest.
// Check the length with:
//     len(mockedDynamoDBAPI.DescribeContinuousBackupsRequestCalls())
func (mock *DynamoDBAPIMock) DescribeContinuousBackupsRequestCalls() []struct {
	In1 *dynamodb.DescribeContinuousBackupsInput
} {
	var calls []struct {
		In1 *dynamodb.DescribeContinuousBackupsInput
	}
	lockDynamoDBAPIMockDescribeContinuousBackupsRequest.RLock()
	calls = mock.calls.DescribeContinuousBackupsRequest
	lockDynamoDBAPIMockDescribeContinuousBackupsRequest.RUnlock()
	return calls
}

// DescribeContinuousBackupsWithContext calls DescribeContinuousBackupsWithContextFunc.
func (mock *DynamoDBAPIMock) DescribeContinuousBackupsWithContext(in1 context.Context, in2 *dynamodb.DescribeContinuousBackupsInput, in3 ...request.Option) (*dynamodb.DescribeContinuousBackupsOutput, error) {
	if mock.DescribeContinuousBackupsWithContextFunc == nil {
		panic("DynamoDBAPIMock.DescribeContinuousBackupsWithContextFunc: method is nil but DynamoDBAPI.DescribeContinuousBackupsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *dynamodb.DescribeContinuousBackupsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockDynamoDBAPIMockDescribeContinuousBackupsWithContext.Lock()
	mock.calls.DescribeContinuousBackupsWithContext = append(mock.calls.DescribeContinuousBackupsWithContext, callInfo)
	lockDynamoDBAPIMockDescribeContinuousBackupsWithContext.Unlock()
	return mock.DescribeContinuousBackupsWithContextFunc(in1, in2, in3...)
}

// DescribeContinuousBackupsWithContextCalls gets all the calls that were made to DescribeContinuousBackupsWithContext.
// Check the length with:
//     len(mockedDynamoDBAPI.DescribeContinuousBackupsWithContextCalls())
func (mock *DynamoDBAPIMock) DescribeContinuousBackupsWithContextCalls() []struct {
	In1 context.Context
	In2 *dynamodb.DescribeContinuousBackupsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *dynamodb.DescribeContinuousBackupsInput
		In3 []request.Option
	}
	lockDynamoDBAPIMockDescribeContinuousBackupsWithContext.RLock()
	calls = mock.calls.DescribeContinuousBackupsWithContext
	lockDynamoDBAPIMockDescribeContinuousBackupsWithContext.RUnlock()
	return calls
}

// DescribeContributorInsights calls DescribeContributorInsightsFunc.
func (mock *DynamoDBAPIMock) DescribeContributorInsights(in1 *dynamodb.DescribeContributorInsightsInput) (*dynamodb.DescribeContributorInsightsOutput, error) {
	if mock.DescribeContributorInsightsFunc == nil {
		panic("DynamoDBAPIMock.DescribeContributorInsightsFunc: method is nil but DynamoDBAPI.DescribeContributorInsights was just called")
	}
	callInfo := struct {
		In1 *dynamodb.DescribeContributorInsightsInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockDescribeContributorInsights.Lock()
	mock.calls.DescribeContributorInsights = append(mock.calls.DescribeContributorInsights, callInfo)
	lockDynamoDBAPIMockDescribeContributorInsights.Unlock()
	return mock.DescribeContributorInsightsFunc(in1)
}

// DescribeContributorInsightsCalls gets all the calls that were made to DescribeContributorInsights.
// Check the length with:
//     len(mockedDynamoDBAPI.DescribeContributorInsightsCalls())
func (mock *DynamoDBAPIMock) DescribeContributorInsightsCalls() []struct {
	In1 *dynamodb.DescribeContributorInsightsInput
} {
	var calls []struct {
		In1 *dynamodb.DescribeContributorInsightsInput
	}
	lockDynamoDBAPIMockDescribeContributorInsights.RLock()
	calls = mock.calls.DescribeContributorInsights
	lockDynamoDBAPIMockDescribeContributorInsights.RUnlock()
	return calls
}

// DescribeContributorInsightsRequest calls DescribeContributorInsightsRequestFunc.
func (mock *DynamoDBAPIMock) DescribeContributorInsightsRequest(in1 *dynamodb.DescribeContributorInsightsInput) (*request.Request, *dynamodb.DescribeContributorInsightsOutput) {
	if mock.DescribeContributorInsightsRequestFunc == nil {
		panic("DynamoDBAPIMock.DescribeContributorInsightsRequestFunc: method is nil but DynamoDBAPI.DescribeContributorInsightsRequest was just called")
	}
	callInfo := struct {
		In1 *dynamodb.DescribeContributorInsightsInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockDescribeContributorInsightsRequest.Lock()
	mock.calls.DescribeContributorInsightsRequest = append(mock.calls.DescribeContributorInsightsRequest, callInfo)
	lockDynamoDBAPIMockDescribeContributorInsightsRequest.Unlock()
	return mock.DescribeContributorInsightsRequestFunc(in1)
}

// DescribeContributorInsightsRequestCalls gets all the calls that were made to DescribeContributorInsightsRequest.
// Check the length with:
//     len(mockedDynamoDBAPI.DescribeContributorInsightsRequestCalls())
func (mock *DynamoDBAPIMock) DescribeContributorInsightsRequestCalls() []struct {
	In1 *dynamodb.DescribeContributorInsightsInput
} {
	var calls []struct {
		In1 *dynamodb.DescribeContributorInsightsInput
	}
	lockDynamoDBAPIMockDescribeContributorInsightsRequest.RLock()
	calls = mock.calls.DescribeContributorInsightsRequest
	lockDynamoDBAPIMockDescribeContributorInsightsRequest.RUnlock()
	return calls
}

// DescribeContributorInsightsWithContext calls DescribeContributorInsightsWithContextFunc.
func (mock *DynamoDBAPIMock) DescribeContributorInsightsWithContext(in1 context.Context, in2 *dynamodb.DescribeContributorInsightsInput, in3 ...request.Option) (*dynamodb.DescribeContributorInsightsOutput, error) {
	if mock.DescribeContributorInsightsWithContextFunc == nil {
		panic("DynamoDBAPIMock.DescribeContributorInsightsWithContextFunc: method is nil but DynamoDBAPI.DescribeContributorInsightsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *dynamodb.DescribeContributorInsightsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockDynamoDBAPIMockDescribeContributorInsightsWithContext.Lock()
	mock.calls.DescribeContributorInsightsWithContext = append(mock.calls.DescribeContributorInsightsWithContext, callInfo)
	lockDynamoDBAPIMockDescribeContributorInsightsWithContext.Unlock()
	return mock.DescribeContributorInsightsWithContextFunc(in1, in2, in3...)
}

// DescribeContributorInsightsWithContextCalls gets all the calls that were made to DescribeContributorInsightsWithContext.
// Check the length with:
//     len(mockedDynamoDBAPI.DescribeContributorInsightsWithContextCalls())
func (mock *DynamoDBAPIMock) DescribeContributorInsightsWithContextCalls() []struct {
	In1 context.Context
	In2 *dynamodb.DescribeContributorInsightsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *dynamodb.DescribeContributorInsightsInput
		In3 []request.Option
	}
	lockDynamoDBAPIMockDescribeContributorInsightsWithContext.RLock()
	calls = mock.calls.DescribeContributorInsightsWithContext
	lockDynamoDBAPIMockDescribeContributorInsightsWithContext.RUnlock()
	return calls
}

// DescribeEndpoints calls DescribeEndpointsFunc.
func (mock *DynamoDBAPIMock) DescribeEndpoints(in1 *dynamodb.DescribeEndpointsInput) (*dynamodb.DescribeEndpointsOutput, error) {
	if mock.DescribeEndpointsFunc == nil {
		panic("DynamoDBAPIMock.DescribeEndpointsFunc: method is nil but DynamoDBAPI.DescribeEndpoints was just called")
	}
	callInfo := struct {
		In1 *dynamodb.DescribeEndpointsInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockDescribeEndpoints.Lock()
	mock.calls.DescribeEndpoints = append(mock.calls.DescribeEndpoints, callInfo)
	lockDynamoDBAPIMockDescribeEndpoints.Unlock()
	return mock.DescribeEndpointsFunc(in1)
}

// DescribeEndpointsCalls gets all the calls that were made to DescribeEndpoints.
// Check the length with:
//     len(mockedDynamoDBAPI.DescribeEndpointsCalls())
func (mock *DynamoDBAPIMock) DescribeEndpointsCalls() []struct {
	In1 *dynamodb.DescribeEndpointsInput
} {
	var calls []struct {
		In1 *dynamodb.DescribeEndpointsInput
	}
	lockDynamoDBAPIMockDescribeEndpoints.RLock()
	calls = mock.calls.DescribeEndpoints
	lockDynamoDBAPIMockDescribeEndpoints.RUnlock()
	return calls
}

// DescribeEndpointsRequest calls DescribeEndpointsRequestFunc.
func (mock *DynamoDBAPIMock) DescribeEndpointsRequest(in1 *dynamodb.DescribeEndpointsInput) (*request.Request, *dynamodb.DescribeEndpointsOutput) {
	if mock.DescribeEndpointsRequestFunc == nil {
		panic("DynamoDBAPIMock.DescribeEndpointsRequestFunc: method is nil but DynamoDBAPI.DescribeEndpointsRequest was just called")
	}
	callInfo := struct {
		In1 *dynamodb.DescribeEndpointsInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockDescribeEndpointsRequest.Lock()
	mock.calls.DescribeEndpointsRequest = append(mock.calls.DescribeEndpointsRequest, callInfo)
	lockDynamoDBAPIMockDescribeEndpointsRequest.Unlock()
	return mock.DescribeEndpointsRequestFunc(in1)
}

// DescribeEndpointsRequestCalls gets all the calls that were made to DescribeEndpointsRequest.
// Check the length with:
//     len(mockedDynamoDBAPI.DescribeEndpointsRequestCalls())
func (mock *DynamoDBAPIMock) DescribeEndpointsRequestCalls() []struct {
	In1 *dynamodb.DescribeEndpointsInput
} {
	var calls []struct {
		In1 *dynamodb.DescribeEndpointsInput
	}
	lockDynamoDBAPIMockDescribeEndpointsRequest.RLock()
	calls = mock.calls.DescribeEndpointsRequest
	lockDynamoDBAPIMockDescribeEndpointsRequest.RUnlock()
	return calls
}

// DescribeEndpointsWithContext calls DescribeEndpointsWithContextFunc.
func (mock *DynamoDBAPIMock) DescribeEndpointsWithContext(in1 context.Context, in2 *dynamodb.DescribeEndpointsInput, in3 ...request.Option) (*dynamodb.DescribeEndpointsOutput, error) {
	if mock.DescribeEndpointsWithContextFunc == nil {
		panic("DynamoDBAPIMock.DescribeEndpointsWithContextFunc: method is nil but DynamoDBAPI.DescribeEndpointsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *dynamodb.DescribeEndpointsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockDynamoDBAPIMockDescribeEndpointsWithContext.Lock()
	mock.calls.DescribeEndpointsWithContext = append(mock.calls.DescribeEndpointsWithContext, callInfo)
	lockDynamoDBAPIMockDescribeEndpointsWithContext.Unlock()
	return mock.DescribeEndpointsWithContextFunc(in1, in2, in3...)
}

// DescribeEndpointsWithContextCalls gets all the calls that were made to DescribeEndpointsWithContext.
// Check the length with:
//     len(mockedDynamoDBAPI.DescribeEndpointsWithContextCalls())
func (mock *DynamoDBAPIMock) DescribeEndpointsWithContextCalls() []struct {
	In1 context.Context
	In2 *dynamodb.DescribeEndpointsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *dynamodb.DescribeEndpointsInput
		In3 []request.Option
	}
	lockDynamoDBAPIMockDescribeEndpointsWithContext.RLock()
	calls = mock.calls.DescribeEndpointsWithContext
	lockDynamoDBAPIMockDescribeEndpointsWithContext.RUnlock()
	return calls
}

// DescribeExport calls DescribeExportFunc.
func (mock *DynamoDBAPIMock) DescribeExport(in1 *dynamodb.DescribeExportInput) (*dynamodb.DescribeExportOutput, error) {
	if mock.DescribeExportFunc == nil {
		panic("DynamoDBAPIMock.DescribeExportFunc: method is nil but DynamoDBAPI.DescribeExport was just called")
	}
	callInfo := struct {
		In1 *dynamodb.DescribeExportInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockDescribeExport.Lock()
	mock.calls.DescribeExport = append(mock.calls.DescribeExport, callInfo)
	lockDynamoDBAPIMockDescribeExport.Unlock()
	return mock.DescribeExportFunc(in1)
}

// DescribeExportCalls gets all the calls that were made to DescribeExport.
// Check the length with:
//     len(mockedDynamoDBAPI.DescribeExportCalls())
func (mock *DynamoDBAPIMock) DescribeExportCalls() []struct {
	In1 *dynamodb.DescribeExportInput
} {
	var calls []struct {
		In1 *dynamodb.DescribeExportInput
	}
	lockDynamoDBAPIMockDescribeExport.RLock()
	calls = mock.calls.DescribeExport
	lockDynamoDBAPIMockDescribeExport.RUnlock()
	return calls
}

// DescribeExportRequest calls DescribeExportRequestFunc.
func (mock *DynamoDBAPIMock) DescribeExportRequest(in1 *dynamodb.DescribeExportInput) (*request.Request, *dynamodb.DescribeExportOutput) {
	if mock.DescribeExportRequestFunc == nil {
		panic("DynamoDBAPIMock.DescribeExportRequestFunc: method is nil but DynamoDBAPI.DescribeExportRequest was just called")
	}
	callInfo := struct {
		In1 *dynamodb.DescribeExportInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockDescribeExportRequest.Lock()
	mock.calls.DescribeExportRequest = append(mock.calls.DescribeExportRequest, callInfo)
	lockDynamoDBAPIMockDescribeExportRequest.Unlock()
	return mock.DescribeExportRequestFunc(in1)
}

// DescribeExportRequestCalls gets all the calls that were made to DescribeExportRequest.
// Check the length with:
//     len(mockedDynamoDBAPI.DescribeExportRequestCalls())
func (mock *DynamoDBAPIMock) DescribeExportRequestCalls() []struct {
	In1 *dynamodb.DescribeExportInput
} {
	var calls []struct {
		In1 *dynamodb.DescribeExportInput
	}
	lockDynamoDBAPIMockDescribeExportRequest.RLock()
	calls = mock.calls.DescribeExportRequest
	lockDynamoDBAPIMockDescribeExportRequest.RUnlock()
	return calls
}

// DescribeExportWithContext calls DescribeExportWithContextFunc.
func (mock *DynamoDBAPIMock) DescribeExportWithContext(in1 context.Context, in2 *dynamodb.DescribeExportInput, in3 ...request.Option) (*dynamodb.DescribeExportOutput, error) {
	if mock.DescribeExportWithContextFunc == nil {
		panic("DynamoDBAPIMock.DescribeExportWithContextFunc: method is nil but DynamoDBAPI.DescribeExportWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *dynamodb.DescribeExportInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockDynamoDBAPIMockDescribeExportWithContext.Lock()
	mock.calls.DescribeExportWithContext = append(mock.calls.DescribeExportWithContext, callInfo)
	lockDynamoDBAPIMockDescribeExportWithContext.Unlock()
	return mock.DescribeExportWithContextFunc(in1, in2, in3...)
}

// DescribeExportWithContextCalls gets all the calls that were made to DescribeExportWithContext.
// Check the length with:
//     len(mockedDynamoDBAPI.DescribeExportWithContextCalls())
func (mock *DynamoDBAPIMock) DescribeExportWithContextCalls() []struct {
	In1 context.Context
	In2 *dynamodb.DescribeExportInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *dynamodb.DescribeExportInput
		In3 []request.Option
	}
	lockDynamoDBAPIMockDescribeExportWithContext.RLock()
	calls = mock.calls.DescribeExportWithContext
	lockDynamoDBAPIMockDescribeExportWithContext.RUnlock()
	return calls
}

// DescribeGlobalTable calls DescribeGlobalTableFunc.
func (mock *DynamoDBAPIMock) DescribeGlobalTable(in1 *dynamodb.DescribeGlobalTableInput) (*dynamodb.DescribeGlobalTableOutput, error) {
	if mock.DescribeGlobalTableFunc == nil {
		panic("DynamoDBAPIMock.DescribeGlobalTableFunc: method is nil but DynamoDBAPI.DescribeGlobalTable was just called")
	}
	callInfo := struct {
		In1 *dynamodb.DescribeGlobalTableInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockDescribeGlobalTable.Lock()
	mock.calls.DescribeGlobalTable = append(mock.calls.DescribeGlobalTable, callInfo)
	lockDynamoDBAPIMockDescribeGlobalTable.Unlock()
	return mock.DescribeGlobalTableFunc(in1)
}

// DescribeGlobalTableCalls gets all the calls that were made to DescribeGlobalTable.
// Check the length with:
//     len(mockedDynamoDBAPI.DescribeGlobalTableCalls())
func (mock *DynamoDBAPIMock) DescribeGlobalTableCalls() []struct {
	In1 *dynamodb.DescribeGlobalTableInput
} {
	var calls []struct {
		In1 *dynamodb.DescribeGlobalTableInput
	}
	lockDynamoDBAPIMockDescribeGlobalTable.RLock()
	calls = mock.calls.DescribeGlobalTable
	lockDynamoDBAPIMockDescribeGlobalTable.RUnlock()
	return calls
}

// DescribeGlobalTableRequest calls DescribeGlobalTableRequestFunc.
func (mock *DynamoDBAPIMock) DescribeGlobalTableRequest(in1 *dynamodb.DescribeGlobalTableInput) (*request.Request, *dynamodb.DescribeGlobalTableOutput) {
	if mock.DescribeGlobalTableRequestFunc == nil {
		panic("DynamoDBAPIMock.DescribeGlobalTableRequestFunc: method is nil but DynamoDBAPI.DescribeGlobalTableRequest was just called")
	}
	callInfo := struct {
		In1 *dynamodb.DescribeGlobalTableInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockDescribeGlobalTableRequest.Lock()
	mock.calls.DescribeGlobalTableRequest = append(mock.calls.DescribeGlobalTableRequest, callInfo)
	lockDynamoDBAPIMockDescribeGlobalTableRequest.Unlock()
	return mock.DescribeGlobalTableRequestFunc(in1)
}

// DescribeGlobalTableRequestCalls gets all the calls that were made to DescribeGlobalTableRequest.
// Check the length with:
//     len(mockedDynamoDBAPI.DescribeGlobalTableRequestCalls())
func (mock *DynamoDBAPIMock) DescribeGlobalTableRequestCalls() []struct {
	In1 *dynamodb.DescribeGlobalTableInput
} {
	var calls []struct {
		In1 *dynamodb.DescribeGlobalTableInput
	}
	lockDynamoDBAPIMockDescribeGlobalTableRequest.RLock()
	calls = mock.calls.DescribeGlobalTableRequest
	lockDynamoDBAPIMockDescribeGlobalTableRequest.RUnlock()
	return calls
}

// DescribeGlobalTableSettings calls DescribeGlobalTableSettingsFunc.
func (mock *DynamoDBAPIMock) DescribeGlobalTableSettings(in1 *dynamodb.DescribeGlobalTableSettingsInput) (*dynamodb.DescribeGlobalTableSettingsOutput, error) {
	if mock.DescribeGlobalTableSettingsFunc == nil {
		panic("DynamoDBAPIMock.DescribeGlobalTableSettingsFunc: method is nil but DynamoDBAPI.DescribeGlobalTableSettings was just called")
	}
	callInfo := struct {
		In1 *dynamodb.DescribeGlobalTableSettingsInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockDescribeGlobalTableSettings.Lock()
	mock.calls.DescribeGlobalTableSettings = append(mock.calls.DescribeGlobalTableSettings, callInfo)
	lockDynamoDBAPIMockDescribeGlobalTableSettings.Unlock()
	return mock.DescribeGlobalTableSettingsFunc(in1)
}

// DescribeGlobalTableSettingsCalls gets all the calls that were made to DescribeGlobalTableSettings.
// Check the length with:
//     len(mockedDynamoDBAPI.DescribeGlobalTableSettingsCalls())
func (mock *DynamoDBAPIMock) DescribeGlobalTableSettingsCalls() []struct {
	In1 *dynamodb.DescribeGlobalTableSettingsInput
} {
	var calls []struct {
		In1 *dynamodb.DescribeGlobalTableSettingsInput
	}
	lockDynamoDBAPIMockDescribeGlobalTableSettings.RLock()
	calls = mock.calls.DescribeGlobalTableSettings
	lockDynamoDBAPIMockDescribeGlobalTableSettings.RUnlock()
	return calls
}

// DescribeGlobalTableSettingsRequest calls DescribeGlobalTableSettingsRequestFunc.
func (mock *DynamoDBAPIMock) DescribeGlobalTableSettingsRequest(in1 *dynamodb.DescribeGlobalTableSettingsInput) (*request.Request, *dynamodb.DescribeGlobalTableSettingsOutput) {
	if mock.DescribeGlobalTableSettingsRequestFunc == nil {
		panic("DynamoDBAPIMock.DescribeGlobalTableSettingsRequestFunc: method is nil but DynamoDBAPI.DescribeGlobalTableSettingsRequest was just called")
	}
	callInfo := struct {
		In1 *dynamodb.DescribeGlobalTableSettingsInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockDescribeGlobalTableSettingsRequest.Lock()
	mock.calls.DescribeGlobalTableSettingsRequest = append(mock.calls.DescribeGlobalTableSettingsRequest, callInfo)
	lockDynamoDBAPIMockDescribeGlobalTableSettingsRequest.Unlock()
	return mock.DescribeGlobalTableSettingsRequestFunc(in1)
}

// DescribeGlobalTableSettingsRequestCalls gets all the calls that were made to DescribeGlobalTableSettingsRequest.
// Check the length with:
//     len(mockedDynamoDBAPI.DescribeGlobalTableSettingsRequestCalls())
func (mock *DynamoDBAPIMock) DescribeGlobalTableSettingsRequestCalls() []struct {
	In1 *dynamodb.DescribeGlobalTableSettingsInput
} {
	var calls []struct {
		In1 *dynamodb.DescribeGlobalTableSettingsInput
	}
	lockDynamoDBAPIMockDescribeGlobalTableSettingsRequest.RLock()
	calls = mock.calls.DescribeGlobalTableSettingsRequest
	lockDynamoDBAPIMockDescribeGlobalTableSettingsRequest.RUnlock()
	return calls
}

// DescribeGlobalTableSettingsWithContext calls DescribeGlobalTableSettingsWithContextFunc.
func (mock *DynamoDBAPIMock) DescribeGlobalTableSettingsWithContext(in1 context.Context, in2 *dynamodb.DescribeGlobalTableSettingsInput, in3 ...request.Option) (*dynamodb.DescribeGlobalTableSettingsOutput, error) {
	if mock.DescribeGlobalTableSettingsWithContextFunc == nil {
		panic("DynamoDBAPIMock.DescribeGlobalTableSettingsWithContextFunc: method is nil but DynamoDBAPI.DescribeGlobalTableSettingsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *dynamodb.DescribeGlobalTableSettingsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockDynamoDBAPIMockDescribeGlobalTableSettingsWithContext.Lock()
	mock.calls.DescribeGlobalTableSettingsWithContext = append(mock.calls.DescribeGlobalTableSettingsWithContext, callInfo)
	lockDynamoDBAPIMockDescribeGlobalTableSettingsWithContext.Unlock()
	return mock.DescribeGlobalTableSettingsWithContextFunc(in1, in2, in3...)
}

// DescribeGlobalTableSettingsWithContextCalls gets all the calls that were made to DescribeGlobalTableSettingsWithContext.
// Check the length with:
//     len(mockedDynamoDBAPI.DescribeGlobalTableSettingsWithContextCalls())
func (mock *DynamoDBAPIMock) DescribeGlobalTableSettingsWithContextCalls() []struct {
	In1 context.Context
	In2 *dynamodb.DescribeGlobalTableSettingsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *dynamodb.DescribeGlobalTableSettingsInput
		In3 []request.Option
	}
	lockDynamoDBAPIMockDescribeGlobalTableSettingsWithContext.RLock()
	calls = mock.calls.DescribeGlobalTableSettingsWithContext
	lockDynamoDBAPIMockDescribeGlobalTableSettingsWithContext.RUnlock()
	return calls
}

// DescribeGlobalTableWithContext calls DescribeGlobalTableWithContextFunc.
func (mock *DynamoDBAPIMock) DescribeGlobalTableWithContext(in1 context.Context, in2 *dynamodb.DescribeGlobalTableInput, in3 ...request.Option) (*dynamodb.DescribeGlobalTableOutput, error) {
	if mock.DescribeGlobalTableWithContextFunc == nil {
		panic("DynamoDBAPIMock.DescribeGlobalTableWithContextFunc: method is nil but DynamoDBAPI.DescribeGlobalTableWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *dynamodb.DescribeGlobalTableInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockDynamoDBAPIMockDescribeGlobalTableWithContext.Lock()
	mock.calls.DescribeGlobalTableWithContext = append(mock.calls.DescribeGlobalTableWithContext, callInfo)
	lockDynamoDBAPIMockDescribeGlobalTableWithContext.Unlock()
	return mock.DescribeGlobalTableWithContextFunc(in1, in2, in3...)
}

// DescribeGlobalTableWithContextCalls gets all the calls that were made to DescribeGlobalTableWithContext.
// Check the length with:
//     len(mockedDynamoDBAPI.DescribeGlobalTableWithContextCalls())
func (mock *DynamoDBAPIMock) DescribeGlobalTableWithContextCalls() []struct {
	In1 context.Context
	In2 *dynamodb.DescribeGlobalTableInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *dynamodb.DescribeGlobalTableInput
		In3 []request.Option
	}
	lockDynamoDBAPIMockDescribeGlobalTableWithContext.RLock()
	calls = mock.calls.DescribeGlobalTableWithContext
	lockDynamoDBAPIMockDescribeGlobalTableWithContext.RUnlock()
	return calls
}

// DescribeKinesisStreamingDestination calls DescribeKinesisStreamingDestinationFunc.
func (mock *DynamoDBAPIMock) DescribeKinesisStreamingDestination(in1 *dynamodb.DescribeKinesisStreamingDestinationInput) (*dynamodb.DescribeKinesisStreamingDestinationOutput, error) {
	if mock.DescribeKinesisStreamingDestinationFunc == nil {
		panic("DynamoDBAPIMock.DescribeKinesisStreamingDestinationFunc: method is nil but DynamoDBAPI.DescribeKinesisStreamingDestination was just called")
	}
	callInfo := struct {
		In1 *dynamodb.DescribeKinesisStreamingDestinationInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockDescribeKinesisStreamingDestination.Lock()
	mock.calls.DescribeKinesisStreamingDestination = append(mock.calls.DescribeKinesisStreamingDestination, callInfo)
	lockDynamoDBAPIMockDescribeKinesisStreamingDestination.Unlock()
	return mock.DescribeKinesisStreamingDestinationFunc(in1)
}

// DescribeKinesisStreamingDestinationCalls gets all the calls that were made to DescribeKinesisStreamingDestination.
// Check the length with:
//     len(mockedDynamoDBAPI.DescribeKinesisStreamingDestinationCalls())
func (mock *DynamoDBAPIMock) DescribeKinesisStreamingDestinationCalls() []struct {
	In1 *dynamodb.DescribeKinesisStreamingDestinationInput
} {
	var calls []struct {
		In1 *dynamodb.DescribeKinesisStreamingDestinationInput
	}
	lockDynamoDBAPIMockDescribeKinesisStreamingDestination.RLock()
	calls = mock.calls.DescribeKinesisStreamingDestination
	lockDynamoDBAPIMockDescribeKinesisStreamingDestination.RUnlock()
	return calls
}

// DescribeKinesisStreamingDestinationRequest calls DescribeKinesisStreamingDestinationRequestFunc.
func (mock *DynamoDBAPIMock) DescribeKinesisStreamingDestinationRequest(in1 *dynamodb.DescribeKinesisStreamingDestinationInput) (*request.Request, *dynamodb.DescribeKinesisStreamingDestinationOutput) {
	if mock.DescribeKinesisStreamingDestinationRequestFunc == nil {
		panic("DynamoDBAPIMock.DescribeKinesisStreamingDestinationRequestFunc: method is nil but DynamoDBAPI.DescribeKinesisStreamingDestinationRequest was just called")
	}
	callInfo := struct {
		In1 *dynamodb.DescribeKinesisStreamingDestinationInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockDescribeKinesisStreamingDestinationRequest.Lock()
	mock.calls.DescribeKinesisStreamingDestinationRequest = append(mock.calls.DescribeKinesisStreamingDestinationRequest, callInfo)
	lockDynamoDBAPIMockDescribeKinesisStreamingDestinationRequest.Unlock()
	return mock.DescribeKinesisStreamingDestinationRequestFunc(in1)
}

// DescribeKinesisStreamingDestinationRequestCalls gets all the calls that were made to DescribeKinesisStreamingDestinationRequest.
// Check the length with:
//     len(mockedDynamoDBAPI.DescribeKinesisStreamingDestinationRequestCalls())
func (mock *DynamoDBAPIMock) DescribeKinesisStreamingDestinationRequestCalls() []struct {
	In1 *dynamodb.DescribeKinesisStreamingDestinationInput
} {
	var calls []struct {
		In1 *dynamodb.DescribeKinesisStreamingDestinationInput
	}
	lockDynamoDBAPIMockDescribeKinesisStreamingDestinationRequest.RLock()
	calls = mock.calls.DescribeKinesisStreamingDestinationRequest
	lockDynamoDBAPIMockDescribeKinesisStreamingDestinationRequest.RUnlock()
	return calls
}

// DescribeKinesisStreamingDestinationWithContext calls DescribeKinesisStreamingDestinationWithContextFunc.
func (mock *DynamoDBAPIMock) DescribeKinesisStreamingDestinationWithContext(in1 context.Context, in2 *dynamodb.DescribeKinesisStreamingDestinationInput, in3 ...request.Option) (*dynamodb.DescribeKinesisStreamingDestinationOutput, error) {
	if mock.DescribeKinesisStreamingDestinationWithContextFunc == nil {
		panic("DynamoDBAPIMock.DescribeKinesisStreamingDestinationWithContextFunc: method is nil but DynamoDBAPI.DescribeKinesisStreamingDestinationWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *dynamodb.DescribeKinesisStreamingDestinationInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockDynamoDBAPIMockDescribeKinesisStreamingDestinationWithContext.Lock()
	mock.calls.DescribeKinesisStreamingDestinationWithContext = append(mock.calls.DescribeKinesisStreamingDestinationWithContext, callInfo)
	lockDynamoDBAPIMockDescribeKinesisStreamingDestinationWithContext.Unlock()
	return mock.DescribeKinesisStreamingDestinationWithContextFunc(in1, in2, in3...)
}

// DescribeKinesisStreamingDestinationWithContextCalls gets all the calls that were made to DescribeKinesisStreamingDestinationWithContext.
// Check the length with:
//     len(mockedDynamoDBAPI.DescribeKinesisStreamingDestinationWithContextCalls())
func (mock *DynamoDBAPIMock) DescribeKinesisStreamingDestinationWithContextCalls() []struct {
	In1 context.Context
	In2 *dynamodb.DescribeKinesisStreamingDestinationInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *dynamodb.DescribeKinesisStreamingDestinationInput
		In3 []request.Option
	}
	lockDynamoDBAPIMockDescribeKinesisStreamingDestinationWithContext.RLock()
	calls = mock.calls.DescribeKinesisStreamingDestinationWithContext
	lockDynamoDBAPIMockDescribeKinesisStreamingDestinationWithContext.RUnlock()
	return calls
}

// DescribeLimits calls DescribeLimitsFunc.
func (mock *DynamoDBAPIMock) DescribeLimits(in1 *dynamodb.DescribeLimitsInput) (*dynamodb.DescribeLimitsOutput, error) {
	if mock.DescribeLimitsFunc == nil {
		panic("DynamoDBAPIMock.DescribeLimitsFunc: method is nil but DynamoDBAPI.DescribeLimits was just called")
	}
	callInfo := struct {
		In1 *dynamodb.DescribeLimitsInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockDescribeLimits.Lock()
	mock.calls.DescribeLimits = append(mock.calls.DescribeLimits, callInfo)
	lockDynamoDBAPIMockDescribeLimits.Unlock()
	return mock.DescribeLimitsFunc(in1)
}

// DescribeLimitsCalls gets all the calls that were made to DescribeLimits.
// Check the length with:
//     len(mockedDynamoDBAPI.DescribeLimitsCalls())
func (mock *DynamoDBAPIMock) DescribeLimitsCalls() []struct {
	In1 *dynamodb.DescribeLimitsInput
} {
	var calls []struct {
		In1 *dynamodb.DescribeLimitsInput
	}
	lockDynamoDBAPIMockDescribeLimits.RLock()
	calls = mock.calls.DescribeLimits
	lockDynamoDBAPIMockDescribeLimits.RUnlock()
	return calls
}

// DescribeLimitsRequest calls DescribeLimitsRequestFunc.
func (mock *DynamoDBAPIMock) DescribeLimitsRequest(in1 *dynamodb.DescribeLimitsInput) (*request.Request, *dynamodb.DescribeLimitsOutput) {
	if mock.DescribeLimitsRequestFunc == nil {
		panic("DynamoDBAPIMock.DescribeLimitsRequestFunc: method is nil but DynamoDBAPI.DescribeLimitsRequest was just called")
	}
	callInfo := struct {
		In1 *dynamodb.DescribeLimitsInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockDescribeLimitsRequest.Lock()
	mock.calls.DescribeLimitsRequest = append(mock.calls.DescribeLimitsRequest, callInfo)
	lockDynamoDBAPIMockDescribeLimitsRequest.Unlock()
	return mock.DescribeLimitsRequestFunc(in1)
}

// DescribeLimitsRequestCalls gets all the calls that were made to DescribeLimitsRequest.
// Check the length with:
//     len(mockedDynamoDBAPI.DescribeLimitsRequestCalls())
func (mock *DynamoDBAPIMock) DescribeLimitsRequestCalls() []struct {
	In1 *dynamodb.DescribeLimitsInput
} {
	var calls []struct {
		In1 *dynamodb.DescribeLimitsInput
	}
	lockDynamoDBAPIMockDescribeLimitsRequest.RLock()
	calls = mock.calls.DescribeLimitsRequest
	lockDynamoDBAPIMockDescribeLimitsRequest.RUnlock()
	return calls
}

// DescribeLimitsWithContext calls DescribeLimitsWithContextFunc.
func (mock *DynamoDBAPIMock) DescribeLimitsWithContext(in1 context.Context, in2 *dynamodb.DescribeLimitsInput, in3 ...request.Option) (*dynamodb.DescribeLimitsOutput, error) {
	if mock.DescribeLimitsWithContextFunc == nil {
		panic("DynamoDBAPIMock.DescribeLimitsWithContextFunc: method is nil but DynamoDBAPI.DescribeLimitsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *dynamodb.DescribeLimitsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockDynamoDBAPIMockDescribeLimitsWithContext.Lock()
	mock.calls.DescribeLimitsWithContext = append(mock.calls.DescribeLimitsWithContext, callInfo)
	lockDynamoDBAPIMockDescribeLimitsWithContext.Unlock()
	return mock.DescribeLimitsWithContextFunc(in1, in2, in3...)
}

// DescribeLimitsWithContextCalls gets all the calls that were made to DescribeLimitsWithContext.
// Check the length with:
//     len(mockedDynamoDBAPI.DescribeLimitsWithContextCalls())
func (mock *DynamoDBAPIMock) DescribeLimitsWithContextCalls() []struct {
	In1 context.Context
	In2 *dynamodb.DescribeLimitsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *dynamodb.DescribeLimitsInput
		In3 []request.Option
	}
	lockDynamoDBAPIMockDescribeLimitsWithContext.RLock()
	calls = mock.calls.DescribeLimitsWithContext
	lockDynamoDBAPIMockDescribeLimitsWithContext.RUnlock()
	return calls
}

// DescribeTable calls DescribeTableFunc.
func (mock *DynamoDBAPIMock) DescribeTable(in1 *dynamodb.DescribeTableInput) (*dynamodb.DescribeTableOutput, error) {
	if mock.DescribeTableFunc == nil {
		panic("DynamoDBAPIMock.DescribeTableFunc: method is nil but DynamoDBAPI.DescribeTable was just called")
	}
	callInfo := struct {
		In1 *dynamodb.DescribeTableInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockDescribeTable.Lock()
	mock.calls.DescribeTable = append(mock.calls.DescribeTable, callInfo)
	lockDynamoDBAPIMockDescribeTable.Unlock()
	return mock.DescribeTableFunc(in1)
}

// DescribeTableCalls gets all the calls that were made to DescribeTable.
// Check the length with:
//     len(mockedDynamoDBAPI.DescribeTableCalls())
func (mock *DynamoDBAPIMock) DescribeTableCalls() []struct {
	In1 *dynamodb.DescribeTableInput
} {
	var calls []struct {
		In1 *dynamodb.DescribeTableInput
	}
	lockDynamoDBAPIMockDescribeTable.RLock()
	calls = mock.calls.DescribeTable
	lockDynamoDBAPIMockDescribeTable.RUnlock()
	return calls
}

// DescribeTableReplicaAutoScaling calls DescribeTableReplicaAutoScalingFunc.
func (mock *DynamoDBAPIMock) DescribeTableReplicaAutoScaling(in1 *dynamodb.DescribeTableReplicaAutoScalingInput) (*dynamodb.DescribeTableReplicaAutoScalingOutput, error) {
	if mock.DescribeTableReplicaAutoScalingFunc == nil {
		panic("DynamoDBAPIMock.DescribeTableReplicaAutoScalingFunc: method is nil but DynamoDBAPI.DescribeTableReplicaAutoScaling was just called")
	}
	callInfo := struct {
		In1 *dynamodb.DescribeTableReplicaAutoScalingInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockDescribeTableReplicaAutoScaling.Lock()
	mock.calls.DescribeTableReplicaAutoScaling = append(mock.calls.DescribeTableReplicaAutoScaling, callInfo)
	lockDynamoDBAPIMockDescribeTableReplicaAutoScaling.Unlock()
	return mock.DescribeTableReplicaAutoScalingFunc(in1)
}

// DescribeTableReplicaAutoScalingCalls gets all the calls that were made to DescribeTableReplicaAutoScaling.
// Check the length with:
//     len(mockedDynamoDBAPI.DescribeTableReplicaAutoScalingCalls())
func (mock *DynamoDBAPIMock) DescribeTableReplicaAutoScalingCalls() []struct {
	In1 *dynamodb.DescribeTableReplicaAutoScalingInput
} {
	var calls []struct {
		In1 *dynamodb.DescribeTableReplicaAutoScalingInput
	}
	lockDynamoDBAPIMockDescribeTableReplicaAutoScaling.RLock()
	calls = mock.calls.DescribeTableReplicaAutoScaling
	lockDynamoDBAPIMockDescribeTableReplicaAutoScaling.RUnlock()
	return calls
}

// DescribeTableReplicaAutoScalingRequest calls DescribeTableReplicaAutoScalingRequestFunc.
func (mock *DynamoDBAPIMock) DescribeTableReplicaAutoScalingRequest(in1 *dynamodb.DescribeTableReplicaAutoScalingInput) (*request.Request, *dynamodb.DescribeTableReplicaAutoScalingOutput) {
	if mock.DescribeTableReplicaAutoScalingRequestFunc == nil {
		panic("DynamoDBAPIMock.DescribeTableReplicaAutoScalingRequestFunc: method is nil but DynamoDBAPI.DescribeTableReplicaAutoScalingRequest was just called")
	}
	callInfo := struct {
		In1 *dynamodb.DescribeTableReplicaAutoScalingInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockDescribeTableReplicaAutoScalingRequest.Lock()
	mock.calls.DescribeTableReplicaAutoScalingRequest = append(mock.calls.DescribeTableReplicaAutoScalingRequest, callInfo)
	lockDynamoDBAPIMockDescribeTableReplicaAutoScalingRequest.Unlock()
	return mock.DescribeTableReplicaAutoScalingRequestFunc(in1)
}

// DescribeTableReplicaAutoScalingRequestCalls gets all the calls that were made to DescribeTableReplicaAutoScalingRequest.
// Check the length with:
//     len(mockedDynamoDBAPI.DescribeTableReplicaAutoScalingRequestCalls())
func (mock *DynamoDBAPIMock) DescribeTableReplicaAutoScalingRequestCalls() []struct {
	In1 *dynamodb.DescribeTableReplicaAutoScalingInput
} {
	var calls []struct {
		In1 *dynamodb.DescribeTableReplicaAutoScalingInput
	}
	lockDynamoDBAPIMockDescribeTableReplicaAutoScalingRequest.RLock()
	calls = mock.calls.DescribeTableReplicaAutoScalingRequest
	lockDynamoDBAPIMockDescribeTableReplicaAutoScalingRequest.RUnlock()
	return calls
}

// DescribeTableReplicaAutoScalingWithContext calls DescribeTableReplicaAutoScalingWithContextFunc.
func (mock *DynamoDBAPIMock) DescribeTableReplicaAutoScalingWithContext(in1 context.Context, in2 *dynamodb.DescribeTableReplicaAutoScalingInput, in3 ...request.Option) (*dynamodb.DescribeTableReplicaAutoScalingOutput, error) {
	if mock.DescribeTableReplicaAutoScalingWithContextFunc == nil {
		panic("DynamoDBAPIMock.DescribeTableReplicaAutoScalingWithContextFunc: method is nil but DynamoDBAPI.DescribeTableReplicaAutoScalingWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *dynamodb.DescribeTableReplicaAutoScalingInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockDynamoDBAPIMockDescribeTableReplicaAutoScalingWithContext.Lock()
	mock.calls.DescribeTableReplicaAutoScalingWithContext = append(mock.calls.DescribeTableReplicaAutoScalingWithContext, callInfo)
	lockDynamoDBAPIMockDescribeTableReplicaAutoScalingWithContext.Unlock()
	return mock.DescribeTableReplicaAutoScalingWithContextFunc(in1, in2, in3...)
}

// DescribeTableReplicaAutoScalingWithContextCalls gets all the calls that were made to DescribeTableReplicaAutoScalingWithContext.
// Check the length with:
//     len(mockedDynamoDBAPI.DescribeTableReplicaAutoScalingWithContextCalls())
func (mock *DynamoDBAPIMock) DescribeTableReplicaAutoScalingWithContextCalls() []struct {
	In1 context.Context
	In2 *dynamodb.DescribeTableReplicaAutoScalingInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *dynamodb.DescribeTableReplicaAutoScalingInput
		In3 []request.Option
	}
	lockDynamoDBAPIMockDescribeTableReplicaAutoScalingWithContext.RLock()
	calls = mock.calls.DescribeTableReplicaAutoScalingWithContext
	lockDynamoDBAPIMockDescribeTableReplicaAutoScalingWithContext.RUnlock()
	return calls
}

// DescribeTableRequest calls DescribeTableRequestFunc.
func (mock *DynamoDBAPIMock) DescribeTableRequest(in1 *dynamodb.DescribeTableInput) (*request.Request, *dynamodb.DescribeTableOutput) {
	if mock.DescribeTableRequestFunc == nil {
		panic("DynamoDBAPIMock.DescribeTableRequestFunc: method is nil but DynamoDBAPI.DescribeTableRequest was just called")
	}
	callInfo := struct {
		In1 *dynamodb.DescribeTableInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockDescribeTableRequest.Lock()
	mock.calls.DescribeTableRequest = append(mock.calls.DescribeTableRequest, callInfo)
	lockDynamoDBAPIMockDescribeTableRequest.Unlock()
	return mock.DescribeTableRequestFunc(in1)
}

// DescribeTableRequestCalls gets all the calls that were made to DescribeTableRequest.
// Check the length with:
//     len(mockedDynamoDBAPI.DescribeTableRequestCalls())
func (mock *DynamoDBAPIMock) DescribeTableRequestCalls() []struct {
	In1 *dynamodb.DescribeTableInput
} {
	var calls []struct {
		In1 *dynamodb.DescribeTableInput
	}
	lockDynamoDBAPIMockDescribeTableRequest.RLock()
	calls = mock.calls.DescribeTableRequest
	lockDynamoDBAPIMockDescribeTableRequest.RUnlock()
	return calls
}

// DescribeTableWithContext calls DescribeTableWithContextFunc.
func (mock *DynamoDBAPIMock) DescribeTableWithContext(in1 context.Context, in2 *dynamodb.DescribeTableInput, in3 ...request.Option) (*dynamodb.DescribeTableOutput, error) {
	if mock.DescribeTableWithContextFunc == nil {
		panic("DynamoDBAPIMock.DescribeTableWithContextFunc: method is nil but DynamoDBAPI.DescribeTableWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *dynamodb.DescribeTableInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockDynamoDBAPIMockDescribeTableWithContext.Lock()
	mock.calls.DescribeTableWithContext = append(mock.calls.DescribeTableWithContext, callInfo)
	lockDynamoDBAPIMockDescribeTableWithContext.Unlock()
	return mock.DescribeTableWithContextFunc(in1, in2, in3...)
}

// DescribeTableWithContextCalls gets all the calls that were made to DescribeTableWithContext.
// Check the length with:
//     len(mockedDynamoDBAPI.DescribeTableWithContextCalls())
func (mock *DynamoDBAPIMock) DescribeTableWithContextCalls() []struct {
	In1 context.Context
	In2 *dynamodb.DescribeTableInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *dynamodb.DescribeTableInput
		In3 []request.Option
	}
	lockDynamoDBAPIMockDescribeTableWithContext.RLock()
	calls = mock.calls.DescribeTableWithContext
	lockDynamoDBAPIMockDescribeTableWithContext.RUnlock()
	return calls
}

// DescribeTimeToLive calls DescribeTimeToLiveFunc.
func (mock *DynamoDBAPIMock) DescribeTimeToLive(in1 *dynamodb.DescribeTimeToLiveInput) (*dynamodb.DescribeTimeToLiveOutput, error) {
	if mock.DescribeTimeToLiveFunc == nil {
		panic("DynamoDBAPIMock.DescribeTimeToLiveFunc: method is nil but DynamoDBAPI.DescribeTimeToLive was just called")
	}
	callInfo := struct {
		In1 *dynamodb.DescribeTimeToLiveInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockDescribeTimeToLive.Lock()
	mock.calls.DescribeTimeToLive = append(mock.calls.DescribeTimeToLive, callInfo)
	lockDynamoDBAPIMockDescribeTimeToLive.Unlock()
	return mock.DescribeTimeToLiveFunc(in1)
}

// DescribeTimeToLiveCalls gets all the calls that were made to DescribeTimeToLive.
// Check the length with:
//     len(mockedDynamoDBAPI.DescribeTimeToLiveCalls())
func (mock *DynamoDBAPIMock) DescribeTimeToLiveCalls() []struct {
	In1 *dynamodb.DescribeTimeToLiveInput
} {
	var calls []struct {
		In1 *dynamodb.DescribeTimeToLiveInput
	}
	lockDynamoDBAPIMockDescribeTimeToLive.RLock()
	calls = mock.calls.DescribeTimeToLive
	lockDynamoDBAPIMockDescribeTimeToLive.RUnlock()
	return calls
}

// DescribeTimeToLiveRequest calls DescribeTimeToLiveRequestFunc.
func (mock *DynamoDBAPIMock) DescribeTimeToLiveRequest(in1 *dynamodb.DescribeTimeToLiveInput) (*request.Request, *dynamodb.DescribeTimeToLiveOutput) {
	if mock.DescribeTimeToLiveRequestFunc == nil {
		panic("DynamoDBAPIMock.DescribeTimeToLiveRequestFunc: method is nil but DynamoDBAPI.DescribeTimeToLiveRequest was just called")
	}
	callInfo := struct {
		In1 *dynamodb.DescribeTimeToLiveInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockDescribeTimeToLiveRequest.Lock()
	mock.calls.DescribeTimeToLiveRequest = append(mock.calls.DescribeTimeToLiveRequest, callInfo)
	lockDynamoDBAPIMockDescribeTimeToLiveRequest.Unlock()
	return mock.DescribeTimeToLiveRequestFunc(in1)
}

// DescribeTimeToLiveRequestCalls gets all the calls that were made to DescribeTimeToLiveRequest.
// Check the length with:
//     len(mockedDynamoDBAPI.DescribeTimeToLiveRequestCalls())
func (mock *DynamoDBAPIMock) DescribeTimeToLiveRequestCalls() []struct {
	In1 *dynamodb.DescribeTimeToLiveInput
} {
	var calls []struct {
		In1 *dynamodb.DescribeTimeToLiveInput
	}
	lockDynamoDBAPIMockDescribeTimeToLiveRequest.RLock()
	calls = mock.calls.DescribeTimeToLiveRequest
	lockDynamoDBAPIMockDescribeTimeToLiveRequest.RUnlock()
	return calls
}

// DescribeTimeToLiveWithContext calls DescribeTimeToLiveWithContextFunc.
func (mock *DynamoDBAPIMock) DescribeTimeToLiveWithContext(in1 context.Context, in2 *dynamodb.DescribeTimeToLiveInput, in3 ...request.Option) (*dynamodb.DescribeTimeToLiveOutput, error) {
	if mock.DescribeTimeToLiveWithContextFunc == nil {
		panic("DynamoDBAPIMock.DescribeTimeToLiveWithContextFunc: method is nil but DynamoDBAPI.DescribeTimeToLiveWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *dynamodb.DescribeTimeToLiveInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockDynamoDBAPIMockDescribeTimeToLiveWithContext.Lock()
	mock.calls.DescribeTimeToLiveWithContext = append(mock.calls.DescribeTimeToLiveWithContext, callInfo)
	lockDynamoDBAPIMockDescribeTimeToLiveWithContext.Unlock()
	return mock.DescribeTimeToLiveWithContextFunc(in1, in2, in3...)
}

// DescribeTimeToLiveWithContextCalls gets all the calls that were made to DescribeTimeToLiveWithContext.
// Check the length with:
//     len(mockedDynamoDBAPI.DescribeTimeToLiveWithContextCalls())
func (mock *DynamoDBAPIMock) DescribeTimeToLiveWithContextCalls() []struct {
	In1 context.Context
	In2 *dynamodb.DescribeTimeToLiveInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *dynamodb.DescribeTimeToLiveInput
		In3 []request.Option
	}
	lockDynamoDBAPIMockDescribeTimeToLiveWithContext.RLock()
	calls = mock.calls.DescribeTimeToLiveWithContext
	lockDynamoDBAPIMockDescribeTimeToLiveWithContext.RUnlock()
	return calls
}

// DisableKinesisStreamingDestination calls DisableKinesisStreamingDestinationFunc.
func (mock *DynamoDBAPIMock) DisableKinesisStreamingDestination(in1 *dynamodb.DisableKinesisStreamingDestinationInput) (*dynamodb.DisableKinesisStreamingDestinationOutput, error) {
	if mock.DisableKinesisStreamingDestinationFunc == nil {
		panic("DynamoDBAPIMock.DisableKinesisStreamingDestinationFunc: method is nil but DynamoDBAPI.DisableKinesisStreamingDestination was just called")
	}
	callInfo := struct {
		In1 *dynamodb.DisableKinesisStreamingDestinationInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockDisableKinesisStreamingDestination.Lock()
	mock.calls.DisableKinesisStreamingDestination = append(mock.calls.DisableKinesisStreamingDestination, callInfo)
	lockDynamoDBAPIMockDisableKinesisStreamingDestination.Unlock()
	return mock.DisableKinesisStreamingDestinationFunc(in1)
}

// DisableKinesisStreamingDestinationCalls gets all the calls that were made to DisableKinesisStreamingDestination.
// Check the length with:
//     len(mockedDynamoDBAPI.DisableKinesisStreamingDestinationCalls())
func (mock *DynamoDBAPIMock) DisableKinesisStreamingDestinationCalls() []struct {
	In1 *dynamodb.DisableKinesisStreamingDestinationInput
} {
	var calls []struct {
		In1 *dynamodb.DisableKinesisStreamingDestinationInput
	}
	lockDynamoDBAPIMockDisableKinesisStreamingDestination.RLock()
	calls = mock.calls.DisableKinesisStreamingDestination
	lockDynamoDBAPIMockDisableKinesisStreamingDestination.RUnlock()
	return calls
}

// DisableKinesisStreamingDestinationRequest calls DisableKinesisStreamingDestinationRequestFunc.
func (mock *DynamoDBAPIMock) DisableKinesisStreamingDestinationRequest(in1 *dynamodb.DisableKinesisStreamingDestinationInput) (*request.Request, *dynamodb.DisableKinesisStreamingDestinationOutput) {
	if mock.DisableKinesisStreamingDestinationRequestFunc == nil {
		panic("DynamoDBAPIMock.DisableKinesisStreamingDestinationRequestFunc: method is nil but DynamoDBAPI.DisableKinesisStreamingDestinationRequest was just called")
	}
	callInfo := struct {
		In1 *dynamodb.DisableKinesisStreamingDestinationInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockDisableKinesisStreamingDestinationRequest.Lock()
	mock.calls.DisableKinesisStreamingDestinationRequest = append(mock.calls.DisableKinesisStreamingDestinationRequest, callInfo)
	lockDynamoDBAPIMockDisableKinesisStreamingDestinationRequest.Unlock()
	return mock.DisableKinesisStreamingDestinationRequestFunc(in1)
}

// DisableKinesisStreamingDestinationRequestCalls gets all the calls that were made to DisableKinesisStreamingDestinationRequest.
// Check the length with:
//     len(mockedDynamoDBAPI.DisableKinesisStreamingDestinationRequestCalls())
func (mock *DynamoDBAPIMock) DisableKinesisStreamingDestinationRequestCalls() []struct {
	In1 *dynamodb.DisableKinesisStreamingDestinationInput
} {
	var calls []struct {
		In1 *dynamodb.DisableKinesisStreamingDestinationInput
	}
	lockDynamoDBAPIMockDisableKinesisStreamingDestinationRequest.RLock()
	calls = mock.calls.DisableKinesisStreamingDestinationRequest
	lockDynamoDBAPIMockDisableKinesisStreamingDestinationRequest.RUnlock()
	return calls
}

// DisableKinesisStreamingDestinationWithContext calls DisableKinesisStreamingDestinationWithContextFunc.
func (mock *DynamoDBAPIMock) DisableKinesisStreamingDestinationWithContext(in1 context.Context, in2 *dynamodb.DisableKinesisStreamingDestinationInput, in3 ...request.Option) (*dynamodb.DisableKinesisStreamingDestinationOutput, error) {
	if mock.DisableKinesisStreamingDestinationWithContextFunc == nil {
		panic("DynamoDBAPIMock.DisableKinesisStreamingDestinationWithContextFunc: method is nil but DynamoDBAPI.DisableKinesisStreamingDestinationWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *dynamodb.DisableKinesisStreamingDestinationInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockDynamoDBAPIMockDisableKinesisStreamingDestinationWithContext.Lock()
	mock.calls.DisableKinesisStreamingDestinationWithContext = append(mock.calls.DisableKinesisStreamingDestinationWithContext, callInfo)
	lockDynamoDBAPIMockDisableKinesisStreamingDestinationWithContext.Unlock()
	return mock.DisableKinesisStreamingDestinationWithContextFunc(in1, in2, in3...)
}

// DisableKinesisStreamingDestinationWithContextCalls gets all the calls that were made to DisableKinesisStreamingDestinationWithContext.
// Check the length with:
//     len(mockedDynamoDBAPI.DisableKinesisStreamingDestinationWithContextCalls())
func (mock *DynamoDBAPIMock) DisableKinesisStreamingDestinationWithContextCalls() []struct {
	In1 context.Context
	In2 *dynamodb.DisableKinesisStreamingDestinationInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *dynamodb.DisableKinesisStreamingDestinationInput
		In3 []request.Option
	}
	lockDynamoDBAPIMockDisableKinesisStreamingDestinationWithContext.RLock()
	calls = mock.calls.DisableKinesisStreamingDestinationWithContext
	lockDynamoDBAPIMockDisableKinesisStreamingDestinationWithContext.RUnlock()
	return calls
}

// EnableKinesisStreamingDestination calls EnableKinesisStreamingDestinationFunc.
func (mock *DynamoDBAPIMock) EnableKinesisStreamingDestination(in1 *dynamodb.EnableKinesisStreamingDestinationInput) (*dynamodb.EnableKinesisStreamingDestinationOutput, error) {
	if mock.EnableKinesisStreamingDestinationFunc == nil {
		panic("DynamoDBAPIMock.EnableKinesisStreamingDestinationFunc: method is nil but DynamoDBAPI.EnableKinesisStreamingDestination was just called")
	}
	callInfo := struct {
		In1 *dynamodb.EnableKinesisStreamingDestinationInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockEnableKinesisStreamingDestination.Lock()
	mock.calls.EnableKinesisStreamingDestination = append(mock.calls.EnableKinesisStreamingDestination, callInfo)
	lockDynamoDBAPIMockEnableKinesisStreamingDestination.Unlock()
	return mock.EnableKinesisStreamingDestinationFunc(in1)
}

// EnableKinesisStreamingDestinationCalls gets all the calls that were made to EnableKinesisStreamingDestination.
// Check the length with:
//     len(mockedDynamoDBAPI.EnableKinesisStreamingDestinationCalls())
func (mock *DynamoDBAPIMock) EnableKinesisStreamingDestinationCalls() []struct {
	In1 *dynamodb.EnableKinesisStreamingDestinationInput
} {
	var calls []struct {
		In1 *dynamodb.EnableKinesisStreamingDestinationInput
	}
	lockDynamoDBAPIMockEnableKinesisStreamingDestination.RLock()
	calls = mock.calls.EnableKinesisStreamingDestination
	lockDynamoDBAPIMockEnableKinesisStreamingDestination.RUnlock()
	return calls
}

// EnableKinesisStreamingDestinationRequest calls EnableKinesisStreamingDestinationRequestFunc.
func (mock *DynamoDBAPIMock) EnableKinesisStreamingDestinationRequest(in1 *dynamodb.EnableKinesisStreamingDestinationInput) (*request.Request, *dynamodb.EnableKinesisStreamingDestinationOutput) {
	if mock.EnableKinesisStreamingDestinationRequestFunc == nil {
		panic("DynamoDBAPIMock.EnableKinesisStreamingDestinationRequestFunc: method is nil but DynamoDBAPI.EnableKinesisStreamingDestinationRequest was just called")
	}
	callInfo := struct {
		In1 *dynamodb.EnableKinesisStreamingDestinationInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockEnableKinesisStreamingDestinationRequest.Lock()
	mock.calls.EnableKinesisStreamingDestinationRequest = append(mock.calls.EnableKinesisStreamingDestinationRequest, callInfo)
	lockDynamoDBAPIMockEnableKinesisStreamingDestinationRequest.Unlock()
	return mock.EnableKinesisStreamingDestinationRequestFunc(in1)
}

// EnableKinesisStreamingDestinationRequestCalls gets all the calls that were made to EnableKinesisStreamingDestinationRequest.
// Check the length with:
//     len(mockedDynamoDBAPI.EnableKinesisStreamingDestinationRequestCalls())
func (mock *DynamoDBAPIMock) EnableKinesisStreamingDestinationRequestCalls() []struct {
	In1 *dynamodb.EnableKinesisStreamingDestinationInput
} {
	var calls []struct {
		In1 *dynamodb.EnableKinesisStreamingDestinationInput
	}
	lockDynamoDBAPIMockEnableKinesisStreamingDestinationRequest.RLock()
	calls = mock.calls.EnableKinesisStreamingDestinationRequest
	lockDynamoDBAPIMockEnableKinesisStreamingDestinationRequest.RUnlock()
	return calls
}

// EnableKinesisStreamingDestinationWithContext calls EnableKinesisStreamingDestinationWithContextFunc.
func (mock *DynamoDBAPIMock) EnableKinesisStreamingDestinationWithContext(in1 context.Context, in2 *dynamodb.EnableKinesisStreamingDestinationInput, in3 ...request.Option) (*dynamodb.EnableKinesisStreamingDestinationOutput, error) {
	if mock.EnableKinesisStreamingDestinationWithContextFunc == nil {
		panic("DynamoDBAPIMock.EnableKinesisStreamingDestinationWithContextFunc: method is nil but DynamoDBAPI.EnableKinesisStreamingDestinationWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *dynamodb.EnableKinesisStreamingDestinationInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockDynamoDBAPIMockEnableKinesisStreamingDestinationWithContext.Lock()
	mock.calls.EnableKinesisStreamingDestinationWithContext = append(mock.calls.EnableKinesisStreamingDestinationWithContext, callInfo)
	lockDynamoDBAPIMockEnableKinesisStreamingDestinationWithContext.Unlock()
	return mock.EnableKinesisStreamingDestinationWithContextFunc(in1, in2, in3...)
}

// EnableKinesisStreamingDestinationWithContextCalls gets all the calls that were made to EnableKinesisStreamingDestinationWithContext.
// Check the length with:
//     len(mockedDynamoDBAPI.EnableKinesisStreamingDestinationWithContextCalls())
func (mock *DynamoDBAPIMock) EnableKinesisStreamingDestinationWithContextCalls() []struct {
	In1 context.Context
	In2 *dynamodb.EnableKinesisStreamingDestinationInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *dynamodb.EnableKinesisStreamingDestinationInput
		In3 []request.Option
	}
	lockDynamoDBAPIMockEnableKinesisStreamingDestinationWithContext.RLock()
	calls = mock.calls.EnableKinesisStreamingDestinationWithContext
	lockDynamoDBAPIMockEnableKinesisStreamingDestinationWithContext.RUnlock()
	return calls
}

// ExecuteStatement calls ExecuteStatementFunc.
func (mock *DynamoDBAPIMock) ExecuteStatement(in1 *dynamodb.ExecuteStatementInput) (*dynamodb.ExecuteStatementOutput, error) {
	if mock.ExecuteStatementFunc == nil {
		panic("DynamoDBAPIMock.ExecuteStatementFunc: method is nil but DynamoDBAPI.ExecuteStatement was just called")
	}
	callInfo := struct {
		In1 *dynamodb.ExecuteStatementInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockExecuteStatement.Lock()
	mock.calls.ExecuteStatement = append(mock.calls.ExecuteStatement, callInfo)
	lockDynamoDBAPIMockExecuteStatement.Unlock()
	return mock.ExecuteStatementFunc(in1)
}

// ExecuteStatementCalls gets all the calls that were made to ExecuteStatement.
// Check the length with:
//     len(mockedDynamoDBAPI.ExecuteStatementCalls())
func (mock *DynamoDBAPIMock) ExecuteStatementCalls() []struct {
	In1 *dynamodb.ExecuteStatementInput
} {
	var calls []struct {
		In1 *dynamodb.ExecuteStatementInput
	}
	lockDynamoDBAPIMockExecuteStatement.RLock()
	calls = mock.calls.ExecuteStatement
	lockDynamoDBAPIMockExecuteStatement.RUnlock()
	return calls
}

// ExecuteStatementRequest calls ExecuteStatementRequestFunc.
func (mock *DynamoDBAPIMock) ExecuteStatementRequest(in1 *dynamodb.ExecuteStatementInput) (*request.Request, *dynamodb.ExecuteStatementOutput) {
	if mock.ExecuteStatementRequestFunc == nil {
		panic("DynamoDBAPIMock.ExecuteStatementRequestFunc: method is nil but DynamoDBAPI.ExecuteStatementRequest was just called")
	}
	callInfo := struct {
		In1 *dynamodb.ExecuteStatementInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockExecuteStatementRequest.Lock()
	mock.calls.ExecuteStatementRequest = append(mock.calls.ExecuteStatementRequest, callInfo)
	lockDynamoDBAPIMockExecuteStatementRequest.Unlock()
	return mock.ExecuteStatementRequestFunc(in1)
}

// ExecuteStatementRequestCalls gets all the calls that were made to ExecuteStatementRequest.
// Check the length with:
//     len(mockedDynamoDBAPI.ExecuteStatementRequestCalls())
func (mock *DynamoDBAPIMock) ExecuteStatementRequestCalls() []struct {
	In1 *dynamodb.ExecuteStatementInput
} {
	var calls []struct {
		In1 *dynamodb.ExecuteStatementInput
	}
	lockDynamoDBAPIMockExecuteStatementRequest.RLock()
	calls = mock.calls.ExecuteStatementRequest
	lockDynamoDBAPIMockExecuteStatementRequest.RUnlock()
	return calls
}

// ExecuteStatementWithContext calls ExecuteStatementWithContextFunc.
func (mock *DynamoDBAPIMock) ExecuteStatementWithContext(in1 context.Context, in2 *dynamodb.ExecuteStatementInput, in3 ...request.Option) (*dynamodb.ExecuteStatementOutput, error) {
	if mock.ExecuteStatementWithContextFunc == nil {
		panic("DynamoDBAPIMock.ExecuteStatementWithContextFunc: method is nil but DynamoDBAPI.ExecuteStatementWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *dynamodb.ExecuteStatementInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockDynamoDBAPIMockExecuteStatementWithContext.Lock()
	mock.calls.ExecuteStatementWithContext = append(mock.calls.ExecuteStatementWithContext, callInfo)
	lockDynamoDBAPIMockExecuteStatementWithContext.Unlock()
	return mock.ExecuteStatementWithContextFunc(in1, in2, in3...)
}

// ExecuteStatementWithContextCalls gets all the calls that were made to ExecuteStatementWithContext.
// Check the length with:
//     len(mockedDynamoDBAPI.ExecuteStatementWithContextCalls())
func (mock *DynamoDBAPIMock) ExecuteStatementWithContextCalls() []struct {
	In1 context.Context
	In2 *dynamodb.ExecuteStatementInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *dynamodb.ExecuteStatementInput
		In3 []request.Option
	}
	lockDynamoDBAPIMockExecuteStatementWithContext.RLock()
	calls = mock.calls.ExecuteStatementWithContext
	lockDynamoDBAPIMockExecuteStatementWithContext.RUnlock()
	return calls
}

// ExecuteTransaction calls ExecuteTransactionFunc.
func (mock *DynamoDBAPIMock) ExecuteTransaction(in1 *dynamodb.ExecuteTransactionInput) (*dynamodb.ExecuteTransactionOutput, error) {
	if mock.ExecuteTransactionFunc == nil {
		panic("DynamoDBAPIMock.ExecuteTransactionFunc: method is nil but DynamoDBAPI.ExecuteTransaction was just called")
	}
	callInfo := struct {
		In1 *dynamodb.ExecuteTransactionInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockExecuteTransaction.Lock()
	mock.calls.ExecuteTransaction = append(mock.calls.ExecuteTransaction, callInfo)
	lockDynamoDBAPIMockExecuteTransaction.Unlock()
	return mock.ExecuteTransactionFunc(in1)
}

// ExecuteTransactionCalls gets all the calls that were made to ExecuteTransaction.
// Check the length with:
//     len(mockedDynamoDBAPI.ExecuteTransactionCalls())
func (mock *DynamoDBAPIMock) ExecuteTransactionCalls() []struct {
	In1 *dynamodb.ExecuteTransactionInput
} {
	var calls []struct {
		In1 *dynamodb.ExecuteTransactionInput
	}
	lockDynamoDBAPIMockExecuteTransaction.RLock()
	calls = mock.calls.ExecuteTransaction
	lockDynamoDBAPIMockExecuteTransaction.RUnlock()
	return calls
}

// ExecuteTransactionRequest calls ExecuteTransactionRequestFunc.
func (mock *DynamoDBAPIMock) ExecuteTransactionRequest(in1 *dynamodb.ExecuteTransactionInput) (*request.Request, *dynamodb.ExecuteTransactionOutput) {
	if mock.ExecuteTransactionRequestFunc == nil {
		panic("DynamoDBAPIMock.ExecuteTransactionRequestFunc: method is nil but DynamoDBAPI.ExecuteTransactionRequest was just called")
	}
	callInfo := struct {
		In1 *dynamodb.ExecuteTransactionInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockExecuteTransactionRequest.Lock()
	mock.calls.ExecuteTransactionRequest = append(mock.calls.ExecuteTransactionRequest, callInfo)
	lockDynamoDBAPIMockExecuteTransactionRequest.Unlock()
	return mock.ExecuteTransactionRequestFunc(in1)
}

// ExecuteTransactionRequestCalls gets all the calls that were made to ExecuteTransactionRequest.
// Check the length with:
//     len(mockedDynamoDBAPI.ExecuteTransactionRequestCalls())
func (mock *DynamoDBAPIMock) ExecuteTransactionRequestCalls() []struct {
	In1 *dynamodb.ExecuteTransactionInput
} {
	var calls []struct {
		In1 *dynamodb.ExecuteTransactionInput
	}
	lockDynamoDBAPIMockExecuteTransactionRequest.RLock()
	calls = mock.calls.ExecuteTransactionRequest
	lockDynamoDBAPIMockExecuteTransactionRequest.RUnlock()
	return calls
}

// ExecuteTransactionWithContext calls ExecuteTransactionWithContextFunc.
func (mock *DynamoDBAPIMock) ExecuteTransactionWithContext(in1 context.Context, in2 *dynamodb.ExecuteTransactionInput, in3 ...request.Option) (*dynamodb.ExecuteTransactionOutput, error) {
	if mock.ExecuteTransactionWithContextFunc == nil {
		panic("DynamoDBAPIMock.ExecuteTransactionWithContextFunc: method is nil but DynamoDBAPI.ExecuteTransactionWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *dynamodb.ExecuteTransactionInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockDynamoDBAPIMockExecuteTransactionWithContext.Lock()
	mock.calls.ExecuteTransactionWithContext = append(mock.calls.ExecuteTransactionWithContext, callInfo)
	lockDynamoDBAPIMockExecuteTransactionWithContext.Unlock()
	return mock.ExecuteTransactionWithContextFunc(in1, in2, in3...)
}

// ExecuteTransactionWithContextCalls gets all the calls that were made to ExecuteTransactionWithContext.
// Check the length with:
//     len(mockedDynamoDBAPI.ExecuteTransactionWithContextCalls())
func (mock *DynamoDBAPIMock) ExecuteTransactionWithContextCalls() []struct {
	In1 context.Context
	In2 *dynamodb.ExecuteTransactionInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *dynamodb.ExecuteTransactionInput
		In3 []request.Option
	}
	lockDynamoDBAPIMockExecuteTransactionWithContext.RLock()
	calls = mock.calls.ExecuteTransactionWithContext
	lockDynamoDBAPIMockExecuteTransactionWithContext.RUnlock()
	return calls
}

// ExportTableToPointInTime calls ExportTableToPointInTimeFunc.
func (mock *DynamoDBAPIMock) ExportTableToPointInTime(in1 *dynamodb.ExportTableToPointInTimeInput) (*dynamodb.ExportTableToPointInTimeOutput, error) {
	if mock.ExportTableToPointInTimeFunc == nil {
		panic("DynamoDBAPIMock.ExportTableToPointInTimeFunc: method is nil but DynamoDBAPI.ExportTableToPointInTime was just called")
	}
	callInfo := struct {
		In1 *dynamodb.ExportTableToPointInTimeInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockExportTableToPointInTime.Lock()
	mock.calls.ExportTableToPointInTime = append(mock.calls.ExportTableToPointInTime, callInfo)
	lockDynamoDBAPIMockExportTableToPointInTime.Unlock()
	return mock.ExportTableToPointInTimeFunc(in1)
}

// ExportTableToPointInTimeCalls gets all the calls that were made to ExportTableToPointInTime.
// Check the length with:
//     len(mockedDynamoDBAPI.ExportTableToPointInTimeCalls())
func (mock *DynamoDBAPIMock) ExportTableToPointInTimeCalls() []struct {
	In1 *dynamodb.ExportTableToPointInTimeInput
} {
	var calls []struct {
		In1 *dynamodb.ExportTableToPointInTimeInput
	}
	lockDynamoDBAPIMockExportTableToPointInTime.RLock()
	calls = mock.calls.ExportTableToPointInTime
	lockDynamoDBAPIMockExportTableToPointInTime.RUnlock()
	return calls
}

// ExportTableToPointInTimeRequest calls ExportTableToPointInTimeRequestFunc.
func (mock *DynamoDBAPIMock) ExportTableToPointInTimeRequest(in1 *dynamodb.ExportTableToPointInTimeInput) (*request.Request, *dynamodb.ExportTableToPointInTimeOutput) {
	if mock.ExportTableToPointInTimeRequestFunc == nil {
		panic("DynamoDBAPIMock.ExportTableToPointInTimeRequestFunc: method is nil but DynamoDBAPI.ExportTableToPointInTimeRequest was just called")
	}
	callInfo := struct {
		In1 *dynamodb.ExportTableToPointInTimeInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockExportTableToPointInTimeRequest.Lock()
	mock.calls.ExportTableToPointInTimeRequest = append(mock.calls.ExportTableToPointInTimeRequest, callInfo)
	lockDynamoDBAPIMockExportTableToPointInTimeRequest.Unlock()
	return mock.ExportTableToPointInTimeRequestFunc(in1)
}

// ExportTableToPointInTimeRequestCalls gets all the calls that were made to ExportTableToPointInTimeRequest.
// Check the length with:
//     len(mockedDynamoDBAPI.ExportTableToPointInTimeRequestCalls())
func (mock *DynamoDBAPIMock) ExportTableToPointInTimeRequestCalls() []struct {
	In1 *dynamodb.ExportTableToPointInTimeInput
} {
	var calls []struct {
		In1 *dynamodb.ExportTableToPointInTimeInput
	}
	lockDynamoDBAPIMockExportTableToPointInTimeRequest.RLock()
	calls = mock.calls.ExportTableToPointInTimeRequest
	lockDynamoDBAPIMockExportTableToPointInTimeRequest.RUnlock()
	return calls
}

// ExportTableToPointInTimeWithContext calls ExportTableToPointInTimeWithContextFunc.
func (mock *DynamoDBAPIMock) ExportTableToPointInTimeWithContext(in1 context.Context, in2 *dynamodb.ExportTableToPointInTimeInput, in3 ...request.Option) (*dynamodb.ExportTableToPointInTimeOutput, error) {
	if mock.ExportTableToPointInTimeWithContextFunc == nil {
		panic("DynamoDBAPIMock.ExportTableToPointInTimeWithContextFunc: method is nil but DynamoDBAPI.ExportTableToPointInTimeWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *dynamodb.ExportTableToPointInTimeInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockDynamoDBAPIMockExportTableToPointInTimeWithContext.Lock()
	mock.calls.ExportTableToPointInTimeWithContext = append(mock.calls.ExportTableToPointInTimeWithContext, callInfo)
	lockDynamoDBAPIMockExportTableToPointInTimeWithContext.Unlock()
	return mock.ExportTableToPointInTimeWithContextFunc(in1, in2, in3...)
}

// ExportTableToPointInTimeWithContextCalls gets all the calls that were made to ExportTableToPointInTimeWithContext.
// Check the length with:
//     len(mockedDynamoDBAPI.ExportTableToPointInTimeWithContextCalls())
func (mock *DynamoDBAPIMock) ExportTableToPointInTimeWithContextCalls() []struct {
	In1 context.Context
	In2 *dynamodb.ExportTableToPointInTimeInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *dynamodb.ExportTableToPointInTimeInput
		In3 []request.Option
	}
	lockDynamoDBAPIMockExportTableToPointInTimeWithContext.RLock()
	calls = mock.calls.ExportTableToPointInTimeWithContext
	lockDynamoDBAPIMockExportTableToPointInTimeWithContext.RUnlock()
	return calls
}

// GetItem calls GetItemFunc.
func (mock *DynamoDBAPIMock) GetItem(in1 *dynamodb.GetItemInput) (*dynamodb.GetItemOutput, error) {
	if mock.GetItemFunc == nil {
		panic("DynamoDBAPIMock.GetItemFunc: method is nil but DynamoDBAPI.GetItem was just called")
	}
	callInfo := struct {
		In1 *dynamodb.GetItemInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockGetItem.Lock()
	mock.calls.GetItem = append(mock.calls.GetItem, callInfo)
	lockDynamoDBAPIMockGetItem.Unlock()
	return mock.GetItemFunc(in1)
}

// GetItemCalls gets all the calls that were made to GetItem.
// Check the length with:
//     len(mockedDynamoDBAPI.GetItemCalls())
func (mock *DynamoDBAPIMock) GetItemCalls() []struct {
	In1 *dynamodb.GetItemInput
} {
	var calls []struct {
		In1 *dynamodb.GetItemInput
	}
	lockDynamoDBAPIMockGetItem.RLock()
	calls = mock.calls.GetItem
	lockDynamoDBAPIMockGetItem.RUnlock()
	return calls
}

// GetItemRequest calls GetItemRequestFunc.
func (mock *DynamoDBAPIMock) GetItemRequest(in1 *dynamodb.GetItemInput) (*request.Request, *dynamodb.GetItemOutput) {
	if mock.GetItemRequestFunc == nil {
		panic("DynamoDBAPIMock.GetItemRequestFunc: method is nil but DynamoDBAPI.GetItemRequest was just called")
	}
	callInfo := struct {
		In1 *dynamodb.GetItemInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockGetItemRequest.Lock()
	mock.calls.GetItemRequest = append(mock.calls.GetItemRequest, callInfo)
	lockDynamoDBAPIMockGetItemRequest.Unlock()
	return mock.GetItemRequestFunc(in1)
}

// GetItemRequestCalls gets all the calls that were made to GetItemRequest.
// Check the length with:
//     len(mockedDynamoDBAPI.GetItemRequestCalls())
func (mock *DynamoDBAPIMock) GetItemRequestCalls() []struct {
	In1 *dynamodb.GetItemInput
} {
	var calls []struct {
		In1 *dynamodb.GetItemInput
	}
	lockDynamoDBAPIMockGetItemRequest.RLock()
	calls = mock.calls.GetItemRequest
	lockDynamoDBAPIMockGetItemRequest.RUnlock()
	return calls
}

// GetItemWithContext calls GetItemWithContextFunc.
func (mock *DynamoDBAPIMock) GetItemWithContext(in1 context.Context, in2 *dynamodb.GetItemInput, in3 ...request.Option) (*dynamodb.GetItemOutput, error) {
	if mock.GetItemWithContextFunc == nil {
		panic("DynamoDBAPIMock.GetItemWithContextFunc: method is nil but DynamoDBAPI.GetItemWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *dynamodb.GetItemInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockDynamoDBAPIMockGetItemWithContext.Lock()
	mock.calls.GetItemWithContext = append(mock.calls.GetItemWithContext, callInfo)
	lockDynamoDBAPIMockGetItemWithContext.Unlock()
	return mock.GetItemWithContextFunc(in1, in2, in3...)
}

// GetItemWithContextCalls gets all the calls that were made to GetItemWithContext.
// Check the length with:
//     len(mockedDynamoDBAPI.GetItemWithContextCalls())
func (mock *DynamoDBAPIMock) GetItemWithContextCalls() []struct {
	In1 context.Context
	In2 *dynamodb.GetItemInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *dynamodb.GetItemInput
		In3 []request.Option
	}
	lockDynamoDBAPIMockGetItemWithContext.RLock()
	calls = mock.calls.GetItemWithContext
	lockDynamoDBAPIMockGetItemWithContext.RUnlock()
	return calls
}

// ListBackups calls ListBackupsFunc.
func (mock *DynamoDBAPIMock) ListBackups(in1 *dynamodb.ListBackupsInput) (*dynamodb.ListBackupsOutput, error) {
	if mock.ListBackupsFunc == nil {
		panic("DynamoDBAPIMock.ListBackupsFunc: method is nil but DynamoDBAPI.ListBackups was just called")
	}
	callInfo := struct {
		In1 *dynamodb.ListBackupsInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockListBackups.Lock()
	mock.calls.ListBackups = append(mock.calls.ListBackups, callInfo)
	lockDynamoDBAPIMockListBackups.Unlock()
	return mock.ListBackupsFunc(in1)
}

// ListBackupsCalls gets all the calls that were made to ListBackups.
// Check the length with:
//     len(mockedDynamoDBAPI.ListBackupsCalls())
func (mock *DynamoDBAPIMock) ListBackupsCalls() []struct {
	In1 *dynamodb.ListBackupsInput
} {
	var calls []struct {
		In1 *dynamodb.ListBackupsInput
	}
	lockDynamoDBAPIMockListBackups.RLock()
	calls = mock.calls.ListBackups
	lockDynamoDBAPIMockListBackups.RUnlock()
	return calls
}

// ListBackupsRequest calls ListBackupsRequestFunc.
func (mock *DynamoDBAPIMock) ListBackupsRequest(in1 *dynamodb.ListBackupsInput) (*request.Request, *dynamodb.ListBackupsOutput) {
	if mock.ListBackupsRequestFunc == nil {
		panic("DynamoDBAPIMock.ListBackupsRequestFunc: method is nil but DynamoDBAPI.ListBackupsRequest was just called")
	}
	callInfo := struct {
		In1 *dynamodb.ListBackupsInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockListBackupsRequest.Lock()
	mock.calls.ListBackupsRequest = append(mock.calls.ListBackupsRequest, callInfo)
	lockDynamoDBAPIMockListBackupsRequest.Unlock()
	return mock.ListBackupsRequestFunc(in1)
}

// ListBackupsRequestCalls gets all the calls that were made to ListBackupsRequest.
// Check the length with:
//     len(mockedDynamoDBAPI.ListBackupsRequestCalls())
func (mock *DynamoDBAPIMock) ListBackupsRequestCalls() []struct {
	In1 *dynamodb.ListBackupsInput
} {
	var calls []struct {
		In1 *dynamodb.ListBackupsInput
	}
	lockDynamoDBAPIMockListBackupsRequest.RLock()
	calls = mock.calls.ListBackupsRequest
	lockDynamoDBAPIMockListBackupsRequest.RUnlock()
	return calls
}

// ListBackupsWithContext calls ListBackupsWithContextFunc.
func (mock *DynamoDBAPIMock) ListBackupsWithContext(in1 context.Context, in2 *dynamodb.ListBackupsInput, in3 ...request.Option) (*dynamodb.ListBackupsOutput, error) {
	if mock.ListBackupsWithContextFunc == nil {
		panic("DynamoDBAPIMock.ListBackupsWithContextFunc: method is nil but DynamoDBAPI.ListBackupsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *dynamodb.ListBackupsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockDynamoDBAPIMockListBackupsWithContext.Lock()
	mock.calls.ListBackupsWithContext = append(mock.calls.ListBackupsWithContext, callInfo)
	lockDynamoDBAPIMockListBackupsWithContext.Unlock()
	return mock.ListBackupsWithContextFunc(in1, in2, in3...)
}

// ListBackupsWithContextCalls gets all the calls that were made to ListBackupsWithContext.
// Check the length with:
//     len(mockedDynamoDBAPI.ListBackupsWithContextCalls())
func (mock *DynamoDBAPIMock) ListBackupsWithContextCalls() []struct {
	In1 context.Context
	In2 *dynamodb.ListBackupsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *dynamodb.ListBackupsInput
		In3 []request.Option
	}
	lockDynamoDBAPIMockListBackupsWithContext.RLock()
	calls = mock.calls.ListBackupsWithContext
	lockDynamoDBAPIMockListBackupsWithContext.RUnlock()
	return calls
}

// ListContributorInsights calls ListContributorInsightsFunc.
func (mock *DynamoDBAPIMock) ListContributorInsights(in1 *dynamodb.ListContributorInsightsInput) (*dynamodb.ListContributorInsightsOutput, error) {
	if mock.ListContributorInsightsFunc == nil {
		panic("DynamoDBAPIMock.ListContributorInsightsFunc: method is nil but DynamoDBAPI.ListContributorInsights was just called")
	}
	callInfo := struct {
		In1 *dynamodb.ListContributorInsightsInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockListContributorInsights.Lock()
	mock.calls.ListContributorInsights = append(mock.calls.ListContributorInsights, callInfo)
	lockDynamoDBAPIMockListContributorInsights.Unlock()
	return mock.ListContributorInsightsFunc(in1)
}

// ListContributorInsightsCalls gets all the calls that were made to ListContributorInsights.
// Check the length with:
//     len(mockedDynamoDBAPI.ListContributorInsightsCalls())
func (mock *DynamoDBAPIMock) ListContributorInsightsCalls() []struct {
	In1 *dynamodb.ListContributorInsightsInput
} {
	var calls []struct {
		In1 *dynamodb.ListContributorInsightsInput
	}
	lockDynamoDBAPIMockListContributorInsights.RLock()
	calls = mock.calls.ListContributorInsights
	lockDynamoDBAPIMockListContributorInsights.RUnlock()
	return calls
}

// ListContributorInsightsPages calls ListContributorInsightsPagesFunc.
func (mock *DynamoDBAPIMock) ListContributorInsightsPages(in1 *dynamodb.ListContributorInsightsInput, in2 func(*dynamodb.ListContributorInsightsOutput, bool) bool) error {
	if mock.ListContributorInsightsPagesFunc == nil {
		panic("DynamoDBAPIMock.ListContributorInsightsPagesFunc: method is nil but DynamoDBAPI.ListContributorInsightsPages was just called")
	}
	callInfo := struct {
		In1 *dynamodb.ListContributorInsightsInput
		In2 func(*dynamodb.ListContributorInsightsOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockDynamoDBAPIMockListContributorInsightsPages.Lock()
	mock.calls.ListContributorInsightsPages = append(mock.calls.ListContributorInsightsPages, callInfo)
	lockDynamoDBAPIMockListContributorInsightsPages.Unlock()
	return mock.ListContributorInsightsPagesFunc(in1, in2)
}

// ListContributorInsightsPagesCalls gets all the calls that were made to ListContributorInsightsPages.
// Check the length with:
//     len(mockedDynamoDBAPI.ListContributorInsightsPagesCalls())
func (mock *DynamoDBAPIMock) ListContributorInsightsPagesCalls() []struct {
	In1 *dynamodb.ListContributorInsightsInput
	In2 func(*dynamodb.ListContributorInsightsOutput, bool) bool
} {
	var calls []struct {
		In1 *dynamodb.ListContributorInsightsInput
		In2 func(*dynamodb.ListContributorInsightsOutput, bool) bool
	}
	lockDynamoDBAPIMockListContributorInsightsPages.RLock()
	calls = mock.calls.ListContributorInsightsPages
	lockDynamoDBAPIMockListContributorInsightsPages.RUnlock()
	return calls
}

// ListContributorInsightsPagesWithContext calls ListContributorInsightsPagesWithContextFunc.
func (mock *DynamoDBAPIMock) ListContributorInsightsPagesWithContext(in1 context.Context, in2 *dynamodb.ListContributorInsightsInput, in3 func(*dynamodb.ListContributorInsightsOutput, bool) bool, in4 ...request.Option) error {
	if mock.ListContributorInsightsPagesWithContextFunc == nil {
		panic("DynamoDBAPIMock.ListContributorInsightsPagesWithContextFunc: method is nil but DynamoDBAPI.ListContributorInsightsPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *dynamodb.ListContributorInsightsInput
		In3 func(*dynamodb.ListContributorInsightsOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockDynamoDBAPIMockListContributorInsightsPagesWithContext.Lock()
	mock.calls.ListContributorInsightsPagesWithContext = append(mock.calls.ListContributorInsightsPagesWithContext, callInfo)
	lockDynamoDBAPIMockListContributorInsightsPagesWithContext.Unlock()
	return mock.ListContributorInsightsPagesWithContextFunc(in1, in2, in3, in4...)
}

// ListContributorInsightsPagesWithContextCalls gets all the calls that were made to ListContributorInsightsPagesWithContext.
// Check the length with:
//     len(mockedDynamoDBAPI.ListContributorInsightsPagesWithContextCalls())
func (mock *DynamoDBAPIMock) ListContributorInsightsPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *dynamodb.ListContributorInsightsInput
	In3 func(*dynamodb.ListContributorInsightsOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *dynamodb.ListContributorInsightsInput
		In3 func(*dynamodb.ListContributorInsightsOutput, bool) bool
		In4 []request.Option
	}
	lockDynamoDBAPIMockListContributorInsightsPagesWithContext.RLock()
	calls = mock.calls.ListContributorInsightsPagesWithContext
	lockDynamoDBAPIMockListContributorInsightsPagesWithContext.RUnlock()
	return calls
}

// ListContributorInsightsRequest calls ListContributorInsightsRequestFunc.
func (mock *DynamoDBAPIMock) ListContributorInsightsRequest(in1 *dynamodb.ListContributorInsightsInput) (*request.Request, *dynamodb.ListContributorInsightsOutput) {
	if mock.ListContributorInsightsRequestFunc == nil {
		panic("DynamoDBAPIMock.ListContributorInsightsRequestFunc: method is nil but DynamoDBAPI.ListContributorInsightsRequest was just called")
	}
	callInfo := struct {
		In1 *dynamodb.ListContributorInsightsInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockListContributorInsightsRequest.Lock()
	mock.calls.ListContributorInsightsRequest = append(mock.calls.ListContributorInsightsRequest, callInfo)
	lockDynamoDBAPIMockListContributorInsightsRequest.Unlock()
	return mock.ListContributorInsightsRequestFunc(in1)
}

// ListContributorInsightsRequestCalls gets all the calls that were made to ListContributorInsightsRequest.
// Check the length with:
//     len(mockedDynamoDBAPI.ListContributorInsightsRequestCalls())
func (mock *DynamoDBAPIMock) ListContributorInsightsRequestCalls() []struct {
	In1 *dynamodb.ListContributorInsightsInput
} {
	var calls []struct {
		In1 *dynamodb.ListContributorInsightsInput
	}
	lockDynamoDBAPIMockListContributorInsightsRequest.RLock()
	calls = mock.calls.ListContributorInsightsRequest
	lockDynamoDBAPIMockListContributorInsightsRequest.RUnlock()
	return calls
}

// ListContributorInsightsWithContext calls ListContributorInsightsWithContextFunc.
func (mock *DynamoDBAPIMock) ListContributorInsightsWithContext(in1 context.Context, in2 *dynamodb.ListContributorInsightsInput, in3 ...request.Option) (*dynamodb.ListContributorInsightsOutput, error) {
	if mock.ListContributorInsightsWithContextFunc == nil {
		panic("DynamoDBAPIMock.ListContributorInsightsWithContextFunc: method is nil but DynamoDBAPI.ListContributorInsightsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *dynamodb.ListContributorInsightsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockDynamoDBAPIMockListContributorInsightsWithContext.Lock()
	mock.calls.ListContributorInsightsWithContext = append(mock.calls.ListContributorInsightsWithContext, callInfo)
	lockDynamoDBAPIMockListContributorInsightsWithContext.Unlock()
	return mock.ListContributorInsightsWithContextFunc(in1, in2, in3...)
}

// ListContributorInsightsWithContextCalls gets all the calls that were made to ListContributorInsightsWithContext.
// Check the length with:
//     len(mockedDynamoDBAPI.ListContributorInsightsWithContextCalls())
func (mock *DynamoDBAPIMock) ListContributorInsightsWithContextCalls() []struct {
	In1 context.Context
	In2 *dynamodb.ListContributorInsightsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *dynamodb.ListContributorInsightsInput
		In3 []request.Option
	}
	lockDynamoDBAPIMockListContributorInsightsWithContext.RLock()
	calls = mock.calls.ListContributorInsightsWithContext
	lockDynamoDBAPIMockListContributorInsightsWithContext.RUnlock()
	return calls
}

// ListExports calls ListExportsFunc.
func (mock *DynamoDBAPIMock) ListExports(in1 *dynamodb.ListExportsInput) (*dynamodb.ListExportsOutput, error) {
	if mock.ListExportsFunc == nil {
		panic("DynamoDBAPIMock.ListExportsFunc: method is nil but DynamoDBAPI.ListExports was just called")
	}
	callInfo := struct {
		In1 *dynamodb.ListExportsInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockListExports.Lock()
	mock.calls.ListExports = append(mock.calls.ListExports, callInfo)
	lockDynamoDBAPIMockListExports.Unlock()
	return mock.ListExportsFunc(in1)
}

// ListExportsCalls gets all the calls that were made to ListExports.
// Check the length with:
//     len(mockedDynamoDBAPI.ListExportsCalls())
func (mock *DynamoDBAPIMock) ListExportsCalls() []struct {
	In1 *dynamodb.ListExportsInput
} {
	var calls []struct {
		In1 *dynamodb.ListExportsInput
	}
	lockDynamoDBAPIMockListExports.RLock()
	calls = mock.calls.ListExports
	lockDynamoDBAPIMockListExports.RUnlock()
	return calls
}

// ListExportsPages calls ListExportsPagesFunc.
func (mock *DynamoDBAPIMock) ListExportsPages(in1 *dynamodb.ListExportsInput, in2 func(*dynamodb.ListExportsOutput, bool) bool) error {
	if mock.ListExportsPagesFunc == nil {
		panic("DynamoDBAPIMock.ListExportsPagesFunc: method is nil but DynamoDBAPI.ListExportsPages was just called")
	}
	callInfo := struct {
		In1 *dynamodb.ListExportsInput
		In2 func(*dynamodb.ListExportsOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockDynamoDBAPIMockListExportsPages.Lock()
	mock.calls.ListExportsPages = append(mock.calls.ListExportsPages, callInfo)
	lockDynamoDBAPIMockListExportsPages.Unlock()
	return mock.ListExportsPagesFunc(in1, in2)
}

// ListExportsPagesCalls gets all the calls that were made to ListExportsPages.
// Check the length with:
//     len(mockedDynamoDBAPI.ListExportsPagesCalls())
func (mock *DynamoDBAPIMock) ListExportsPagesCalls() []struct {
	In1 *dynamodb.ListExportsInput
	In2 func(*dynamodb.ListExportsOutput, bool) bool
} {
	var calls []struct {
		In1 *dynamodb.ListExportsInput
		In2 func(*dynamodb.ListExportsOutput, bool) bool
	}
	lockDynamoDBAPIMockListExportsPages.RLock()
	calls = mock.calls.ListExportsPages
	lockDynamoDBAPIMockListExportsPages.RUnlock()
	return calls
}

// ListExportsPagesWithContext calls ListExportsPagesWithContextFunc.
func (mock *DynamoDBAPIMock) ListExportsPagesWithContext(in1 context.Context, in2 *dynamodb.ListExportsInput, in3 func(*dynamodb.ListExportsOutput, bool) bool, in4 ...request.Option) error {
	if mock.ListExportsPagesWithContextFunc == nil {
		panic("DynamoDBAPIMock.ListExportsPagesWithContextFunc: method is nil but DynamoDBAPI.ListExportsPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *dynamodb.ListExportsInput
		In3 func(*dynamodb.ListExportsOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockDynamoDBAPIMockListExportsPagesWithContext.Lock()
	mock.calls.ListExportsPagesWithContext = append(mock.calls.ListExportsPagesWithContext, callInfo)
	lockDynamoDBAPIMockListExportsPagesWithContext.Unlock()
	return mock.ListExportsPagesWithContextFunc(in1, in2, in3, in4...)
}

// ListExportsPagesWithContextCalls gets all the calls that were made to ListExportsPagesWithContext.
// Check the length with:
//     len(mockedDynamoDBAPI.ListExportsPagesWithContextCalls())
func (mock *DynamoDBAPIMock) ListExportsPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *dynamodb.ListExportsInput
	In3 func(*dynamodb.ListExportsOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *dynamodb.ListExportsInput
		In3 func(*dynamodb.ListExportsOutput, bool) bool
		In4 []request.Option
	}
	lockDynamoDBAPIMockListExportsPagesWithContext.RLock()
	calls = mock.calls.ListExportsPagesWithContext
	lockDynamoDBAPIMockListExportsPagesWithContext.RUnlock()
	return calls
}

// ListExportsRequest calls ListExportsRequestFunc.
func (mock *DynamoDBAPIMock) ListExportsRequest(in1 *dynamodb.ListExportsInput) (*request.Request, *dynamodb.ListExportsOutput) {
	if mock.ListExportsRequestFunc == nil {
		panic("DynamoDBAPIMock.ListExportsRequestFunc: method is nil but DynamoDBAPI.ListExportsRequest was just called")
	}
	callInfo := struct {
		In1 *dynamodb.ListExportsInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockListExportsRequest.Lock()
	mock.calls.ListExportsRequest = append(mock.calls.ListExportsRequest, callInfo)
	lockDynamoDBAPIMockListExportsRequest.Unlock()
	return mock.ListExportsRequestFunc(in1)
}

// ListExportsRequestCalls gets all the calls that were made to ListExportsRequest.
// Check the length with:
//     len(mockedDynamoDBAPI.ListExportsRequestCalls())
func (mock *DynamoDBAPIMock) ListExportsRequestCalls() []struct {
	In1 *dynamodb.ListExportsInput
} {
	var calls []struct {
		In1 *dynamodb.ListExportsInput
	}
	lockDynamoDBAPIMockListExportsRequest.RLock()
	calls = mock.calls.ListExportsRequest
	lockDynamoDBAPIMockListExportsRequest.RUnlock()
	return calls
}

// ListExportsWithContext calls ListExportsWithContextFunc.
func (mock *DynamoDBAPIMock) ListExportsWithContext(in1 context.Context, in2 *dynamodb.ListExportsInput, in3 ...request.Option) (*dynamodb.ListExportsOutput, error) {
	if mock.ListExportsWithContextFunc == nil {
		panic("DynamoDBAPIMock.ListExportsWithContextFunc: method is nil but DynamoDBAPI.ListExportsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *dynamodb.ListExportsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockDynamoDBAPIMockListExportsWithContext.Lock()
	mock.calls.ListExportsWithContext = append(mock.calls.ListExportsWithContext, callInfo)
	lockDynamoDBAPIMockListExportsWithContext.Unlock()
	return mock.ListExportsWithContextFunc(in1, in2, in3...)
}

// ListExportsWithContextCalls gets all the calls that were made to ListExportsWithContext.
// Check the length with:
//     len(mockedDynamoDBAPI.ListExportsWithContextCalls())
func (mock *DynamoDBAPIMock) ListExportsWithContextCalls() []struct {
	In1 context.Context
	In2 *dynamodb.ListExportsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *dynamodb.ListExportsInput
		In3 []request.Option
	}
	lockDynamoDBAPIMockListExportsWithContext.RLock()
	calls = mock.calls.ListExportsWithContext
	lockDynamoDBAPIMockListExportsWithContext.RUnlock()
	return calls
}

// ListGlobalTables calls ListGlobalTablesFunc.
func (mock *DynamoDBAPIMock) ListGlobalTables(in1 *dynamodb.ListGlobalTablesInput) (*dynamodb.ListGlobalTablesOutput, error) {
	if mock.ListGlobalTablesFunc == nil {
		panic("DynamoDBAPIMock.ListGlobalTablesFunc: method is nil but DynamoDBAPI.ListGlobalTables was just called")
	}
	callInfo := struct {
		In1 *dynamodb.ListGlobalTablesInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockListGlobalTables.Lock()
	mock.calls.ListGlobalTables = append(mock.calls.ListGlobalTables, callInfo)
	lockDynamoDBAPIMockListGlobalTables.Unlock()
	return mock.ListGlobalTablesFunc(in1)
}

// ListGlobalTablesCalls gets all the calls that were made to ListGlobalTables.
// Check the length with:
//     len(mockedDynamoDBAPI.ListGlobalTablesCalls())
func (mock *DynamoDBAPIMock) ListGlobalTablesCalls() []struct {
	In1 *dynamodb.ListGlobalTablesInput
} {
	var calls []struct {
		In1 *dynamodb.ListGlobalTablesInput
	}
	lockDynamoDBAPIMockListGlobalTables.RLock()
	calls = mock.calls.ListGlobalTables
	lockDynamoDBAPIMockListGlobalTables.RUnlock()
	return calls
}

// ListGlobalTablesRequest calls ListGlobalTablesRequestFunc.
func (mock *DynamoDBAPIMock) ListGlobalTablesRequest(in1 *dynamodb.ListGlobalTablesInput) (*request.Request, *dynamodb.ListGlobalTablesOutput) {
	if mock.ListGlobalTablesRequestFunc == nil {
		panic("DynamoDBAPIMock.ListGlobalTablesRequestFunc: method is nil but DynamoDBAPI.ListGlobalTablesRequest was just called")
	}
	callInfo := struct {
		In1 *dynamodb.ListGlobalTablesInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockListGlobalTablesRequest.Lock()
	mock.calls.ListGlobalTablesRequest = append(mock.calls.ListGlobalTablesRequest, callInfo)
	lockDynamoDBAPIMockListGlobalTablesRequest.Unlock()
	return mock.ListGlobalTablesRequestFunc(in1)
}

// ListGlobalTablesRequestCalls gets all the calls that were made to ListGlobalTablesRequest.
// Check the length with:
//     len(mockedDynamoDBAPI.ListGlobalTablesRequestCalls())
func (mock *DynamoDBAPIMock) ListGlobalTablesRequestCalls() []struct {
	In1 *dynamodb.ListGlobalTablesInput
} {
	var calls []struct {
		In1 *dynamodb.ListGlobalTablesInput
	}
	lockDynamoDBAPIMockListGlobalTablesRequest.RLock()
	calls = mock.calls.ListGlobalTablesRequest
	lockDynamoDBAPIMockListGlobalTablesRequest.RUnlock()
	return calls
}

// ListGlobalTablesWithContext calls ListGlobalTablesWithContextFunc.
func (mock *DynamoDBAPIMock) ListGlobalTablesWithContext(in1 context.Context, in2 *dynamodb.ListGlobalTablesInput, in3 ...request.Option) (*dynamodb.ListGlobalTablesOutput, error) {
	if mock.ListGlobalTablesWithContextFunc == nil {
		panic("DynamoDBAPIMock.ListGlobalTablesWithContextFunc: method is nil but DynamoDBAPI.ListGlobalTablesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *dynamodb.ListGlobalTablesInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockDynamoDBAPIMockListGlobalTablesWithContext.Lock()
	mock.calls.ListGlobalTablesWithContext = append(mock.calls.ListGlobalTablesWithContext, callInfo)
	lockDynamoDBAPIMockListGlobalTablesWithContext.Unlock()
	return mock.ListGlobalTablesWithContextFunc(in1, in2, in3...)
}

// ListGlobalTablesWithContextCalls gets all the calls that were made to ListGlobalTablesWithContext.
// Check the length with:
//     len(mockedDynamoDBAPI.ListGlobalTablesWithContextCalls())
func (mock *DynamoDBAPIMock) ListGlobalTablesWithContextCalls() []struct {
	In1 context.Context
	In2 *dynamodb.ListGlobalTablesInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *dynamodb.ListGlobalTablesInput
		In3 []request.Option
	}
	lockDynamoDBAPIMockListGlobalTablesWithContext.RLock()
	calls = mock.calls.ListGlobalTablesWithContext
	lockDynamoDBAPIMockListGlobalTablesWithContext.RUnlock()
	return calls
}

// ListTables calls ListTablesFunc.
func (mock *DynamoDBAPIMock) ListTables(in1 *dynamodb.ListTablesInput) (*dynamodb.ListTablesOutput, error) {
	if mock.ListTablesFunc == nil {
		panic("DynamoDBAPIMock.ListTablesFunc: method is nil but DynamoDBAPI.ListTables was just called")
	}
	callInfo := struct {
		In1 *dynamodb.ListTablesInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockListTables.Lock()
	mock.calls.ListTables = append(mock.calls.ListTables, callInfo)
	lockDynamoDBAPIMockListTables.Unlock()
	return mock.ListTablesFunc(in1)
}

// ListTablesCalls gets all the calls that were made to ListTables.
// Check the length with:
//     len(mockedDynamoDBAPI.ListTablesCalls())
func (mock *DynamoDBAPIMock) ListTablesCalls() []struct {
	In1 *dynamodb.ListTablesInput
} {
	var calls []struct {
		In1 *dynamodb.ListTablesInput
	}
	lockDynamoDBAPIMockListTables.RLock()
	calls = mock.calls.ListTables
	lockDynamoDBAPIMockListTables.RUnlock()
	return calls
}

// ListTablesPages calls ListTablesPagesFunc.
func (mock *DynamoDBAPIMock) ListTablesPages(in1 *dynamodb.ListTablesInput, in2 func(*dynamodb.ListTablesOutput, bool) bool) error {
	if mock.ListTablesPagesFunc == nil {
		panic("DynamoDBAPIMock.ListTablesPagesFunc: method is nil but DynamoDBAPI.ListTablesPages was just called")
	}
	callInfo := struct {
		In1 *dynamodb.ListTablesInput
		In2 func(*dynamodb.ListTablesOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockDynamoDBAPIMockListTablesPages.Lock()
	mock.calls.ListTablesPages = append(mock.calls.ListTablesPages, callInfo)
	lockDynamoDBAPIMockListTablesPages.Unlock()
	return mock.ListTablesPagesFunc(in1, in2)
}

// ListTablesPagesCalls gets all the calls that were made to ListTablesPages.
// Check the length with:
//     len(mockedDynamoDBAPI.ListTablesPagesCalls())
func (mock *DynamoDBAPIMock) ListTablesPagesCalls() []struct {
	In1 *dynamodb.ListTablesInput
	In2 func(*dynamodb.ListTablesOutput, bool) bool
} {
	var calls []struct {
		In1 *dynamodb.ListTablesInput
		In2 func(*dynamodb.ListTablesOutput, bool) bool
	}
	lockDynamoDBAPIMockListTablesPages.RLock()
	calls = mock.calls.ListTablesPages
	lockDynamoDBAPIMockListTablesPages.RUnlock()
	return calls
}

// ListTablesPagesWithContext calls ListTablesPagesWithContextFunc.
func (mock *DynamoDBAPIMock) ListTablesPagesWithContext(in1 context.Context, in2 *dynamodb.ListTablesInput, in3 func(*dynamodb.ListTablesOutput, bool) bool, in4 ...request.Option) error {
	if mock.ListTablesPagesWithContextFunc == nil {
		panic("DynamoDBAPIMock.ListTablesPagesWithContextFunc: method is nil but DynamoDBAPI.ListTablesPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *dynamodb.ListTablesInput
		In3 func(*dynamodb.ListTablesOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockDynamoDBAPIMockListTablesPagesWithContext.Lock()
	mock.calls.ListTablesPagesWithContext = append(mock.calls.ListTablesPagesWithContext, callInfo)
	lockDynamoDBAPIMockListTablesPagesWithContext.Unlock()
	return mock.ListTablesPagesWithContextFunc(in1, in2, in3, in4...)
}

// ListTablesPagesWithContextCalls gets all the calls that were made to ListTablesPagesWithContext.
// Check the length with:
//     len(mockedDynamoDBAPI.ListTablesPagesWithContextCalls())
func (mock *DynamoDBAPIMock) ListTablesPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *dynamodb.ListTablesInput
	In3 func(*dynamodb.ListTablesOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *dynamodb.ListTablesInput
		In3 func(*dynamodb.ListTablesOutput, bool) bool
		In4 []request.Option
	}
	lockDynamoDBAPIMockListTablesPagesWithContext.RLock()
	calls = mock.calls.ListTablesPagesWithContext
	lockDynamoDBAPIMockListTablesPagesWithContext.RUnlock()
	return calls
}

// ListTablesRequest calls ListTablesRequestFunc.
func (mock *DynamoDBAPIMock) ListTablesRequest(in1 *dynamodb.ListTablesInput) (*request.Request, *dynamodb.ListTablesOutput) {
	if mock.ListTablesRequestFunc == nil {
		panic("DynamoDBAPIMock.ListTablesRequestFunc: method is nil but DynamoDBAPI.ListTablesRequest was just called")
	}
	callInfo := struct {
		In1 *dynamodb.ListTablesInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockListTablesRequest.Lock()
	mock.calls.ListTablesRequest = append(mock.calls.ListTablesRequest, callInfo)
	lockDynamoDBAPIMockListTablesRequest.Unlock()
	return mock.ListTablesRequestFunc(in1)
}

// ListTablesRequestCalls gets all the calls that were made to ListTablesRequest.
// Check the length with:
//     len(mockedDynamoDBAPI.ListTablesRequestCalls())
func (mock *DynamoDBAPIMock) ListTablesRequestCalls() []struct {
	In1 *dynamodb.ListTablesInput
} {
	var calls []struct {
		In1 *dynamodb.ListTablesInput
	}
	lockDynamoDBAPIMockListTablesRequest.RLock()
	calls = mock.calls.ListTablesRequest
	lockDynamoDBAPIMockListTablesRequest.RUnlock()
	return calls
}

// ListTablesWithContext calls ListTablesWithContextFunc.
func (mock *DynamoDBAPIMock) ListTablesWithContext(in1 context.Context, in2 *dynamodb.ListTablesInput, in3 ...request.Option) (*dynamodb.ListTablesOutput, error) {
	if mock.ListTablesWithContextFunc == nil {
		panic("DynamoDBAPIMock.ListTablesWithContextFunc: method is nil but DynamoDBAPI.ListTablesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *dynamodb.ListTablesInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockDynamoDBAPIMockListTablesWithContext.Lock()
	mock.calls.ListTablesWithContext = append(mock.calls.ListTablesWithContext, callInfo)
	lockDynamoDBAPIMockListTablesWithContext.Unlock()
	return mock.ListTablesWithContextFunc(in1, in2, in3...)
}

// ListTablesWithContextCalls gets all the calls that were made to ListTablesWithContext.
// Check the length with:
//     len(mockedDynamoDBAPI.ListTablesWithContextCalls())
func (mock *DynamoDBAPIMock) ListTablesWithContextCalls() []struct {
	In1 context.Context
	In2 *dynamodb.ListTablesInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *dynamodb.ListTablesInput
		In3 []request.Option
	}
	lockDynamoDBAPIMockListTablesWithContext.RLock()
	calls = mock.calls.ListTablesWithContext
	lockDynamoDBAPIMockListTablesWithContext.RUnlock()
	return calls
}

// ListTagsOfResource calls ListTagsOfResourceFunc.
func (mock *DynamoDBAPIMock) ListTagsOfResource(in1 *dynamodb.ListTagsOfResourceInput) (*dynamodb.ListTagsOfResourceOutput, error) {
	if mock.ListTagsOfResourceFunc == nil {
		panic("DynamoDBAPIMock.ListTagsOfResourceFunc: method is nil but DynamoDBAPI.ListTagsOfResource was just called")
	}
	callInfo := struct {
		In1 *dynamodb.ListTagsOfResourceInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockListTagsOfResource.Lock()
	mock.calls.ListTagsOfResource = append(mock.calls.ListTagsOfResource, callInfo)
	lockDynamoDBAPIMockListTagsOfResource.Unlock()
	return mock.ListTagsOfResourceFunc(in1)
}

// ListTagsOfResourceCalls gets all the calls that were made to ListTagsOfResource.
// Check the length with:
//     len(mockedDynamoDBAPI.ListTagsOfResourceCalls())
func (mock *DynamoDBAPIMock) ListTagsOfResourceCalls() []struct {
	In1 *dynamodb.ListTagsOfResourceInput
} {
	var calls []struct {
		In1 *dynamodb.ListTagsOfResourceInput
	}
	lockDynamoDBAPIMockListTagsOfResource.RLock()
	calls = mock.calls.ListTagsOfResource
	lockDynamoDBAPIMockListTagsOfResource.RUnlock()
	return calls
}

// ListTagsOfResourceRequest calls ListTagsOfResourceRequestFunc.
func (mock *DynamoDBAPIMock) ListTagsOfResourceRequest(in1 *dynamodb.ListTagsOfResourceInput) (*request.Request, *dynamodb.ListTagsOfResourceOutput) {
	if mock.ListTagsOfResourceRequestFunc == nil {
		panic("DynamoDBAPIMock.ListTagsOfResourceRequestFunc: method is nil but DynamoDBAPI.ListTagsOfResourceRequest was just called")
	}
	callInfo := struct {
		In1 *dynamodb.ListTagsOfResourceInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockListTagsOfResourceRequest.Lock()
	mock.calls.ListTagsOfResourceRequest = append(mock.calls.ListTagsOfResourceRequest, callInfo)
	lockDynamoDBAPIMockListTagsOfResourceRequest.Unlock()
	return mock.ListTagsOfResourceRequestFunc(in1)
}

// ListTagsOfResourceRequestCalls gets all the calls that were made to ListTagsOfResourceRequest.
// Check the length with:
//     len(mockedDynamoDBAPI.ListTagsOfResourceRequestCalls())
func (mock *DynamoDBAPIMock) ListTagsOfResourceRequestCalls() []struct {
	In1 *dynamodb.ListTagsOfResourceInput
} {
	var calls []struct {
		In1 *dynamodb.ListTagsOfResourceInput
	}
	lockDynamoDBAPIMockListTagsOfResourceRequest.RLock()
	calls = mock.calls.ListTagsOfResourceRequest
	lockDynamoDBAPIMockListTagsOfResourceRequest.RUnlock()
	return calls
}

// ListTagsOfResourceWithContext calls ListTagsOfResourceWithContextFunc.
func (mock *DynamoDBAPIMock) ListTagsOfResourceWithContext(in1 context.Context, in2 *dynamodb.ListTagsOfResourceInput, in3 ...request.Option) (*dynamodb.ListTagsOfResourceOutput, error) {
	if mock.ListTagsOfResourceWithContextFunc == nil {
		panic("DynamoDBAPIMock.ListTagsOfResourceWithContextFunc: method is nil but DynamoDBAPI.ListTagsOfResourceWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *dynamodb.ListTagsOfResourceInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockDynamoDBAPIMockListTagsOfResourceWithContext.Lock()
	mock.calls.ListTagsOfResourceWithContext = append(mock.calls.ListTagsOfResourceWithContext, callInfo)
	lockDynamoDBAPIMockListTagsOfResourceWithContext.Unlock()
	return mock.ListTagsOfResourceWithContextFunc(in1, in2, in3...)
}

// ListTagsOfResourceWithContextCalls gets all the calls that were made to ListTagsOfResourceWithContext.
// Check the length with:
//     len(mockedDynamoDBAPI.ListTagsOfResourceWithContextCalls())
func (mock *DynamoDBAPIMock) ListTagsOfResourceWithContextCalls() []struct {
	In1 context.Context
	In2 *dynamodb.ListTagsOfResourceInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *dynamodb.ListTagsOfResourceInput
		In3 []request.Option
	}
	lockDynamoDBAPIMockListTagsOfResourceWithContext.RLock()
	calls = mock.calls.ListTagsOfResourceWithContext
	lockDynamoDBAPIMockListTagsOfResourceWithContext.RUnlock()
	return calls
}

// PutItem calls PutItemFunc.
func (mock *DynamoDBAPIMock) PutItem(in1 *dynamodb.PutItemInput) (*dynamodb.PutItemOutput, error) {
	if mock.PutItemFunc == nil {
		panic("DynamoDBAPIMock.PutItemFunc: method is nil but DynamoDBAPI.PutItem was just called")
	}
	callInfo := struct {
		In1 *dynamodb.PutItemInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockPutItem.Lock()
	mock.calls.PutItem = append(mock.calls.PutItem, callInfo)
	lockDynamoDBAPIMockPutItem.Unlock()
	return mock.PutItemFunc(in1)
}

// PutItemCalls gets all the calls that were made to PutItem.
// Check the length with:
//     len(mockedDynamoDBAPI.PutItemCalls())
func (mock *DynamoDBAPIMock) PutItemCalls() []struct {
	In1 *dynamodb.PutItemInput
} {
	var calls []struct {
		In1 *dynamodb.PutItemInput
	}
	lockDynamoDBAPIMockPutItem.RLock()
	calls = mock.calls.PutItem
	lockDynamoDBAPIMockPutItem.RUnlock()
	return calls
}

// PutItemRequest calls PutItemRequestFunc.
func (mock *DynamoDBAPIMock) PutItemRequest(in1 *dynamodb.PutItemInput) (*request.Request, *dynamodb.PutItemOutput) {
	if mock.PutItemRequestFunc == nil {
		panic("DynamoDBAPIMock.PutItemRequestFunc: method is nil but DynamoDBAPI.PutItemRequest was just called")
	}
	callInfo := struct {
		In1 *dynamodb.PutItemInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockPutItemRequest.Lock()
	mock.calls.PutItemRequest = append(mock.calls.PutItemRequest, callInfo)
	lockDynamoDBAPIMockPutItemRequest.Unlock()
	return mock.PutItemRequestFunc(in1)
}

// PutItemRequestCalls gets all the calls that were made to PutItemRequest.
// Check the length with:
//     len(mockedDynamoDBAPI.PutItemRequestCalls())
func (mock *DynamoDBAPIMock) PutItemRequestCalls() []struct {
	In1 *dynamodb.PutItemInput
} {
	var calls []struct {
		In1 *dynamodb.PutItemInput
	}
	lockDynamoDBAPIMockPutItemRequest.RLock()
	calls = mock.calls.PutItemRequest
	lockDynamoDBAPIMockPutItemRequest.RUnlock()
	return calls
}

// PutItemWithContext calls PutItemWithContextFunc.
func (mock *DynamoDBAPIMock) PutItemWithContext(in1 context.Context, in2 *dynamodb.PutItemInput, in3 ...request.Option) (*dynamodb.PutItemOutput, error) {
	if mock.PutItemWithContextFunc == nil {
		panic("DynamoDBAPIMock.PutItemWithContextFunc: method is nil but DynamoDBAPI.PutItemWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *dynamodb.PutItemInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockDynamoDBAPIMockPutItemWithContext.Lock()
	mock.calls.PutItemWithContext = append(mock.calls.PutItemWithContext, callInfo)
	lockDynamoDBAPIMockPutItemWithContext.Unlock()
	return mock.PutItemWithContextFunc(in1, in2, in3...)
}

// PutItemWithContextCalls gets all the calls that were made to PutItemWithContext.
// Check the length with:
//     len(mockedDynamoDBAPI.PutItemWithContextCalls())
func (mock *DynamoDBAPIMock) PutItemWithContextCalls() []struct {
	In1 context.Context
	In2 *dynamodb.PutItemInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *dynamodb.PutItemInput
		In3 []request.Option
	}
	lockDynamoDBAPIMockPutItemWithContext.RLock()
	calls = mock.calls.PutItemWithContext
	lockDynamoDBAPIMockPutItemWithContext.RUnlock()
	return calls
}

// Query calls QueryFunc.
func (mock *DynamoDBAPIMock) Query(in1 *dynamodb.QueryInput) (*dynamodb.QueryOutput, error) {
	if mock.QueryFunc == nil {
		panic("DynamoDBAPIMock.QueryFunc: method is nil but DynamoDBAPI.Query was just called")
	}
	callInfo := struct {
		In1 *dynamodb.QueryInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockQuery.Lock()
	mock.calls.Query = append(mock.calls.Query, callInfo)
	lockDynamoDBAPIMockQuery.Unlock()
	return mock.QueryFunc(in1)
}

// QueryCalls gets all the calls that were made to Query.
// Check the length with:
//     len(mockedDynamoDBAPI.QueryCalls())
func (mock *DynamoDBAPIMock) QueryCalls() []struct {
	In1 *dynamodb.QueryInput
} {
	var calls []struct {
		In1 *dynamodb.QueryInput
	}
	lockDynamoDBAPIMockQuery.RLock()
	calls = mock.calls.Query
	lockDynamoDBAPIMockQuery.RUnlock()
	return calls
}

// QueryPages calls QueryPagesFunc.
func (mock *DynamoDBAPIMock) QueryPages(in1 *dynamodb.QueryInput, in2 func(*dynamodb.QueryOutput, bool) bool) error {
	if mock.QueryPagesFunc == nil {
		panic("DynamoDBAPIMock.QueryPagesFunc: method is nil but DynamoDBAPI.QueryPages was just called")
	}
	callInfo := struct {
		In1 *dynamodb.QueryInput
		In2 func(*dynamodb.QueryOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockDynamoDBAPIMockQueryPages.Lock()
	mock.calls.QueryPages = append(mock.calls.QueryPages, callInfo)
	lockDynamoDBAPIMockQueryPages.Unlock()
	return mock.QueryPagesFunc(in1, in2)
}

// QueryPagesCalls gets all the calls that were made to QueryPages.
// Check the length with:
//     len(mockedDynamoDBAPI.QueryPagesCalls())
func (mock *DynamoDBAPIMock) QueryPagesCalls() []struct {
	In1 *dynamodb.QueryInput
	In2 func(*dynamodb.QueryOutput, bool) bool
} {
	var calls []struct {
		In1 *dynamodb.QueryInput
		In2 func(*dynamodb.QueryOutput, bool) bool
	}
	lockDynamoDBAPIMockQueryPages.RLock()
	calls = mock.calls.QueryPages
	lockDynamoDBAPIMockQueryPages.RUnlock()
	return calls
}

// QueryPagesWithContext calls QueryPagesWithContextFunc.
func (mock *DynamoDBAPIMock) QueryPagesWithContext(in1 context.Context, in2 *dynamodb.QueryInput, in3 func(*dynamodb.QueryOutput, bool) bool, in4 ...request.Option) error {
	if mock.QueryPagesWithContextFunc == nil {
		panic("DynamoDBAPIMock.QueryPagesWithContextFunc: method is nil but DynamoDBAPI.QueryPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *dynamodb.QueryInput
		In3 func(*dynamodb.QueryOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockDynamoDBAPIMockQueryPagesWithContext.Lock()
	mock.calls.QueryPagesWithContext = append(mock.calls.QueryPagesWithContext, callInfo)
	lockDynamoDBAPIMockQueryPagesWithContext.Unlock()
	return mock.QueryPagesWithContextFunc(in1, in2, in3, in4...)
}

// QueryPagesWithContextCalls gets all the calls that were made to QueryPagesWithContext.
// Check the length with:
//     len(mockedDynamoDBAPI.QueryPagesWithContextCalls())
func (mock *DynamoDBAPIMock) QueryPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *dynamodb.QueryInput
	In3 func(*dynamodb.QueryOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *dynamodb.QueryInput
		In3 func(*dynamodb.QueryOutput, bool) bool
		In4 []request.Option
	}
	lockDynamoDBAPIMockQueryPagesWithContext.RLock()
	calls = mock.calls.QueryPagesWithContext
	lockDynamoDBAPIMockQueryPagesWithContext.RUnlock()
	return calls
}

// QueryRequest calls QueryRequestFunc.
func (mock *DynamoDBAPIMock) QueryRequest(in1 *dynamodb.QueryInput) (*request.Request, *dynamodb.QueryOutput) {
	if mock.QueryRequestFunc == nil {
		panic("DynamoDBAPIMock.QueryRequestFunc: method is nil but DynamoDBAPI.QueryRequest was just called")
	}
	callInfo := struct {
		In1 *dynamodb.QueryInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockQueryRequest.Lock()
	mock.calls.QueryRequest = append(mock.calls.QueryRequest, callInfo)
	lockDynamoDBAPIMockQueryRequest.Unlock()
	return mock.QueryRequestFunc(in1)
}

// QueryRequestCalls gets all the calls that were made to QueryRequest.
// Check the length with:
//     len(mockedDynamoDBAPI.QueryRequestCalls())
func (mock *DynamoDBAPIMock) QueryRequestCalls() []struct {
	In1 *dynamodb.QueryInput
} {
	var calls []struct {
		In1 *dynamodb.QueryInput
	}
	lockDynamoDBAPIMockQueryRequest.RLock()
	calls = mock.calls.QueryRequest
	lockDynamoDBAPIMockQueryRequest.RUnlock()
	return calls
}

// QueryWithContext calls QueryWithContextFunc.
func (mock *DynamoDBAPIMock) QueryWithContext(in1 context.Context, in2 *dynamodb.QueryInput, in3 ...request.Option) (*dynamodb.QueryOutput, error) {
	if mock.QueryWithContextFunc == nil {
		panic("DynamoDBAPIMock.QueryWithContextFunc: method is nil but DynamoDBAPI.QueryWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *dynamodb.QueryInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockDynamoDBAPIMockQueryWithContext.Lock()
	mock.calls.QueryWithContext = append(mock.calls.QueryWithContext, callInfo)
	lockDynamoDBAPIMockQueryWithContext.Unlock()
	return mock.QueryWithContextFunc(in1, in2, in3...)
}

// QueryWithContextCalls gets all the calls that were made to QueryWithContext.
// Check the length with:
//     len(mockedDynamoDBAPI.QueryWithContextCalls())
func (mock *DynamoDBAPIMock) QueryWithContextCalls() []struct {
	In1 context.Context
	In2 *dynamodb.QueryInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *dynamodb.QueryInput
		In3 []request.Option
	}
	lockDynamoDBAPIMockQueryWithContext.RLock()
	calls = mock.calls.QueryWithContext
	lockDynamoDBAPIMockQueryWithContext.RUnlock()
	return calls
}

// RestoreTableFromBackup calls RestoreTableFromBackupFunc.
func (mock *DynamoDBAPIMock) RestoreTableFromBackup(in1 *dynamodb.RestoreTableFromBackupInput) (*dynamodb.RestoreTableFromBackupOutput, error) {
	if mock.RestoreTableFromBackupFunc == nil {
		panic("DynamoDBAPIMock.RestoreTableFromBackupFunc: method is nil but DynamoDBAPI.RestoreTableFromBackup was just called")
	}
	callInfo := struct {
		In1 *dynamodb.RestoreTableFromBackupInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockRestoreTableFromBackup.Lock()
	mock.calls.RestoreTableFromBackup = append(mock.calls.RestoreTableFromBackup, callInfo)
	lockDynamoDBAPIMockRestoreTableFromBackup.Unlock()
	return mock.RestoreTableFromBackupFunc(in1)
}

// RestoreTableFromBackupCalls gets all the calls that were made to RestoreTableFromBackup.
// Check the length with:
//     len(mockedDynamoDBAPI.RestoreTableFromBackupCalls())
func (mock *DynamoDBAPIMock) RestoreTableFromBackupCalls() []struct {
	In1 *dynamodb.RestoreTableFromBackupInput
} {
	var calls []struct {
		In1 *dynamodb.RestoreTableFromBackupInput
	}
	lockDynamoDBAPIMockRestoreTableFromBackup.RLock()
	calls = mock.calls.RestoreTableFromBackup
	lockDynamoDBAPIMockRestoreTableFromBackup.RUnlock()
	return calls
}

// RestoreTableFromBackupRequest calls RestoreTableFromBackupRequestFunc.
func (mock *DynamoDBAPIMock) RestoreTableFromBackupRequest(in1 *dynamodb.RestoreTableFromBackupInput) (*request.Request, *dynamodb.RestoreTableFromBackupOutput) {
	if mock.RestoreTableFromBackupRequestFunc == nil {
		panic("DynamoDBAPIMock.RestoreTableFromBackupRequestFunc: method is nil but DynamoDBAPI.RestoreTableFromBackupRequest was just called")
	}
	callInfo := struct {
		In1 *dynamodb.RestoreTableFromBackupInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockRestoreTableFromBackupRequest.Lock()
	mock.calls.RestoreTableFromBackupRequest = append(mock.calls.RestoreTableFromBackupRequest, callInfo)
	lockDynamoDBAPIMockRestoreTableFromBackupRequest.Unlock()
	return mock.RestoreTableFromBackupRequestFunc(in1)
}

// RestoreTableFromBackupRequestCalls gets all the calls that were made to RestoreTableFromBackupRequest.
// Check the length with:
//     len(mockedDynamoDBAPI.RestoreTableFromBackupRequestCalls())
func (mock *DynamoDBAPIMock) RestoreTableFromBackupRequestCalls() []struct {
	In1 *dynamodb.RestoreTableFromBackupInput
} {
	var calls []struct {
		In1 *dynamodb.RestoreTableFromBackupInput
	}
	lockDynamoDBAPIMockRestoreTableFromBackupRequest.RLock()
	calls = mock.calls.RestoreTableFromBackupRequest
	lockDynamoDBAPIMockRestoreTableFromBackupRequest.RUnlock()
	return calls
}

// RestoreTableFromBackupWithContext calls RestoreTableFromBackupWithContextFunc.
func (mock *DynamoDBAPIMock) RestoreTableFromBackupWithContext(in1 context.Context, in2 *dynamodb.RestoreTableFromBackupInput, in3 ...request.Option) (*dynamodb.RestoreTableFromBackupOutput, error) {
	if mock.RestoreTableFromBackupWithContextFunc == nil {
		panic("DynamoDBAPIMock.RestoreTableFromBackupWithContextFunc: method is nil but DynamoDBAPI.RestoreTableFromBackupWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *dynamodb.RestoreTableFromBackupInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockDynamoDBAPIMockRestoreTableFromBackupWithContext.Lock()
	mock.calls.RestoreTableFromBackupWithContext = append(mock.calls.RestoreTableFromBackupWithContext, callInfo)
	lockDynamoDBAPIMockRestoreTableFromBackupWithContext.Unlock()
	return mock.RestoreTableFromBackupWithContextFunc(in1, in2, in3...)
}

// RestoreTableFromBackupWithContextCalls gets all the calls that were made to RestoreTableFromBackupWithContext.
// Check the length with:
//     len(mockedDynamoDBAPI.RestoreTableFromBackupWithContextCalls())
func (mock *DynamoDBAPIMock) RestoreTableFromBackupWithContextCalls() []struct {
	In1 context.Context
	In2 *dynamodb.RestoreTableFromBackupInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *dynamodb.RestoreTableFromBackupInput
		In3 []request.Option
	}
	lockDynamoDBAPIMockRestoreTableFromBackupWithContext.RLock()
	calls = mock.calls.RestoreTableFromBackupWithContext
	lockDynamoDBAPIMockRestoreTableFromBackupWithContext.RUnlock()
	return calls
}

// RestoreTableToPointInTime calls RestoreTableToPointInTimeFunc.
func (mock *DynamoDBAPIMock) RestoreTableToPointInTime(in1 *dynamodb.RestoreTableToPointInTimeInput) (*dynamodb.RestoreTableToPointInTimeOutput, error) {
	if mock.RestoreTableToPointInTimeFunc == nil {
		panic("DynamoDBAPIMock.RestoreTableToPointInTimeFunc: method is nil but DynamoDBAPI.RestoreTableToPointInTime was just called")
	}
	callInfo := struct {
		In1 *dynamodb.RestoreTableToPointInTimeInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockRestoreTableToPointInTime.Lock()
	mock.calls.RestoreTableToPointInTime = append(mock.calls.RestoreTableToPointInTime, callInfo)
	lockDynamoDBAPIMockRestoreTableToPointInTime.Unlock()
	return mock.RestoreTableToPointInTimeFunc(in1)
}

// RestoreTableToPointInTimeCalls gets all the calls that were made to RestoreTableToPointInTime.
// Check the length with:
//     len(mockedDynamoDBAPI.RestoreTableToPointInTimeCalls())
func (mock *DynamoDBAPIMock) RestoreTableToPointInTimeCalls() []struct {
	In1 *dynamodb.RestoreTableToPointInTimeInput
} {
	var calls []struct {
		In1 *dynamodb.RestoreTableToPointInTimeInput
	}
	lockDynamoDBAPIMockRestoreTableToPointInTime.RLock()
	calls = mock.calls.RestoreTableToPointInTime
	lockDynamoDBAPIMockRestoreTableToPointInTime.RUnlock()
	return calls
}

// RestoreTableToPointInTimeRequest calls RestoreTableToPointInTimeRequestFunc.
func (mock *DynamoDBAPIMock) RestoreTableToPointInTimeRequest(in1 *dynamodb.RestoreTableToPointInTimeInput) (*request.Request, *dynamodb.RestoreTableToPointInTimeOutput) {
	if mock.RestoreTableToPointInTimeRequestFunc == nil {
		panic("DynamoDBAPIMock.RestoreTableToPointInTimeRequestFunc: method is nil but DynamoDBAPI.RestoreTableToPointInTimeRequest was just called")
	}
	callInfo := struct {
		In1 *dynamodb.RestoreTableToPointInTimeInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockRestoreTableToPointInTimeRequest.Lock()
	mock.calls.RestoreTableToPointInTimeRequest = append(mock.calls.RestoreTableToPointInTimeRequest, callInfo)
	lockDynamoDBAPIMockRestoreTableToPointInTimeRequest.Unlock()
	return mock.RestoreTableToPointInTimeRequestFunc(in1)
}

// RestoreTableToPointInTimeRequestCalls gets all the calls that were made to RestoreTableToPointInTimeRequest.
// Check the length with:
//     len(mockedDynamoDBAPI.RestoreTableToPointInTimeRequestCalls())
func (mock *DynamoDBAPIMock) RestoreTableToPointInTimeRequestCalls() []struct {
	In1 *dynamodb.RestoreTableToPointInTimeInput
} {
	var calls []struct {
		In1 *dynamodb.RestoreTableToPointInTimeInput
	}
	lockDynamoDBAPIMockRestoreTableToPointInTimeRequest.RLock()
	calls = mock.calls.RestoreTableToPointInTimeRequest
	lockDynamoDBAPIMockRestoreTableToPointInTimeRequest.RUnlock()
	return calls
}

// RestoreTableToPointInTimeWithContext calls RestoreTableToPointInTimeWithContextFunc.
func (mock *DynamoDBAPIMock) RestoreTableToPointInTimeWithContext(in1 context.Context, in2 *dynamodb.RestoreTableToPointInTimeInput, in3 ...request.Option) (*dynamodb.RestoreTableToPointInTimeOutput, error) {
	if mock.RestoreTableToPointInTimeWithContextFunc == nil {
		panic("DynamoDBAPIMock.RestoreTableToPointInTimeWithContextFunc: method is nil but DynamoDBAPI.RestoreTableToPointInTimeWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *dynamodb.RestoreTableToPointInTimeInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockDynamoDBAPIMockRestoreTableToPointInTimeWithContext.Lock()
	mock.calls.RestoreTableToPointInTimeWithContext = append(mock.calls.RestoreTableToPointInTimeWithContext, callInfo)
	lockDynamoDBAPIMockRestoreTableToPointInTimeWithContext.Unlock()
	return mock.RestoreTableToPointInTimeWithContextFunc(in1, in2, in3...)
}

// RestoreTableToPointInTimeWithContextCalls gets all the calls that were made to RestoreTableToPointInTimeWithContext.
// Check the length with:
//     len(mockedDynamoDBAPI.RestoreTableToPointInTimeWithContextCalls())
func (mock *DynamoDBAPIMock) RestoreTableToPointInTimeWithContextCalls() []struct {
	In1 context.Context
	In2 *dynamodb.RestoreTableToPointInTimeInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *dynamodb.RestoreTableToPointInTimeInput
		In3 []request.Option
	}
	lockDynamoDBAPIMockRestoreTableToPointInTimeWithContext.RLock()
	calls = mock.calls.RestoreTableToPointInTimeWithContext
	lockDynamoDBAPIMockRestoreTableToPointInTimeWithContext.RUnlock()
	return calls
}

// Scan calls ScanFunc.
func (mock *DynamoDBAPIMock) Scan(in1 *dynamodb.ScanInput) (*dynamodb.ScanOutput, error) {
	if mock.ScanFunc == nil {
		panic("DynamoDBAPIMock.ScanFunc: method is nil but DynamoDBAPI.Scan was just called")
	}
	callInfo := struct {
		In1 *dynamodb.ScanInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockScan.Lock()
	mock.calls.Scan = append(mock.calls.Scan, callInfo)
	lockDynamoDBAPIMockScan.Unlock()
	return mock.ScanFunc(in1)
}

// ScanCalls gets all the calls that were made to Scan.
// Check the length with:
//     len(mockedDynamoDBAPI.ScanCalls())
func (mock *DynamoDBAPIMock) ScanCalls() []struct {
	In1 *dynamodb.ScanInput
} {
	var calls []struct {
		In1 *dynamodb.ScanInput
	}
	lockDynamoDBAPIMockScan.RLock()
	calls = mock.calls.Scan
	lockDynamoDBAPIMockScan.RUnlock()
	return calls
}

// ScanPages calls ScanPagesFunc.
func (mock *DynamoDBAPIMock) ScanPages(in1 *dynamodb.ScanInput, in2 func(*dynamodb.ScanOutput, bool) bool) error {
	if mock.ScanPagesFunc == nil {
		panic("DynamoDBAPIMock.ScanPagesFunc: method is nil but DynamoDBAPI.ScanPages was just called")
	}
	callInfo := struct {
		In1 *dynamodb.ScanInput
		In2 func(*dynamodb.ScanOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockDynamoDBAPIMockScanPages.Lock()
	mock.calls.ScanPages = append(mock.calls.ScanPages, callInfo)
	lockDynamoDBAPIMockScanPages.Unlock()
	return mock.ScanPagesFunc(in1, in2)
}

// ScanPagesCalls gets all the calls that were made to ScanPages.
// Check the length with:
//     len(mockedDynamoDBAPI.ScanPagesCalls())
func (mock *DynamoDBAPIMock) ScanPagesCalls() []struct {
	In1 *dynamodb.ScanInput
	In2 func(*dynamodb.ScanOutput, bool) bool
} {
	var calls []struct {
		In1 *dynamodb.ScanInput
		In2 func(*dynamodb.ScanOutput, bool) bool
	}
	lockDynamoDBAPIMockScanPages.RLock()
	calls = mock.calls.ScanPages
	lockDynamoDBAPIMockScanPages.RUnlock()
	return calls
}

// ScanPagesWithContext calls ScanPagesWithContextFunc.
func (mock *DynamoDBAPIMock) ScanPagesWithContext(in1 context.Context, in2 *dynamodb.ScanInput, in3 func(*dynamodb.ScanOutput, bool) bool, in4 ...request.Option) error {
	if mock.ScanPagesWithContextFunc == nil {
		panic("DynamoDBAPIMock.ScanPagesWithContextFunc: method is nil but DynamoDBAPI.ScanPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *dynamodb.ScanInput
		In3 func(*dynamodb.ScanOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockDynamoDBAPIMockScanPagesWithContext.Lock()
	mock.calls.ScanPagesWithContext = append(mock.calls.ScanPagesWithContext, callInfo)
	lockDynamoDBAPIMockScanPagesWithContext.Unlock()
	return mock.ScanPagesWithContextFunc(in1, in2, in3, in4...)
}

// ScanPagesWithContextCalls gets all the calls that were made to ScanPagesWithContext.
// Check the length with:
//     len(mockedDynamoDBAPI.ScanPagesWithContextCalls())
func (mock *DynamoDBAPIMock) ScanPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *dynamodb.ScanInput
	In3 func(*dynamodb.ScanOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *dynamodb.ScanInput
		In3 func(*dynamodb.ScanOutput, bool) bool
		In4 []request.Option
	}
	lockDynamoDBAPIMockScanPagesWithContext.RLock()
	calls = mock.calls.ScanPagesWithContext
	lockDynamoDBAPIMockScanPagesWithContext.RUnlock()
	return calls
}

// ScanRequest calls ScanRequestFunc.
func (mock *DynamoDBAPIMock) ScanRequest(in1 *dynamodb.ScanInput) (*request.Request, *dynamodb.ScanOutput) {
	if mock.ScanRequestFunc == nil {
		panic("DynamoDBAPIMock.ScanRequestFunc: method is nil but DynamoDBAPI.ScanRequest was just called")
	}
	callInfo := struct {
		In1 *dynamodb.ScanInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockScanRequest.Lock()
	mock.calls.ScanRequest = append(mock.calls.ScanRequest, callInfo)
	lockDynamoDBAPIMockScanRequest.Unlock()
	return mock.ScanRequestFunc(in1)
}

// ScanRequestCalls gets all the calls that were made to ScanRequest.
// Check the length with:
//     len(mockedDynamoDBAPI.ScanRequestCalls())
func (mock *DynamoDBAPIMock) ScanRequestCalls() []struct {
	In1 *dynamodb.ScanInput
} {
	var calls []struct {
		In1 *dynamodb.ScanInput
	}
	lockDynamoDBAPIMockScanRequest.RLock()
	calls = mock.calls.ScanRequest
	lockDynamoDBAPIMockScanRequest.RUnlock()
	return calls
}

// ScanWithContext calls ScanWithContextFunc.
func (mock *DynamoDBAPIMock) ScanWithContext(in1 context.Context, in2 *dynamodb.ScanInput, in3 ...request.Option) (*dynamodb.ScanOutput, error) {
	if mock.ScanWithContextFunc == nil {
		panic("DynamoDBAPIMock.ScanWithContextFunc: method is nil but DynamoDBAPI.ScanWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *dynamodb.ScanInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockDynamoDBAPIMockScanWithContext.Lock()
	mock.calls.ScanWithContext = append(mock.calls.ScanWithContext, callInfo)
	lockDynamoDBAPIMockScanWithContext.Unlock()
	return mock.ScanWithContextFunc(in1, in2, in3...)
}

// ScanWithContextCalls gets all the calls that were made to ScanWithContext.
// Check the length with:
//     len(mockedDynamoDBAPI.ScanWithContextCalls())
func (mock *DynamoDBAPIMock) ScanWithContextCalls() []struct {
	In1 context.Context
	In2 *dynamodb.ScanInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *dynamodb.ScanInput
		In3 []request.Option
	}
	lockDynamoDBAPIMockScanWithContext.RLock()
	calls = mock.calls.ScanWithContext
	lockDynamoDBAPIMockScanWithContext.RUnlock()
	return calls
}

// TagResource calls TagResourceFunc.
func (mock *DynamoDBAPIMock) TagResource(in1 *dynamodb.TagResourceInput) (*dynamodb.TagResourceOutput, error) {
	if mock.TagResourceFunc == nil {
		panic("DynamoDBAPIMock.TagResourceFunc: method is nil but DynamoDBAPI.TagResource was just called")
	}
	callInfo := struct {
		In1 *dynamodb.TagResourceInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockTagResource.Lock()
	mock.calls.TagResource = append(mock.calls.TagResource, callInfo)
	lockDynamoDBAPIMockTagResource.Unlock()
	return mock.TagResourceFunc(in1)
}

// TagResourceCalls gets all the calls that were made to TagResource.
// Check the length with:
//     len(mockedDynamoDBAPI.TagResourceCalls())
func (mock *DynamoDBAPIMock) TagResourceCalls() []struct {
	In1 *dynamodb.TagResourceInput
} {
	var calls []struct {
		In1 *dynamodb.TagResourceInput
	}
	lockDynamoDBAPIMockTagResource.RLock()
	calls = mock.calls.TagResource
	lockDynamoDBAPIMockTagResource.RUnlock()
	return calls
}

// TagResourceRequest calls TagResourceRequestFunc.
func (mock *DynamoDBAPIMock) TagResourceRequest(in1 *dynamodb.TagResourceInput) (*request.Request, *dynamodb.TagResourceOutput) {
	if mock.TagResourceRequestFunc == nil {
		panic("DynamoDBAPIMock.TagResourceRequestFunc: method is nil but DynamoDBAPI.TagResourceRequest was just called")
	}
	callInfo := struct {
		In1 *dynamodb.TagResourceInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockTagResourceRequest.Lock()
	mock.calls.TagResourceRequest = append(mock.calls.TagResourceRequest, callInfo)
	lockDynamoDBAPIMockTagResourceRequest.Unlock()
	return mock.TagResourceRequestFunc(in1)
}

// TagResourceRequestCalls gets all the calls that were made to TagResourceRequest.
// Check the length with:
//     len(mockedDynamoDBAPI.TagResourceRequestCalls())
func (mock *DynamoDBAPIMock) TagResourceRequestCalls() []struct {
	In1 *dynamodb.TagResourceInput
} {
	var calls []struct {
		In1 *dynamodb.TagResourceInput
	}
	lockDynamoDBAPIMockTagResourceRequest.RLock()
	calls = mock.calls.TagResourceRequest
	lockDynamoDBAPIMockTagResourceRequest.RUnlock()
	return calls
}

// TagResourceWithContext calls TagResourceWithContextFunc.
func (mock *DynamoDBAPIMock) TagResourceWithContext(in1 context.Context, in2 *dynamodb.TagResourceInput, in3 ...request.Option) (*dynamodb.TagResourceOutput, error) {
	if mock.TagResourceWithContextFunc == nil {
		panic("DynamoDBAPIMock.TagResourceWithContextFunc: method is nil but DynamoDBAPI.TagResourceWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *dynamodb.TagResourceInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockDynamoDBAPIMockTagResourceWithContext.Lock()
	mock.calls.TagResourceWithContext = append(mock.calls.TagResourceWithContext, callInfo)
	lockDynamoDBAPIMockTagResourceWithContext.Unlock()
	return mock.TagResourceWithContextFunc(in1, in2, in3...)
}

// TagResourceWithContextCalls gets all the calls that were made to TagResourceWithContext.
// Check the length with:
//     len(mockedDynamoDBAPI.TagResourceWithContextCalls())
func (mock *DynamoDBAPIMock) TagResourceWithContextCalls() []struct {
	In1 context.Context
	In2 *dynamodb.TagResourceInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *dynamodb.TagResourceInput
		In3 []request.Option
	}
	lockDynamoDBAPIMockTagResourceWithContext.RLock()
	calls = mock.calls.TagResourceWithContext
	lockDynamoDBAPIMockTagResourceWithContext.RUnlock()
	return calls
}

// TransactGetItems calls TransactGetItemsFunc.
func (mock *DynamoDBAPIMock) TransactGetItems(in1 *dynamodb.TransactGetItemsInput) (*dynamodb.TransactGetItemsOutput, error) {
	if mock.TransactGetItemsFunc == nil {
		panic("DynamoDBAPIMock.TransactGetItemsFunc: method is nil but DynamoDBAPI.TransactGetItems was just called")
	}
	callInfo := struct {
		In1 *dynamodb.TransactGetItemsInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockTransactGetItems.Lock()
	mock.calls.TransactGetItems = append(mock.calls.TransactGetItems, callInfo)
	lockDynamoDBAPIMockTransactGetItems.Unlock()
	return mock.TransactGetItemsFunc(in1)
}

// TransactGetItemsCalls gets all the calls that were made to TransactGetItems.
// Check the length with:
//     len(mockedDynamoDBAPI.TransactGetItemsCalls())
func (mock *DynamoDBAPIMock) TransactGetItemsCalls() []struct {
	In1 *dynamodb.TransactGetItemsInput
} {
	var calls []struct {
		In1 *dynamodb.TransactGetItemsInput
	}
	lockDynamoDBAPIMockTransactGetItems.RLock()
	calls = mock.calls.TransactGetItems
	lockDynamoDBAPIMockTransactGetItems.RUnlock()
	return calls
}

// TransactGetItemsRequest calls TransactGetItemsRequestFunc.
func (mock *DynamoDBAPIMock) TransactGetItemsRequest(in1 *dynamodb.TransactGetItemsInput) (*request.Request, *dynamodb.TransactGetItemsOutput) {
	if mock.TransactGetItemsRequestFunc == nil {
		panic("DynamoDBAPIMock.TransactGetItemsRequestFunc: method is nil but DynamoDBAPI.TransactGetItemsRequest was just called")
	}
	callInfo := struct {
		In1 *dynamodb.TransactGetItemsInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockTransactGetItemsRequest.Lock()
	mock.calls.TransactGetItemsRequest = append(mock.calls.TransactGetItemsRequest, callInfo)
	lockDynamoDBAPIMockTransactGetItemsRequest.Unlock()
	return mock.TransactGetItemsRequestFunc(in1)
}

// TransactGetItemsRequestCalls gets all the calls that were made to TransactGetItemsRequest.
// Check the length with:
//     len(mockedDynamoDBAPI.TransactGetItemsRequestCalls())
func (mock *DynamoDBAPIMock) TransactGetItemsRequestCalls() []struct {
	In1 *dynamodb.TransactGetItemsInput
} {
	var calls []struct {
		In1 *dynamodb.TransactGetItemsInput
	}
	lockDynamoDBAPIMockTransactGetItemsRequest.RLock()
	calls = mock.calls.TransactGetItemsRequest
	lockDynamoDBAPIMockTransactGetItemsRequest.RUnlock()
	return calls
}

// TransactGetItemsWithContext calls TransactGetItemsWithContextFunc.
func (mock *DynamoDBAPIMock) TransactGetItemsWithContext(in1 context.Context, in2 *dynamodb.TransactGetItemsInput, in3 ...request.Option) (*dynamodb.TransactGetItemsOutput, error) {
	if mock.TransactGetItemsWithContextFunc == nil {
		panic("DynamoDBAPIMock.TransactGetItemsWithContextFunc: method is nil but DynamoDBAPI.TransactGetItemsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *dynamodb.TransactGetItemsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockDynamoDBAPIMockTransactGetItemsWithContext.Lock()
	mock.calls.TransactGetItemsWithContext = append(mock.calls.TransactGetItemsWithContext, callInfo)
	lockDynamoDBAPIMockTransactGetItemsWithContext.Unlock()
	return mock.TransactGetItemsWithContextFunc(in1, in2, in3...)
}

// TransactGetItemsWithContextCalls gets all the calls that were made to TransactGetItemsWithContext.
// Check the length with:
//     len(mockedDynamoDBAPI.TransactGetItemsWithContextCalls())
func (mock *DynamoDBAPIMock) TransactGetItemsWithContextCalls() []struct {
	In1 context.Context
	In2 *dynamodb.TransactGetItemsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *dynamodb.TransactGetItemsInput
		In3 []request.Option
	}
	lockDynamoDBAPIMockTransactGetItemsWithContext.RLock()
	calls = mock.calls.TransactGetItemsWithContext
	lockDynamoDBAPIMockTransactGetItemsWithContext.RUnlock()
	return calls
}

// TransactWriteItems calls TransactWriteItemsFunc.
func (mock *DynamoDBAPIMock) TransactWriteItems(in1 *dynamodb.TransactWriteItemsInput) (*dynamodb.TransactWriteItemsOutput, error) {
	if mock.TransactWriteItemsFunc == nil {
		panic("DynamoDBAPIMock.TransactWriteItemsFunc: method is nil but DynamoDBAPI.TransactWriteItems was just called")
	}
	callInfo := struct {
		In1 *dynamodb.TransactWriteItemsInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockTransactWriteItems.Lock()
	mock.calls.TransactWriteItems = append(mock.calls.TransactWriteItems, callInfo)
	lockDynamoDBAPIMockTransactWriteItems.Unlock()
	return mock.TransactWriteItemsFunc(in1)
}

// TransactWriteItemsCalls gets all the calls that were made to TransactWriteItems.
// Check the length with:
//     len(mockedDynamoDBAPI.TransactWriteItemsCalls())
func (mock *DynamoDBAPIMock) TransactWriteItemsCalls() []struct {
	In1 *dynamodb.TransactWriteItemsInput
} {
	var calls []struct {
		In1 *dynamodb.TransactWriteItemsInput
	}
	lockDynamoDBAPIMockTransactWriteItems.RLock()
	calls = mock.calls.TransactWriteItems
	lockDynamoDBAPIMockTransactWriteItems.RUnlock()
	return calls
}

// TransactWriteItemsRequest calls TransactWriteItemsRequestFunc.
func (mock *DynamoDBAPIMock) TransactWriteItemsRequest(in1 *dynamodb.TransactWriteItemsInput) (*request.Request, *dynamodb.TransactWriteItemsOutput) {
	if mock.TransactWriteItemsRequestFunc == nil {
		panic("DynamoDBAPIMock.TransactWriteItemsRequestFunc: method is nil but DynamoDBAPI.TransactWriteItemsRequest was just called")
	}
	callInfo := struct {
		In1 *dynamodb.TransactWriteItemsInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockTransactWriteItemsRequest.Lock()
	mock.calls.TransactWriteItemsRequest = append(mock.calls.TransactWriteItemsRequest, callInfo)
	lockDynamoDBAPIMockTransactWriteItemsRequest.Unlock()
	return mock.TransactWriteItemsRequestFunc(in1)
}

// TransactWriteItemsRequestCalls gets all the calls that were made to TransactWriteItemsRequest.
// Check the length with:
//     len(mockedDynamoDBAPI.TransactWriteItemsRequestCalls())
func (mock *DynamoDBAPIMock) TransactWriteItemsRequestCalls() []struct {
	In1 *dynamodb.TransactWriteItemsInput
} {
	var calls []struct {
		In1 *dynamodb.TransactWriteItemsInput
	}
	lockDynamoDBAPIMockTransactWriteItemsRequest.RLock()
	calls = mock.calls.TransactWriteItemsRequest
	lockDynamoDBAPIMockTransactWriteItemsRequest.RUnlock()
	return calls
}

// TransactWriteItemsWithContext calls TransactWriteItemsWithContextFunc.
func (mock *DynamoDBAPIMock) TransactWriteItemsWithContext(in1 context.Context, in2 *dynamodb.TransactWriteItemsInput, in3 ...request.Option) (*dynamodb.TransactWriteItemsOutput, error) {
	if mock.TransactWriteItemsWithContextFunc == nil {
		panic("DynamoDBAPIMock.TransactWriteItemsWithContextFunc: method is nil but DynamoDBAPI.TransactWriteItemsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *dynamodb.TransactWriteItemsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockDynamoDBAPIMockTransactWriteItemsWithContext.Lock()
	mock.calls.TransactWriteItemsWithContext = append(mock.calls.TransactWriteItemsWithContext, callInfo)
	lockDynamoDBAPIMockTransactWriteItemsWithContext.Unlock()
	return mock.TransactWriteItemsWithContextFunc(in1, in2, in3...)
}

// TransactWriteItemsWithContextCalls gets all the calls that were made to TransactWriteItemsWithContext.
// Check the length with:
//     len(mockedDynamoDBAPI.TransactWriteItemsWithContextCalls())
func (mock *DynamoDBAPIMock) TransactWriteItemsWithContextCalls() []struct {
	In1 context.Context
	In2 *dynamodb.TransactWriteItemsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *dynamodb.TransactWriteItemsInput
		In3 []request.Option
	}
	lockDynamoDBAPIMockTransactWriteItemsWithContext.RLock()
	calls = mock.calls.TransactWriteItemsWithContext
	lockDynamoDBAPIMockTransactWriteItemsWithContext.RUnlock()
	return calls
}

// UntagResource calls UntagResourceFunc.
func (mock *DynamoDBAPIMock) UntagResource(in1 *dynamodb.UntagResourceInput) (*dynamodb.UntagResourceOutput, error) {
	if mock.UntagResourceFunc == nil {
		panic("DynamoDBAPIMock.UntagResourceFunc: method is nil but DynamoDBAPI.UntagResource was just called")
	}
	callInfo := struct {
		In1 *dynamodb.UntagResourceInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockUntagResource.Lock()
	mock.calls.UntagResource = append(mock.calls.UntagResource, callInfo)
	lockDynamoDBAPIMockUntagResource.Unlock()
	return mock.UntagResourceFunc(in1)
}

// UntagResourceCalls gets all the calls that were made to UntagResource.
// Check the length with:
//     len(mockedDynamoDBAPI.UntagResourceCalls())
func (mock *DynamoDBAPIMock) UntagResourceCalls() []struct {
	In1 *dynamodb.UntagResourceInput
} {
	var calls []struct {
		In1 *dynamodb.UntagResourceInput
	}
	lockDynamoDBAPIMockUntagResource.RLock()
	calls = mock.calls.UntagResource
	lockDynamoDBAPIMockUntagResource.RUnlock()
	return calls
}

// UntagResourceRequest calls UntagResourceRequestFunc.
func (mock *DynamoDBAPIMock) UntagResourceRequest(in1 *dynamodb.UntagResourceInput) (*request.Request, *dynamodb.UntagResourceOutput) {
	if mock.UntagResourceRequestFunc == nil {
		panic("DynamoDBAPIMock.UntagResourceRequestFunc: method is nil but DynamoDBAPI.UntagResourceRequest was just called")
	}
	callInfo := struct {
		In1 *dynamodb.UntagResourceInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockUntagResourceRequest.Lock()
	mock.calls.UntagResourceRequest = append(mock.calls.UntagResourceRequest, callInfo)
	lockDynamoDBAPIMockUntagResourceRequest.Unlock()
	return mock.UntagResourceRequestFunc(in1)
}

// UntagResourceRequestCalls gets all the calls that were made to UntagResourceRequest.
// Check the length with:
//     len(mockedDynamoDBAPI.UntagResourceRequestCalls())
func (mock *DynamoDBAPIMock) UntagResourceRequestCalls() []struct {
	In1 *dynamodb.UntagResourceInput
} {
	var calls []struct {
		In1 *dynamodb.UntagResourceInput
	}
	lockDynamoDBAPIMockUntagResourceRequest.RLock()
	calls = mock.calls.UntagResourceRequest
	lockDynamoDBAPIMockUntagResourceRequest.RUnlock()
	return calls
}

// UntagResourceWithContext calls UntagResourceWithContextFunc.
func (mock *DynamoDBAPIMock) UntagResourceWithContext(in1 context.Context, in2 *dynamodb.UntagResourceInput, in3 ...request.Option) (*dynamodb.UntagResourceOutput, error) {
	if mock.UntagResourceWithContextFunc == nil {
		panic("DynamoDBAPIMock.UntagResourceWithContextFunc: method is nil but DynamoDBAPI.UntagResourceWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *dynamodb.UntagResourceInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockDynamoDBAPIMockUntagResourceWithContext.Lock()
	mock.calls.UntagResourceWithContext = append(mock.calls.UntagResourceWithContext, callInfo)
	lockDynamoDBAPIMockUntagResourceWithContext.Unlock()
	return mock.UntagResourceWithContextFunc(in1, in2, in3...)
}

// UntagResourceWithContextCalls gets all the calls that were made to UntagResourceWithContext.
// Check the length with:
//     len(mockedDynamoDBAPI.UntagResourceWithContextCalls())
func (mock *DynamoDBAPIMock) UntagResourceWithContextCalls() []struct {
	In1 context.Context
	In2 *dynamodb.UntagResourceInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *dynamodb.UntagResourceInput
		In3 []request.Option
	}
	lockDynamoDBAPIMockUntagResourceWithContext.RLock()
	calls = mock.calls.UntagResourceWithContext
	lockDynamoDBAPIMockUntagResourceWithContext.RUnlock()
	return calls
}

// UpdateContinuousBackups calls UpdateContinuousBackupsFunc.
func (mock *DynamoDBAPIMock) UpdateContinuousBackups(in1 *dynamodb.UpdateContinuousBackupsInput) (*dynamodb.UpdateContinuousBackupsOutput, error) {
	if mock.UpdateContinuousBackupsFunc == nil {
		panic("DynamoDBAPIMock.UpdateContinuousBackupsFunc: method is nil but DynamoDBAPI.UpdateContinuousBackups was just called")
	}
	callInfo := struct {
		In1 *dynamodb.UpdateContinuousBackupsInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockUpdateContinuousBackups.Lock()
	mock.calls.UpdateContinuousBackups = append(mock.calls.UpdateContinuousBackups, callInfo)
	lockDynamoDBAPIMockUpdateContinuousBackups.Unlock()
	return mock.UpdateContinuousBackupsFunc(in1)
}

// UpdateContinuousBackupsCalls gets all the calls that were made to UpdateContinuousBackups.
// Check the length with:
//     len(mockedDynamoDBAPI.UpdateContinuousBackupsCalls())
func (mock *DynamoDBAPIMock) UpdateContinuousBackupsCalls() []struct {
	In1 *dynamodb.UpdateContinuousBackupsInput
} {
	var calls []struct {
		In1 *dynamodb.UpdateContinuousBackupsInput
	}
	lockDynamoDBAPIMockUpdateContinuousBackups.RLock()
	calls = mock.calls.UpdateContinuousBackups
	lockDynamoDBAPIMockUpdateContinuousBackups.RUnlock()
	return calls
}

// UpdateContinuousBackupsRequest calls UpdateContinuousBackupsRequestFunc.
func (mock *DynamoDBAPIMock) UpdateContinuousBackupsRequest(in1 *dynamodb.UpdateContinuousBackupsInput) (*request.Request, *dynamodb.UpdateContinuousBackupsOutput) {
	if mock.UpdateContinuousBackupsRequestFunc == nil {
		panic("DynamoDBAPIMock.UpdateContinuousBackupsRequestFunc: method is nil but DynamoDBAPI.UpdateContinuousBackupsRequest was just called")
	}
	callInfo := struct {
		In1 *dynamodb.UpdateContinuousBackupsInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockUpdateContinuousBackupsRequest.Lock()
	mock.calls.UpdateContinuousBackupsRequest = append(mock.calls.UpdateContinuousBackupsRequest, callInfo)
	lockDynamoDBAPIMockUpdateContinuousBackupsRequest.Unlock()
	return mock.UpdateContinuousBackupsRequestFunc(in1)
}

// UpdateContinuousBackupsRequestCalls gets all the calls that were made to UpdateContinuousBackupsRequest.
// Check the length with:
//     len(mockedDynamoDBAPI.UpdateContinuousBackupsRequestCalls())
func (mock *DynamoDBAPIMock) UpdateContinuousBackupsRequestCalls() []struct {
	In1 *dynamodb.UpdateContinuousBackupsInput
} {
	var calls []struct {
		In1 *dynamodb.UpdateContinuousBackupsInput
	}
	lockDynamoDBAPIMockUpdateContinuousBackupsRequest.RLock()
	calls = mock.calls.UpdateContinuousBackupsRequest
	lockDynamoDBAPIMockUpdateContinuousBackupsRequest.RUnlock()
	return calls
}

// UpdateContinuousBackupsWithContext calls UpdateContinuousBackupsWithContextFunc.
func (mock *DynamoDBAPIMock) UpdateContinuousBackupsWithContext(in1 context.Context, in2 *dynamodb.UpdateContinuousBackupsInput, in3 ...request.Option) (*dynamodb.UpdateContinuousBackupsOutput, error) {
	if mock.UpdateContinuousBackupsWithContextFunc == nil {
		panic("DynamoDBAPIMock.UpdateContinuousBackupsWithContextFunc: method is nil but DynamoDBAPI.UpdateContinuousBackupsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *dynamodb.UpdateContinuousBackupsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockDynamoDBAPIMockUpdateContinuousBackupsWithContext.Lock()
	mock.calls.UpdateContinuousBackupsWithContext = append(mock.calls.UpdateContinuousBackupsWithContext, callInfo)
	lockDynamoDBAPIMockUpdateContinuousBackupsWithContext.Unlock()
	return mock.UpdateContinuousBackupsWithContextFunc(in1, in2, in3...)
}

// UpdateContinuousBackupsWithContextCalls gets all the calls that were made to UpdateContinuousBackupsWithContext.
// Check the length with:
//     len(mockedDynamoDBAPI.UpdateContinuousBackupsWithContextCalls())
func (mock *DynamoDBAPIMock) UpdateContinuousBackupsWithContextCalls() []struct {
	In1 context.Context
	In2 *dynamodb.UpdateContinuousBackupsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *dynamodb.UpdateContinuousBackupsInput
		In3 []request.Option
	}
	lockDynamoDBAPIMockUpdateContinuousBackupsWithContext.RLock()
	calls = mock.calls.UpdateContinuousBackupsWithContext
	lockDynamoDBAPIMockUpdateContinuousBackupsWithContext.RUnlock()
	return calls
}

// UpdateContributorInsights calls UpdateContributorInsightsFunc.
func (mock *DynamoDBAPIMock) UpdateContributorInsights(in1 *dynamodb.UpdateContributorInsightsInput) (*dynamodb.UpdateContributorInsightsOutput, error) {
	if mock.UpdateContributorInsightsFunc == nil {
		panic("DynamoDBAPIMock.UpdateContributorInsightsFunc: method is nil but DynamoDBAPI.UpdateContributorInsights was just called")
	}
	callInfo := struct {
		In1 *dynamodb.UpdateContributorInsightsInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockUpdateContributorInsights.Lock()
	mock.calls.UpdateContributorInsights = append(mock.calls.UpdateContributorInsights, callInfo)
	lockDynamoDBAPIMockUpdateContributorInsights.Unlock()
	return mock.UpdateContributorInsightsFunc(in1)
}

// UpdateContributorInsightsCalls gets all the calls that were made to UpdateContributorInsights.
// Check the length with:
//     len(mockedDynamoDBAPI.UpdateContributorInsightsCalls())
func (mock *DynamoDBAPIMock) UpdateContributorInsightsCalls() []struct {
	In1 *dynamodb.UpdateContributorInsightsInput
} {
	var calls []struct {
		In1 *dynamodb.UpdateContributorInsightsInput
	}
	lockDynamoDBAPIMockUpdateContributorInsights.RLock()
	calls = mock.calls.UpdateContributorInsights
	lockDynamoDBAPIMockUpdateContributorInsights.RUnlock()
	return calls
}

// UpdateContributorInsightsRequest calls UpdateContributorInsightsRequestFunc.
func (mock *DynamoDBAPIMock) UpdateContributorInsightsRequest(in1 *dynamodb.UpdateContributorInsightsInput) (*request.Request, *dynamodb.UpdateContributorInsightsOutput) {
	if mock.UpdateContributorInsightsRequestFunc == nil {
		panic("DynamoDBAPIMock.UpdateContributorInsightsRequestFunc: method is nil but DynamoDBAPI.UpdateContributorInsightsRequest was just called")
	}
	callInfo := struct {
		In1 *dynamodb.UpdateContributorInsightsInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockUpdateContributorInsightsRequest.Lock()
	mock.calls.UpdateContributorInsightsRequest = append(mock.calls.UpdateContributorInsightsRequest, callInfo)
	lockDynamoDBAPIMockUpdateContributorInsightsRequest.Unlock()
	return mock.UpdateContributorInsightsRequestFunc(in1)
}

// UpdateContributorInsightsRequestCalls gets all the calls that were made to UpdateContributorInsightsRequest.
// Check the length with:
//     len(mockedDynamoDBAPI.UpdateContributorInsightsRequestCalls())
func (mock *DynamoDBAPIMock) UpdateContributorInsightsRequestCalls() []struct {
	In1 *dynamodb.UpdateContributorInsightsInput
} {
	var calls []struct {
		In1 *dynamodb.UpdateContributorInsightsInput
	}
	lockDynamoDBAPIMockUpdateContributorInsightsRequest.RLock()
	calls = mock.calls.UpdateContributorInsightsRequest
	lockDynamoDBAPIMockUpdateContributorInsightsRequest.RUnlock()
	return calls
}

// UpdateContributorInsightsWithContext calls UpdateContributorInsightsWithContextFunc.
func (mock *DynamoDBAPIMock) UpdateContributorInsightsWithContext(in1 context.Context, in2 *dynamodb.UpdateContributorInsightsInput, in3 ...request.Option) (*dynamodb.UpdateContributorInsightsOutput, error) {
	if mock.UpdateContributorInsightsWithContextFunc == nil {
		panic("DynamoDBAPIMock.UpdateContributorInsightsWithContextFunc: method is nil but DynamoDBAPI.UpdateContributorInsightsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *dynamodb.UpdateContributorInsightsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockDynamoDBAPIMockUpdateContributorInsightsWithContext.Lock()
	mock.calls.UpdateContributorInsightsWithContext = append(mock.calls.UpdateContributorInsightsWithContext, callInfo)
	lockDynamoDBAPIMockUpdateContributorInsightsWithContext.Unlock()
	return mock.UpdateContributorInsightsWithContextFunc(in1, in2, in3...)
}

// UpdateContributorInsightsWithContextCalls gets all the calls that were made to UpdateContributorInsightsWithContext.
// Check the length with:
//     len(mockedDynamoDBAPI.UpdateContributorInsightsWithContextCalls())
func (mock *DynamoDBAPIMock) UpdateContributorInsightsWithContextCalls() []struct {
	In1 context.Context
	In2 *dynamodb.UpdateContributorInsightsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *dynamodb.UpdateContributorInsightsInput
		In3 []request.Option
	}
	lockDynamoDBAPIMockUpdateContributorInsightsWithContext.RLock()
	calls = mock.calls.UpdateContributorInsightsWithContext
	lockDynamoDBAPIMockUpdateContributorInsightsWithContext.RUnlock()
	return calls
}

// UpdateGlobalTable calls UpdateGlobalTableFunc.
func (mock *DynamoDBAPIMock) UpdateGlobalTable(in1 *dynamodb.UpdateGlobalTableInput) (*dynamodb.UpdateGlobalTableOutput, error) {
	if mock.UpdateGlobalTableFunc == nil {
		panic("DynamoDBAPIMock.UpdateGlobalTableFunc: method is nil but DynamoDBAPI.UpdateGlobalTable was just called")
	}
	callInfo := struct {
		In1 *dynamodb.UpdateGlobalTableInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockUpdateGlobalTable.Lock()
	mock.calls.UpdateGlobalTable = append(mock.calls.UpdateGlobalTable, callInfo)
	lockDynamoDBAPIMockUpdateGlobalTable.Unlock()
	return mock.UpdateGlobalTableFunc(in1)
}

// UpdateGlobalTableCalls gets all the calls that were made to UpdateGlobalTable.
// Check the length with:
//     len(mockedDynamoDBAPI.UpdateGlobalTableCalls())
func (mock *DynamoDBAPIMock) UpdateGlobalTableCalls() []struct {
	In1 *dynamodb.UpdateGlobalTableInput
} {
	var calls []struct {
		In1 *dynamodb.UpdateGlobalTableInput
	}
	lockDynamoDBAPIMockUpdateGlobalTable.RLock()
	calls = mock.calls.UpdateGlobalTable
	lockDynamoDBAPIMockUpdateGlobalTable.RUnlock()
	return calls
}

// UpdateGlobalTableRequest calls UpdateGlobalTableRequestFunc.
func (mock *DynamoDBAPIMock) UpdateGlobalTableRequest(in1 *dynamodb.UpdateGlobalTableInput) (*request.Request, *dynamodb.UpdateGlobalTableOutput) {
	if mock.UpdateGlobalTableRequestFunc == nil {
		panic("DynamoDBAPIMock.UpdateGlobalTableRequestFunc: method is nil but DynamoDBAPI.UpdateGlobalTableRequest was just called")
	}
	callInfo := struct {
		In1 *dynamodb.UpdateGlobalTableInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockUpdateGlobalTableRequest.Lock()
	mock.calls.UpdateGlobalTableRequest = append(mock.calls.UpdateGlobalTableRequest, callInfo)
	lockDynamoDBAPIMockUpdateGlobalTableRequest.Unlock()
	return mock.UpdateGlobalTableRequestFunc(in1)
}

// UpdateGlobalTableRequestCalls gets all the calls that were made to UpdateGlobalTableRequest.
// Check the length with:
//     len(mockedDynamoDBAPI.UpdateGlobalTableRequestCalls())
func (mock *DynamoDBAPIMock) UpdateGlobalTableRequestCalls() []struct {
	In1 *dynamodb.UpdateGlobalTableInput
} {
	var calls []struct {
		In1 *dynamodb.UpdateGlobalTableInput
	}
	lockDynamoDBAPIMockUpdateGlobalTableRequest.RLock()
	calls = mock.calls.UpdateGlobalTableRequest
	lockDynamoDBAPIMockUpdateGlobalTableRequest.RUnlock()
	return calls
}

// UpdateGlobalTableSettings calls UpdateGlobalTableSettingsFunc.
func (mock *DynamoDBAPIMock) UpdateGlobalTableSettings(in1 *dynamodb.UpdateGlobalTableSettingsInput) (*dynamodb.UpdateGlobalTableSettingsOutput, error) {
	if mock.UpdateGlobalTableSettingsFunc == nil {
		panic("DynamoDBAPIMock.UpdateGlobalTableSettingsFunc: method is nil but DynamoDBAPI.UpdateGlobalTableSettings was just called")
	}
	callInfo := struct {
		In1 *dynamodb.UpdateGlobalTableSettingsInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockUpdateGlobalTableSettings.Lock()
	mock.calls.UpdateGlobalTableSettings = append(mock.calls.UpdateGlobalTableSettings, callInfo)
	lockDynamoDBAPIMockUpdateGlobalTableSettings.Unlock()
	return mock.UpdateGlobalTableSettingsFunc(in1)
}

// UpdateGlobalTableSettingsCalls gets all the calls that were made to UpdateGlobalTableSettings.
// Check the length with:
//     len(mockedDynamoDBAPI.UpdateGlobalTableSettingsCalls())
func (mock *DynamoDBAPIMock) UpdateGlobalTableSettingsCalls() []struct {
	In1 *dynamodb.UpdateGlobalTableSettingsInput
} {
	var calls []struct {
		In1 *dynamodb.UpdateGlobalTableSettingsInput
	}
	lockDynamoDBAPIMockUpdateGlobalTableSettings.RLock()
	calls = mock.calls.UpdateGlobalTableSettings
	lockDynamoDBAPIMockUpdateGlobalTableSettings.RUnlock()
	return calls
}

// UpdateGlobalTableSettingsRequest calls UpdateGlobalTableSettingsRequestFunc.
func (mock *DynamoDBAPIMock) UpdateGlobalTableSettingsRequest(in1 *dynamodb.UpdateGlobalTableSettingsInput) (*request.Request, *dynamodb.UpdateGlobalTableSettingsOutput) {
	if mock.UpdateGlobalTableSettingsRequestFunc == nil {
		panic("DynamoDBAPIMock.UpdateGlobalTableSettingsRequestFunc: method is nil but DynamoDBAPI.UpdateGlobalTableSettingsRequest was just called")
	}
	callInfo := struct {
		In1 *dynamodb.UpdateGlobalTableSettingsInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockUpdateGlobalTableSettingsRequest.Lock()
	mock.calls.UpdateGlobalTableSettingsRequest = append(mock.calls.UpdateGlobalTableSettingsRequest, callInfo)
	lockDynamoDBAPIMockUpdateGlobalTableSettingsRequest.Unlock()
	return mock.UpdateGlobalTableSettingsRequestFunc(in1)
}

// UpdateGlobalTableSettingsRequestCalls gets all the calls that were made to UpdateGlobalTableSettingsRequest.
// Check the length with:
//     len(mockedDynamoDBAPI.UpdateGlobalTableSettingsRequestCalls())
func (mock *DynamoDBAPIMock) UpdateGlobalTableSettingsRequestCalls() []struct {
	In1 *dynamodb.UpdateGlobalTableSettingsInput
} {
	var calls []struct {
		In1 *dynamodb.UpdateGlobalTableSettingsInput
	}
	lockDynamoDBAPIMockUpdateGlobalTableSettingsRequest.RLock()
	calls = mock.calls.UpdateGlobalTableSettingsRequest
	lockDynamoDBAPIMockUpdateGlobalTableSettingsRequest.RUnlock()
	return calls
}

// UpdateGlobalTableSettingsWithContext calls UpdateGlobalTableSettingsWithContextFunc.
func (mock *DynamoDBAPIMock) UpdateGlobalTableSettingsWithContext(in1 context.Context, in2 *dynamodb.UpdateGlobalTableSettingsInput, in3 ...request.Option) (*dynamodb.UpdateGlobalTableSettingsOutput, error) {
	if mock.UpdateGlobalTableSettingsWithContextFunc == nil {
		panic("DynamoDBAPIMock.UpdateGlobalTableSettingsWithContextFunc: method is nil but DynamoDBAPI.UpdateGlobalTableSettingsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *dynamodb.UpdateGlobalTableSettingsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockDynamoDBAPIMockUpdateGlobalTableSettingsWithContext.Lock()
	mock.calls.UpdateGlobalTableSettingsWithContext = append(mock.calls.UpdateGlobalTableSettingsWithContext, callInfo)
	lockDynamoDBAPIMockUpdateGlobalTableSettingsWithContext.Unlock()
	return mock.UpdateGlobalTableSettingsWithContextFunc(in1, in2, in3...)
}

// UpdateGlobalTableSettingsWithContextCalls gets all the calls that were made to UpdateGlobalTableSettingsWithContext.
// Check the length with:
//     len(mockedDynamoDBAPI.UpdateGlobalTableSettingsWithContextCalls())
func (mock *DynamoDBAPIMock) UpdateGlobalTableSettingsWithContextCalls() []struct {
	In1 context.Context
	In2 *dynamodb.UpdateGlobalTableSettingsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *dynamodb.UpdateGlobalTableSettingsInput
		In3 []request.Option
	}
	lockDynamoDBAPIMockUpdateGlobalTableSettingsWithContext.RLock()
	calls = mock.calls.UpdateGlobalTableSettingsWithContext
	lockDynamoDBAPIMockUpdateGlobalTableSettingsWithContext.RUnlock()
	return calls
}

// UpdateGlobalTableWithContext calls UpdateGlobalTableWithContextFunc.
func (mock *DynamoDBAPIMock) UpdateGlobalTableWithContext(in1 context.Context, in2 *dynamodb.UpdateGlobalTableInput, in3 ...request.Option) (*dynamodb.UpdateGlobalTableOutput, error) {
	if mock.UpdateGlobalTableWithContextFunc == nil {
		panic("DynamoDBAPIMock.UpdateGlobalTableWithContextFunc: method is nil but DynamoDBAPI.UpdateGlobalTableWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *dynamodb.UpdateGlobalTableInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockDynamoDBAPIMockUpdateGlobalTableWithContext.Lock()
	mock.calls.UpdateGlobalTableWithContext = append(mock.calls.UpdateGlobalTableWithContext, callInfo)
	lockDynamoDBAPIMockUpdateGlobalTableWithContext.Unlock()
	return mock.UpdateGlobalTableWithContextFunc(in1, in2, in3...)
}

// UpdateGlobalTableWithContextCalls gets all the calls that were made to UpdateGlobalTableWithContext.
// Check the length with:
//     len(mockedDynamoDBAPI.UpdateGlobalTableWithContextCalls())
func (mock *DynamoDBAPIMock) UpdateGlobalTableWithContextCalls() []struct {
	In1 context.Context
	In2 *dynamodb.UpdateGlobalTableInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *dynamodb.UpdateGlobalTableInput
		In3 []request.Option
	}
	lockDynamoDBAPIMockUpdateGlobalTableWithContext.RLock()
	calls = mock.calls.UpdateGlobalTableWithContext
	lockDynamoDBAPIMockUpdateGlobalTableWithContext.RUnlock()
	return calls
}

// UpdateItem calls UpdateItemFunc.
func (mock *DynamoDBAPIMock) UpdateItem(in1 *dynamodb.UpdateItemInput) (*dynamodb.UpdateItemOutput, error) {
	if mock.UpdateItemFunc == nil {
		panic("DynamoDBAPIMock.UpdateItemFunc: method is nil but DynamoDBAPI.UpdateItem was just called")
	}
	callInfo := struct {
		In1 *dynamodb.UpdateItemInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockUpdateItem.Lock()
	mock.calls.UpdateItem = append(mock.calls.UpdateItem, callInfo)
	lockDynamoDBAPIMockUpdateItem.Unlock()
	return mock.UpdateItemFunc(in1)
}

// UpdateItemCalls gets all the calls that were made to UpdateItem.
// Check the length with:
//     len(mockedDynamoDBAPI.UpdateItemCalls())
func (mock *DynamoDBAPIMock) UpdateItemCalls() []struct {
	In1 *dynamodb.UpdateItemInput
} {
	var calls []struct {
		In1 *dynamodb.UpdateItemInput
	}
	lockDynamoDBAPIMockUpdateItem.RLock()
	calls = mock.calls.UpdateItem
	lockDynamoDBAPIMockUpdateItem.RUnlock()
	return calls
}

// UpdateItemRequest calls UpdateItemRequestFunc.
func (mock *DynamoDBAPIMock) UpdateItemRequest(in1 *dynamodb.UpdateItemInput) (*request.Request, *dynamodb.UpdateItemOutput) {
	if mock.UpdateItemRequestFunc == nil {
		panic("DynamoDBAPIMock.UpdateItemRequestFunc: method is nil but DynamoDBAPI.UpdateItemRequest was just called")
	}
	callInfo := struct {
		In1 *dynamodb.UpdateItemInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockUpdateItemRequest.Lock()
	mock.calls.UpdateItemRequest = append(mock.calls.UpdateItemRequest, callInfo)
	lockDynamoDBAPIMockUpdateItemRequest.Unlock()
	return mock.UpdateItemRequestFunc(in1)
}

// UpdateItemRequestCalls gets all the calls that were made to UpdateItemRequest.
// Check the length with:
//     len(mockedDynamoDBAPI.UpdateItemRequestCalls())
func (mock *DynamoDBAPIMock) UpdateItemRequestCalls() []struct {
	In1 *dynamodb.UpdateItemInput
} {
	var calls []struct {
		In1 *dynamodb.UpdateItemInput
	}
	lockDynamoDBAPIMockUpdateItemRequest.RLock()
	calls = mock.calls.UpdateItemRequest
	lockDynamoDBAPIMockUpdateItemRequest.RUnlock()
	return calls
}

// UpdateItemWithContext calls UpdateItemWithContextFunc.
func (mock *DynamoDBAPIMock) UpdateItemWithContext(in1 context.Context, in2 *dynamodb.UpdateItemInput, in3 ...request.Option) (*dynamodb.UpdateItemOutput, error) {
	if mock.UpdateItemWithContextFunc == nil {
		panic("DynamoDBAPIMock.UpdateItemWithContextFunc: method is nil but DynamoDBAPI.UpdateItemWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *dynamodb.UpdateItemInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockDynamoDBAPIMockUpdateItemWithContext.Lock()
	mock.calls.UpdateItemWithContext = append(mock.calls.UpdateItemWithContext, callInfo)
	lockDynamoDBAPIMockUpdateItemWithContext.Unlock()
	return mock.UpdateItemWithContextFunc(in1, in2, in3...)
}

// UpdateItemWithContextCalls gets all the calls that were made to UpdateItemWithContext.
// Check the length with:
//     len(mockedDynamoDBAPI.UpdateItemWithContextCalls())
func (mock *DynamoDBAPIMock) UpdateItemWithContextCalls() []struct {
	In1 context.Context
	In2 *dynamodb.UpdateItemInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *dynamodb.UpdateItemInput
		In3 []request.Option
	}
	lockDynamoDBAPIMockUpdateItemWithContext.RLock()
	calls = mock.calls.UpdateItemWithContext
	lockDynamoDBAPIMockUpdateItemWithContext.RUnlock()
	return calls
}

// UpdateTable calls UpdateTableFunc.
func (mock *DynamoDBAPIMock) UpdateTable(in1 *dynamodb.UpdateTableInput) (*dynamodb.UpdateTableOutput, error) {
	if mock.UpdateTableFunc == nil {
		panic("DynamoDBAPIMock.UpdateTableFunc: method is nil but DynamoDBAPI.UpdateTable was just called")
	}
	callInfo := struct {
		In1 *dynamodb.UpdateTableInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockUpdateTable.Lock()
	mock.calls.UpdateTable = append(mock.calls.UpdateTable, callInfo)
	lockDynamoDBAPIMockUpdateTable.Unlock()
	return mock.UpdateTableFunc(in1)
}

// UpdateTableCalls gets all the calls that were made to UpdateTable.
// Check the length with:
//     len(mockedDynamoDBAPI.UpdateTableCalls())
func (mock *DynamoDBAPIMock) UpdateTableCalls() []struct {
	In1 *dynamodb.UpdateTableInput
} {
	var calls []struct {
		In1 *dynamodb.UpdateTableInput
	}
	lockDynamoDBAPIMockUpdateTable.RLock()
	calls = mock.calls.UpdateTable
	lockDynamoDBAPIMockUpdateTable.RUnlock()
	return calls
}

// UpdateTableReplicaAutoScaling calls UpdateTableReplicaAutoScalingFunc.
func (mock *DynamoDBAPIMock) UpdateTableReplicaAutoScaling(in1 *dynamodb.UpdateTableReplicaAutoScalingInput) (*dynamodb.UpdateTableReplicaAutoScalingOutput, error) {
	if mock.UpdateTableReplicaAutoScalingFunc == nil {
		panic("DynamoDBAPIMock.UpdateTableReplicaAutoScalingFunc: method is nil but DynamoDBAPI.UpdateTableReplicaAutoScaling was just called")
	}
	callInfo := struct {
		In1 *dynamodb.UpdateTableReplicaAutoScalingInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockUpdateTableReplicaAutoScaling.Lock()
	mock.calls.UpdateTableReplicaAutoScaling = append(mock.calls.UpdateTableReplicaAutoScaling, callInfo)
	lockDynamoDBAPIMockUpdateTableReplicaAutoScaling.Unlock()
	return mock.UpdateTableReplicaAutoScalingFunc(in1)
}

// UpdateTableReplicaAutoScalingCalls gets all the calls that were made to UpdateTableReplicaAutoScaling.
// Check the length with:
//     len(mockedDynamoDBAPI.UpdateTableReplicaAutoScalingCalls())
func (mock *DynamoDBAPIMock) UpdateTableReplicaAutoScalingCalls() []struct {
	In1 *dynamodb.UpdateTableReplicaAutoScalingInput
} {
	var calls []struct {
		In1 *dynamodb.UpdateTableReplicaAutoScalingInput
	}
	lockDynamoDBAPIMockUpdateTableReplicaAutoScaling.RLock()
	calls = mock.calls.UpdateTableReplicaAutoScaling
	lockDynamoDBAPIMockUpdateTableReplicaAutoScaling.RUnlock()
	return calls
}

// UpdateTableReplicaAutoScalingRequest calls UpdateTableReplicaAutoScalingRequestFunc.
func (mock *DynamoDBAPIMock) UpdateTableReplicaAutoScalingRequest(in1 *dynamodb.UpdateTableReplicaAutoScalingInput) (*request.Request, *dynamodb.UpdateTableReplicaAutoScalingOutput) {
	if mock.UpdateTableReplicaAutoScalingRequestFunc == nil {
		panic("DynamoDBAPIMock.UpdateTableReplicaAutoScalingRequestFunc: method is nil but DynamoDBAPI.UpdateTableReplicaAutoScalingRequest was just called")
	}
	callInfo := struct {
		In1 *dynamodb.UpdateTableReplicaAutoScalingInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockUpdateTableReplicaAutoScalingRequest.Lock()
	mock.calls.UpdateTableReplicaAutoScalingRequest = append(mock.calls.UpdateTableReplicaAutoScalingRequest, callInfo)
	lockDynamoDBAPIMockUpdateTableReplicaAutoScalingRequest.Unlock()
	return mock.UpdateTableReplicaAutoScalingRequestFunc(in1)
}

// UpdateTableReplicaAutoScalingRequestCalls gets all the calls that were made to UpdateTableReplicaAutoScalingRequest.
// Check the length with:
//     len(mockedDynamoDBAPI.UpdateTableReplicaAutoScalingRequestCalls())
func (mock *DynamoDBAPIMock) UpdateTableReplicaAutoScalingRequestCalls() []struct {
	In1 *dynamodb.UpdateTableReplicaAutoScalingInput
} {
	var calls []struct {
		In1 *dynamodb.UpdateTableReplicaAutoScalingInput
	}
	lockDynamoDBAPIMockUpdateTableReplicaAutoScalingRequest.RLock()
	calls = mock.calls.UpdateTableReplicaAutoScalingRequest
	lockDynamoDBAPIMockUpdateTableReplicaAutoScalingRequest.RUnlock()
	return calls
}

// UpdateTableReplicaAutoScalingWithContext calls UpdateTableReplicaAutoScalingWithContextFunc.
func (mock *DynamoDBAPIMock) UpdateTableReplicaAutoScalingWithContext(in1 context.Context, in2 *dynamodb.UpdateTableReplicaAutoScalingInput, in3 ...request.Option) (*dynamodb.UpdateTableReplicaAutoScalingOutput, error) {
	if mock.UpdateTableReplicaAutoScalingWithContextFunc == nil {
		panic("DynamoDBAPIMock.UpdateTableReplicaAutoScalingWithContextFunc: method is nil but DynamoDBAPI.UpdateTableReplicaAutoScalingWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *dynamodb.UpdateTableReplicaAutoScalingInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockDynamoDBAPIMockUpdateTableReplicaAutoScalingWithContext.Lock()
	mock.calls.UpdateTableReplicaAutoScalingWithContext = append(mock.calls.UpdateTableReplicaAutoScalingWithContext, callInfo)
	lockDynamoDBAPIMockUpdateTableReplicaAutoScalingWithContext.Unlock()
	return mock.UpdateTableReplicaAutoScalingWithContextFunc(in1, in2, in3...)
}

// UpdateTableReplicaAutoScalingWithContextCalls gets all the calls that were made to UpdateTableReplicaAutoScalingWithContext.
// Check the length with:
//     len(mockedDynamoDBAPI.UpdateTableReplicaAutoScalingWithContextCalls())
func (mock *DynamoDBAPIMock) UpdateTableReplicaAutoScalingWithContextCalls() []struct {
	In1 context.Context
	In2 *dynamodb.UpdateTableReplicaAutoScalingInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *dynamodb.UpdateTableReplicaAutoScalingInput
		In3 []request.Option
	}
	lockDynamoDBAPIMockUpdateTableReplicaAutoScalingWithContext.RLock()
	calls = mock.calls.UpdateTableReplicaAutoScalingWithContext
	lockDynamoDBAPIMockUpdateTableReplicaAutoScalingWithContext.RUnlock()
	return calls
}

// UpdateTableRequest calls UpdateTableRequestFunc.
func (mock *DynamoDBAPIMock) UpdateTableRequest(in1 *dynamodb.UpdateTableInput) (*request.Request, *dynamodb.UpdateTableOutput) {
	if mock.UpdateTableRequestFunc == nil {
		panic("DynamoDBAPIMock.UpdateTableRequestFunc: method is nil but DynamoDBAPI.UpdateTableRequest was just called")
	}
	callInfo := struct {
		In1 *dynamodb.UpdateTableInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockUpdateTableRequest.Lock()
	mock.calls.UpdateTableRequest = append(mock.calls.UpdateTableRequest, callInfo)
	lockDynamoDBAPIMockUpdateTableRequest.Unlock()
	return mock.UpdateTableRequestFunc(in1)
}

// UpdateTableRequestCalls gets all the calls that were made to UpdateTableRequest.
// Check the length with:
//     len(mockedDynamoDBAPI.UpdateTableRequestCalls())
func (mock *DynamoDBAPIMock) UpdateTableRequestCalls() []struct {
	In1 *dynamodb.UpdateTableInput
} {
	var calls []struct {
		In1 *dynamodb.UpdateTableInput
	}
	lockDynamoDBAPIMockUpdateTableRequest.RLock()
	calls = mock.calls.UpdateTableRequest
	lockDynamoDBAPIMockUpdateTableRequest.RUnlock()
	return calls
}

// UpdateTableWithContext calls UpdateTableWithContextFunc.
func (mock *DynamoDBAPIMock) UpdateTableWithContext(in1 context.Context, in2 *dynamodb.UpdateTableInput, in3 ...request.Option) (*dynamodb.UpdateTableOutput, error) {
	if mock.UpdateTableWithContextFunc == nil {
		panic("DynamoDBAPIMock.UpdateTableWithContextFunc: method is nil but DynamoDBAPI.UpdateTableWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *dynamodb.UpdateTableInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockDynamoDBAPIMockUpdateTableWithContext.Lock()
	mock.calls.UpdateTableWithContext = append(mock.calls.UpdateTableWithContext, callInfo)
	lockDynamoDBAPIMockUpdateTableWithContext.Unlock()
	return mock.UpdateTableWithContextFunc(in1, in2, in3...)
}

// UpdateTableWithContextCalls gets all the calls that were made to UpdateTableWithContext.
// Check the length with:
//     len(mockedDynamoDBAPI.UpdateTableWithContextCalls())
func (mock *DynamoDBAPIMock) UpdateTableWithContextCalls() []struct {
	In1 context.Context
	In2 *dynamodb.UpdateTableInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *dynamodb.UpdateTableInput
		In3 []request.Option
	}
	lockDynamoDBAPIMockUpdateTableWithContext.RLock()
	calls = mock.calls.UpdateTableWithContext
	lockDynamoDBAPIMockUpdateTableWithContext.RUnlock()
	return calls
}

// UpdateTimeToLive calls UpdateTimeToLiveFunc.
func (mock *DynamoDBAPIMock) UpdateTimeToLive(in1 *dynamodb.UpdateTimeToLiveInput) (*dynamodb.UpdateTimeToLiveOutput, error) {
	if mock.UpdateTimeToLiveFunc == nil {
		panic("DynamoDBAPIMock.UpdateTimeToLiveFunc: method is nil but DynamoDBAPI.UpdateTimeToLive was just called")
	}
	callInfo := struct {
		In1 *dynamodb.UpdateTimeToLiveInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockUpdateTimeToLive.Lock()
	mock.calls.UpdateTimeToLive = append(mock.calls.UpdateTimeToLive, callInfo)
	lockDynamoDBAPIMockUpdateTimeToLive.Unlock()
	return mock.UpdateTimeToLiveFunc(in1)
}

// UpdateTimeToLiveCalls gets all the calls that were made to UpdateTimeToLive.
// Check the length with:
//     len(mockedDynamoDBAPI.UpdateTimeToLiveCalls())
func (mock *DynamoDBAPIMock) UpdateTimeToLiveCalls() []struct {
	In1 *dynamodb.UpdateTimeToLiveInput
} {
	var calls []struct {
		In1 *dynamodb.UpdateTimeToLiveInput
	}
	lockDynamoDBAPIMockUpdateTimeToLive.RLock()
	calls = mock.calls.UpdateTimeToLive
	lockDynamoDBAPIMockUpdateTimeToLive.RUnlock()
	return calls
}

// UpdateTimeToLiveRequest calls UpdateTimeToLiveRequestFunc.
func (mock *DynamoDBAPIMock) UpdateTimeToLiveRequest(in1 *dynamodb.UpdateTimeToLiveInput) (*request.Request, *dynamodb.UpdateTimeToLiveOutput) {
	if mock.UpdateTimeToLiveRequestFunc == nil {
		panic("DynamoDBAPIMock.UpdateTimeToLiveRequestFunc: method is nil but DynamoDBAPI.UpdateTimeToLiveRequest was just called")
	}
	callInfo := struct {
		In1 *dynamodb.UpdateTimeToLiveInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockUpdateTimeToLiveRequest.Lock()
	mock.calls.UpdateTimeToLiveRequest = append(mock.calls.UpdateTimeToLiveRequest, callInfo)
	lockDynamoDBAPIMockUpdateTimeToLiveRequest.Unlock()
	return mock.UpdateTimeToLiveRequestFunc(in1)
}

// UpdateTimeToLiveRequestCalls gets all the calls that were made to UpdateTimeToLiveRequest.
// Check the length with:
//     len(mockedDynamoDBAPI.UpdateTimeToLiveRequestCalls())
func (mock *DynamoDBAPIMock) UpdateTimeToLiveRequestCalls() []struct {
	In1 *dynamodb.UpdateTimeToLiveInput
} {
	var calls []struct {
		In1 *dynamodb.UpdateTimeToLiveInput
	}
	lockDynamoDBAPIMockUpdateTimeToLiveRequest.RLock()
	calls = mock.calls.UpdateTimeToLiveRequest
	lockDynamoDBAPIMockUpdateTimeToLiveRequest.RUnlock()
	return calls
}

// UpdateTimeToLiveWithContext calls UpdateTimeToLiveWithContextFunc.
func (mock *DynamoDBAPIMock) UpdateTimeToLiveWithContext(in1 context.Context, in2 *dynamodb.UpdateTimeToLiveInput, in3 ...request.Option) (*dynamodb.UpdateTimeToLiveOutput, error) {
	if mock.UpdateTimeToLiveWithContextFunc == nil {
		panic("DynamoDBAPIMock.UpdateTimeToLiveWithContextFunc: method is nil but DynamoDBAPI.UpdateTimeToLiveWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *dynamodb.UpdateTimeToLiveInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockDynamoDBAPIMockUpdateTimeToLiveWithContext.Lock()
	mock.calls.UpdateTimeToLiveWithContext = append(mock.calls.UpdateTimeToLiveWithContext, callInfo)
	lockDynamoDBAPIMockUpdateTimeToLiveWithContext.Unlock()
	return mock.UpdateTimeToLiveWithContextFunc(in1, in2, in3...)
}

// UpdateTimeToLiveWithContextCalls gets all the calls that were made to UpdateTimeToLiveWithContext.
// Check the length with:
//     len(mockedDynamoDBAPI.UpdateTimeToLiveWithContextCalls())
func (mock *DynamoDBAPIMock) UpdateTimeToLiveWithContextCalls() []struct {
	In1 context.Context
	In2 *dynamodb.UpdateTimeToLiveInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *dynamodb.UpdateTimeToLiveInput
		In3 []request.Option
	}
	lockDynamoDBAPIMockUpdateTimeToLiveWithContext.RLock()
	calls = mock.calls.UpdateTimeToLiveWithContext
	lockDynamoDBAPIMockUpdateTimeToLiveWithContext.RUnlock()
	return calls
}

// WaitUntilTableExists calls WaitUntilTableExistsFunc.
func (mock *DynamoDBAPIMock) WaitUntilTableExists(in1 *dynamodb.DescribeTableInput) error {
	if mock.WaitUntilTableExistsFunc == nil {
		panic("DynamoDBAPIMock.WaitUntilTableExistsFunc: method is nil but DynamoDBAPI.WaitUntilTableExists was just called")
	}
	callInfo := struct {
		In1 *dynamodb.DescribeTableInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockWaitUntilTableExists.Lock()
	mock.calls.WaitUntilTableExists = append(mock.calls.WaitUntilTableExists, callInfo)
	lockDynamoDBAPIMockWaitUntilTableExists.Unlock()
	return mock.WaitUntilTableExistsFunc(in1)
}

// WaitUntilTableExistsCalls gets all the calls that were made to WaitUntilTableExists.
// Check the length with:
//     len(mockedDynamoDBAPI.WaitUntilTableExistsCalls())
func (mock *DynamoDBAPIMock) WaitUntilTableExistsCalls() []struct {
	In1 *dynamodb.DescribeTableInput
} {
	var calls []struct {
		In1 *dynamodb.DescribeTableInput
	}
	lockDynamoDBAPIMockWaitUntilTableExists.RLock()
	calls = mock.calls.WaitUntilTableExists
	lockDynamoDBAPIMockWaitUntilTableExists.RUnlock()
	return calls
}

// WaitUntilTableExistsWithContext calls WaitUntilTableExistsWithContextFunc.
func (mock *DynamoDBAPIMock) WaitUntilTableExistsWithContext(in1 context.Context, in2 *dynamodb.DescribeTableInput, in3 ...request.WaiterOption) error {
	if mock.WaitUntilTableExistsWithContextFunc == nil {
		panic("DynamoDBAPIMock.WaitUntilTableExistsWithContextFunc: method is nil but DynamoDBAPI.WaitUntilTableExistsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *dynamodb.DescribeTableInput
		In3 []request.WaiterOption
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockDynamoDBAPIMockWaitUntilTableExistsWithContext.Lock()
	mock.calls.WaitUntilTableExistsWithContext = append(mock.calls.WaitUntilTableExistsWithContext, callInfo)
	lockDynamoDBAPIMockWaitUntilTableExistsWithContext.Unlock()
	return mock.WaitUntilTableExistsWithContextFunc(in1, in2, in3...)
}

// WaitUntilTableExistsWithContextCalls gets all the calls that were made to WaitUntilTableExistsWithContext.
// Check the length with:
//     len(mockedDynamoDBAPI.WaitUntilTableExistsWithContextCalls())
func (mock *DynamoDBAPIMock) WaitUntilTableExistsWithContextCalls() []struct {
	In1 context.Context
	In2 *dynamodb.DescribeTableInput
	In3 []request.WaiterOption
} {
	var calls []struct {
		In1 context.Context
		In2 *dynamodb.DescribeTableInput
		In3 []request.WaiterOption
	}
	lockDynamoDBAPIMockWaitUntilTableExistsWithContext.RLock()
	calls = mock.calls.WaitUntilTableExistsWithContext
	lockDynamoDBAPIMockWaitUntilTableExistsWithContext.RUnlock()
	return calls
}

// WaitUntilTableNotExists calls WaitUntilTableNotExistsFunc.
func (mock *DynamoDBAPIMock) WaitUntilTableNotExists(in1 *dynamodb.DescribeTableInput) error {
	if mock.WaitUntilTableNotExistsFunc == nil {
		panic("DynamoDBAPIMock.WaitUntilTableNotExistsFunc: method is nil but DynamoDBAPI.WaitUntilTableNotExists was just called")
	}
	callInfo := struct {
		In1 *dynamodb.DescribeTableInput
	}{
		In1: in1,
	}
	lockDynamoDBAPIMockWaitUntilTableNotExists.Lock()
	mock.calls.WaitUntilTableNotExists = append(mock.calls.WaitUntilTableNotExists, callInfo)
	lockDynamoDBAPIMockWaitUntilTableNotExists.Unlock()
	return mock.WaitUntilTableNotExistsFunc(in1)
}

// WaitUntilTableNotExistsCalls gets all the calls that were made to WaitUntilTableNotExists.
// Check the length with:
//     len(mockedDynamoDBAPI.WaitUntilTableNotExistsCalls())
func (mock *DynamoDBAPIMock) WaitUntilTableNotExistsCalls() []struct {
	In1 *dynamodb.DescribeTableInput
} {
	var calls []struct {
		In1 *dynamodb.DescribeTableInput
	}
	lockDynamoDBAPIMockWaitUntilTableNotExists.RLock()
	calls = mock.calls.WaitUntilTableNotExists
	lockDynamoDBAPIMockWaitUntilTableNotExists.RUnlock()
	return calls
}

// WaitUntilTableNotExistsWithContext calls WaitUntilTableNotExistsWithContextFunc.
func (mock *DynamoDBAPIMock) WaitUntilTableNotExistsWithContext(in1 context.Context, in2 *dynamodb.DescribeTableInput, in3 ...request.WaiterOption) error {
	if mock.WaitUntilTableNotExistsWithContextFunc == nil {
		panic("DynamoDBAPIMock.WaitUntilTableNotExistsWithContextFunc: method is nil but DynamoDBAPI.WaitUntilTableNotExistsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *dynamodb.DescribeTableInput
		In3 []request.WaiterOption
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockDynamoDBAPIMockWaitUntilTableNotExistsWithContext.Lock()
	mock.calls.WaitUntilTableNotExistsWithContext = append(mock.calls.WaitUntilTableNotExistsWithContext, callInfo)
	lockDynamoDBAPIMockWaitUntilTableNotExistsWithContext.Unlock()
	return mock.WaitUntilTableNotExistsWithContextFunc(in1, in2, in3...)
}

// WaitUntilTableNotExistsWithContextCalls gets all the calls that were made to WaitUntilTableNotExistsWithContext.
// Check the length with:
//     len(mockedDynamoDBAPI.WaitUntilTableNotExistsWithContextCalls())
func (mock *DynamoDBAPIMock) WaitUntilTableNotExistsWithContextCalls() []struct {
	In1 context.Context
	In2 *dynamodb.DescribeTableInput
	In3 []request.WaiterOption
} {
	var calls []struct {
		In1 context.Context
		In2 *dynamodb.DescribeTableInput
		In3 []request.WaiterOption
	}
	lockDynamoDBAPIMockWaitUntilTableNotExistsWithContext.RLock()
	calls = mock.calls.WaitUntilTableNotExistsWithContext
	lockDynamoDBAPIMockWaitUntilTableNotExistsWithContext.RUnlock()
	return calls
}
