// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/fwojciec/ddblocal"
	"sync"
)

var (
	lockStringGeneratorMockGenerate sync.RWMutex
)

// Ensure, that StringGeneratorMock does implement ddblocal.StringGenerator.
// If this is not the case, regenerate this file with moq.
var _ ddblocal.StringGenerator = &StringGeneratorMock{}

// StringGeneratorMock is a mock implementation of ddblocal.StringGenerator.
//
//     func TestSomethingThatUsesStringGenerator(t *testing.T) {
//
//         // make and configure a mocked ddblocal.StringGenerator
//         mockedStringGenerator := &StringGeneratorMock{
//             GenerateFunc: func() (string, error) {
// 	               panic("mock out the Generate method")
//             },
//         }
//
//         // use mockedStringGenerator in code that requires ddblocal.StringGenerator
//         // and then make assertions.
//
//     }
type StringGeneratorMock struct {
	// GenerateFunc mocks the Generate method.
	GenerateFunc func() (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// Generate holds details about calls to the Generate method.
		Generate []struct {
		}
	}
}

// Generate calls GenerateFunc.
func (mock *StringGeneratorMock) Generate() (string, error) {
	if mock.GenerateFunc == nil {
		panic("StringGeneratorMock.GenerateFunc: method is nil but StringGenerator.Generate was just called")
	}
	callInfo := struct {
	}{}
	lockStringGeneratorMockGenerate.Lock()
	mock.calls.Generate = append(mock.calls.Generate, callInfo)
	lockStringGeneratorMockGenerate.Unlock()
	return mock.GenerateFunc()
}

// GenerateCalls gets all the calls that were made to Generate.
// Check the length with:
//     len(mockedStringGenerator.GenerateCalls())
func (mock *StringGeneratorMock) GenerateCalls() []struct {
} {
	var calls []struct {
	}
	lockStringGeneratorMockGenerate.RLock()
	calls = mock.calls.Generate
	lockStringGeneratorMockGenerate.RUnlock()
	return calls
}
